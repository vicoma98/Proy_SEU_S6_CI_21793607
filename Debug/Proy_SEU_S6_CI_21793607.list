
Proy_SEU_S6_CI_21793607.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adf4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  0800af98  0800af98  0001af98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b64c  0800b64c  0002042c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b64c  0800b64c  0001b64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b654  0800b654  0002042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b654  0800b654  0001b654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b658  0800b658  0001b658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000042c  20000000  0800b65c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005950  2000042c  0800ba88  0002042c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d7c  0800ba88  00025d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001501f  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361c  00000000  00000000  0003547b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00038a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  00039c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bb1  00000000  00000000  0003ada8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ec3  00000000  00000000  00054959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933ba  00000000  00000000  0006981c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fcbd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d6c  00000000  00000000  000fcc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000042c 	.word	0x2000042c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800af7c 	.word	0x0800af7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000430 	.word	0x20000430
 80001dc:	0800af7c 	.word	0x0800af7c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b9aa 	b.w	8000f58 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f83c 	bl	8000c88 <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2lz>:
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2300      	movs	r3, #0
 8000c22:	4604      	mov	r4, r0
 8000c24:	460d      	mov	r5, r1
 8000c26:	f7ff ff71 	bl	8000b0c <__aeabi_dcmplt>
 8000c2a:	b928      	cbnz	r0, 8000c38 <__aeabi_d2lz+0x1c>
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c34:	f000 b80a 	b.w	8000c4c <__aeabi_d2ulz>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3e:	f000 f805 	bl	8000c4c <__aeabi_d2ulz>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop

08000c4c <__aeabi_d2ulz>:
 8000c4c:	b5d0      	push	{r4, r6, r7, lr}
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__aeabi_d2ulz+0x34>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	4606      	mov	r6, r0
 8000c54:	460f      	mov	r7, r1
 8000c56:	f7ff fce7 	bl	8000628 <__aeabi_dmul>
 8000c5a:	f7ff ffa7 	bl	8000bac <__aeabi_d2uiz>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	f7ff fc68 	bl	8000534 <__aeabi_ui2d>
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <__aeabi_d2ulz+0x38>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f7ff fcde 	bl	8000628 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4630      	mov	r0, r6
 8000c72:	4639      	mov	r1, r7
 8000c74:	f7ff fb20 	bl	80002b8 <__aeabi_dsub>
 8000c78:	f7ff ff98 	bl	8000bac <__aeabi_d2uiz>
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c80:	3df00000 	.word	0x3df00000
 8000c84:	41f00000 	.word	0x41f00000

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <case_insensitive_strcmp+0x16>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e056      	b.n	8001024 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d10d      	bne.n	8000f9a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e050      	b.n	8001024 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e04a      	b.n	8001024 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3301      	adds	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <case_insensitive_strcmp+0xd4>)
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d103      	bne.n	8000fba <case_insensitive_strcmp+0x5e>
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f103 0220 	add.w	r2, r3, #32
 8000fb8:	e000      	b.n	8000fbc <case_insensitive_strcmp+0x60>
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	73bb      	strb	r3, [r7, #14]
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	491a      	ldr	r1, [pc, #104]	; (8001030 <case_insensitive_strcmp+0xd4>)
 8000fc8:	440b      	add	r3, r1
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d102      	bne.n	8000fda <case_insensitive_strcmp+0x7e>
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	3320      	adds	r3, #32
 8000fd8:	e000      	b.n	8000fdc <case_insensitive_strcmp+0x80>
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d0d0      	beq.n	8000f82 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	737b      	strb	r3, [r7, #13]
 8000fe6:	7b7b      	ldrb	r3, [r7, #13]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <case_insensitive_strcmp+0xd4>)
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d103      	bne.n	8001000 <case_insensitive_strcmp+0xa4>
 8000ff8:	7b7b      	ldrb	r3, [r7, #13]
 8000ffa:	f103 0220 	add.w	r2, r3, #32
 8000ffe:	e000      	b.n	8001002 <case_insensitive_strcmp+0xa6>
 8001000:	7b7a      	ldrb	r2, [r7, #13]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	733b      	strb	r3, [r7, #12]
 8001008:	7b3b      	ldrb	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	4908      	ldr	r1, [pc, #32]	; (8001030 <case_insensitive_strcmp+0xd4>)
 800100e:	440b      	add	r3, r1
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d102      	bne.n	8001020 <case_insensitive_strcmp+0xc4>
 800101a:	7b3b      	ldrb	r3, [r7, #12]
 800101c:	3320      	adds	r3, #32
 800101e:	e000      	b.n	8001022 <case_insensitive_strcmp+0xc6>
 8001020:	7b3b      	ldrb	r3, [r7, #12]
 8001022:	1ad3      	subs	r3, r2, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	0800b218 	.word	0x0800b218

08001034 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2028      	movs	r0, #40	; 0x28
 8001042:	4798      	blx	r3
 8001044:	60f8      	str	r0, [r7, #12]
    if (node)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800104c:	2228      	movs	r2, #40	; 0x28
 800104e:	2100      	movs	r1, #0
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f007 f831 	bl	80080b8 <memset>
    }

    return node;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800106c:	e037      	b.n	80010de <cJSON_Delete+0x7e>
    {
        next = item->next;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107c:	2b00      	cmp	r3, #0
 800107e:	d108      	bne.n	8001092 <cJSON_Delete+0x32>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ffe7 	bl	8001060 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	2b00      	cmp	r3, #0
 800109c:	d109      	bne.n	80010b2 <cJSON_Delete+0x52>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <cJSON_Delete+0x90>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6912      	ldr	r2, [r2, #16]
 80010ae:	4610      	mov	r0, r2
 80010b0:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d109      	bne.n	80010d2 <cJSON_Delete+0x72>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <cJSON_Delete+0x90>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6a12      	ldr	r2, [r2, #32]
 80010ce:	4610      	mov	r0, r2
 80010d0:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <cJSON_Delete+0x90>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	4798      	blx	r3
        item = next;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1c4      	bne.n	800106e <cJSON_Delete+0xe>
    }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000000 	.word	0x20000000

080010f4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80010f8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	0000      	movs	r0, r0
	...

08001108 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b098      	sub	sp, #96	; 0x60
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800111e:	2300      	movs	r3, #0
 8001120:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001122:	f7ff ffe7 	bl	80010f4 <get_decimal_point>
 8001126:	4603      	mov	r3, r0
 8001128:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <parse_number+0x36>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <parse_number+0x3a>
    {
        return false;
 800113e:	2300      	movs	r3, #0
 8001140:	e0c6      	b.n	80012d0 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001142:	2300      	movs	r3, #0
 8001144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001146:	e063      	b.n	8001210 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	6899      	ldr	r1, [r3, #8]
 8001150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001152:	440b      	add	r3, r1
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b45      	cmp	r3, #69	; 0x45
 800115a:	dc3d      	bgt.n	80011d8 <parse_number+0xd0>
 800115c:	2b2b      	cmp	r3, #43	; 0x2b
 800115e:	db66      	blt.n	800122e <parse_number+0x126>
 8001160:	3b2b      	subs	r3, #43	; 0x2b
 8001162:	2b1a      	cmp	r3, #26
 8001164:	d863      	bhi.n	800122e <parse_number+0x126>
 8001166:	a201      	add	r2, pc, #4	; (adr r2, 800116c <parse_number+0x64>)
 8001168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116c:	080011dd 	.word	0x080011dd
 8001170:	0800122f 	.word	0x0800122f
 8001174:	080011dd 	.word	0x080011dd
 8001178:	080011fb 	.word	0x080011fb
 800117c:	0800122f 	.word	0x0800122f
 8001180:	080011dd 	.word	0x080011dd
 8001184:	080011dd 	.word	0x080011dd
 8001188:	080011dd 	.word	0x080011dd
 800118c:	080011dd 	.word	0x080011dd
 8001190:	080011dd 	.word	0x080011dd
 8001194:	080011dd 	.word	0x080011dd
 8001198:	080011dd 	.word	0x080011dd
 800119c:	080011dd 	.word	0x080011dd
 80011a0:	080011dd 	.word	0x080011dd
 80011a4:	080011dd 	.word	0x080011dd
 80011a8:	0800122f 	.word	0x0800122f
 80011ac:	0800122f 	.word	0x0800122f
 80011b0:	0800122f 	.word	0x0800122f
 80011b4:	0800122f 	.word	0x0800122f
 80011b8:	0800122f 	.word	0x0800122f
 80011bc:	0800122f 	.word	0x0800122f
 80011c0:	0800122f 	.word	0x0800122f
 80011c4:	0800122f 	.word	0x0800122f
 80011c8:	0800122f 	.word	0x0800122f
 80011cc:	0800122f 	.word	0x0800122f
 80011d0:	0800122f 	.word	0x0800122f
 80011d4:	080011dd 	.word	0x080011dd
 80011d8:	2b65      	cmp	r3, #101	; 0x65
 80011da:	d128      	bne.n	800122e <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	6899      	ldr	r1, [r3, #8]
 80011e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e6:	440b      	add	r3, r1
 80011e8:	4413      	add	r3, r2
 80011ea:	7819      	ldrb	r1, [r3, #0]
 80011ec:	f107 0208 	add.w	r2, r7, #8
 80011f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011f2:	4413      	add	r3, r2
 80011f4:	460a      	mov	r2, r1
 80011f6:	701a      	strb	r2, [r3, #0]
                break;
 80011f8:	e007      	b.n	800120a <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 80011fa:	f107 0208 	add.w	r2, r7, #8
 80011fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001200:	4413      	add	r3, r2
 8001202:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001206:	701a      	strb	r2, [r3, #0]
                break;
 8001208:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800120a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800120c:	3301      	adds	r3, #1
 800120e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001212:	2b3e      	cmp	r3, #62	; 0x3e
 8001214:	d80d      	bhi.n	8001232 <parse_number+0x12a>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00a      	beq.n	8001232 <parse_number+0x12a>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001222:	441a      	add	r2, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	d38d      	bcc.n	8001148 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800122c:	e001      	b.n	8001232 <parse_number+0x12a>
                goto loop_end;
 800122e:	bf00      	nop
 8001230:	e000      	b.n	8001234 <parse_number+0x12c>
loop_end:
 8001232:	bf00      	nop
    number_c_string[i] = '\0';
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800123a:	4413      	add	r3, r2
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001240:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f007 ff6a 	bl	8009124 <strtod>
 8001250:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8001254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	429a      	cmp	r2, r3
 800125c:	d101      	bne.n	8001262 <parse_number+0x15a>
    {
        return false; /* parse_error */
 800125e:	2300      	movs	r3, #0
 8001260:	e036      	b.n	80012d0 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001268:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800126c:	a31b      	add	r3, pc, #108	; (adr r3, 80012dc <parse_number+0x1d4>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001276:	f7ff fc5d 	bl	8000b34 <__aeabi_dcmpge>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d004      	beq.n	800128a <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	e015      	b.n	80012b6 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <parse_number+0x1d0>)
 8001290:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001294:	f7ff fc44 	bl	8000b20 <__aeabi_dcmple>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d004      	beq.n	80012a8 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	e006      	b.n	80012b6 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 80012a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012ac:	f7ff fc56 	bl	8000b5c <__aeabi_d2iz>
 80012b0:	4602      	mov	r2, r0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2208      	movs	r2, #8
 80012ba:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80012c2:	f107 0208 	add.w	r2, r7, #8
 80012c6:	1a8a      	subs	r2, r1, r2
 80012c8:	441a      	add	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	609a      	str	r2, [r3, #8]
    return true;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3760      	adds	r7, #96	; 0x60
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	c1e00000 	.word	0xc1e00000
 80012dc:	ffc00000 	.word	0xffc00000
 80012e0:	41dfffff 	.word	0x41dfffff

080012e4 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	e04c      	b.n	8001394 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4413      	add	r3, r2
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b2f      	cmp	r3, #47	; 0x2f
 8001304:	d90f      	bls.n	8001326 <parse_hex4+0x42>
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b39      	cmp	r3, #57	; 0x39
 8001310:	d809      	bhi.n	8001326 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	3b30      	subs	r3, #48	; 0x30
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e02d      	b.n	8001382 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b40      	cmp	r3, #64	; 0x40
 8001330:	d90f      	bls.n	8001352 <parse_hex4+0x6e>
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b46      	cmp	r3, #70	; 0x46
 800133c:	d809      	bhi.n	8001352 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4413      	add	r3, r2
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	3b37      	subs	r3, #55	; 0x37
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	e017      	b.n	8001382 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b60      	cmp	r3, #96	; 0x60
 800135c:	d90f      	bls.n	800137e <parse_hex4+0x9a>
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b66      	cmp	r3, #102	; 0x66
 8001368:	d809      	bhi.n	800137e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	3b57      	subs	r3, #87	; 0x57
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e001      	b.n	8001382 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800137e:	2300      	movs	r3, #0
 8001380:	e00c      	b.n	800139c <parse_hex4+0xb8>
        }

        if (i < 3)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d802      	bhi.n	800138e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3301      	adds	r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b03      	cmp	r3, #3
 8001398:	d9af      	bls.n	80012fa <parse_hex4+0x16>
        }
    }

    return h;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b05      	cmp	r3, #5
 80013e0:	f340 80b7 	ble.w	8001552 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	3302      	adds	r3, #2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff7b 	bl	80012e4 <parse_hex4>
 80013ee:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80013f6:	d304      	bcc.n	8001402 <utf16_literal_to_utf8+0x5a>
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80013fe:	f0c0 80aa 	bcc.w	8001556 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001408:	d337      	bcc.n	800147a <utf16_literal_to_utf8+0xd2>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001410:	d233      	bcs.n	800147a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	3306      	adds	r3, #6
 8001416:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800141c:	230c      	movs	r3, #12
 800141e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b05      	cmp	r3, #5
 800142a:	f340 8096 	ble.w	800155a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b5c      	cmp	r3, #92	; 0x5c
 8001434:	f040 8093 	bne.w	800155e <utf16_literal_to_utf8+0x1b6>
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b75      	cmp	r3, #117	; 0x75
 8001440:	f040 808d 	bne.w	800155e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3302      	adds	r3, #2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff4b 	bl	80012e4 <parse_hex4>
 800144e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001456:	f0c0 8084 	bcc.w	8001562 <utf16_literal_to_utf8+0x1ba>
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001460:	d27f      	bcs.n	8001562 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	029a      	lsls	r2, r3, #10
 8001466:	4b43      	ldr	r3, [pc, #268]	; (8001574 <utf16_literal_to_utf8+0x1cc>)
 8001468:	4013      	ands	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001470:	4313      	orrs	r3, r2
 8001472:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001478:	e004      	b.n	8001484 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800147a:	2306      	movs	r3, #6
 800147c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	2b7f      	cmp	r3, #127	; 0x7f
 8001488:	d803      	bhi.n	8001492 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001490:	e01f      	b.n	80014d2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001498:	d206      	bcs.n	80014a8 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800149a:	2302      	movs	r3, #2
 800149c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80014a0:	23c0      	movs	r3, #192	; 0xc0
 80014a2:	f887 3020 	strb.w	r3, [r7, #32]
 80014a6:	e014      	b.n	80014d2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ae:	d206      	bcs.n	80014be <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80014b0:	2303      	movs	r3, #3
 80014b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80014b6:	23e0      	movs	r3, #224	; 0xe0
 80014b8:	f887 3020 	strb.w	r3, [r7, #32]
 80014bc:	e009      	b.n	80014d2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80014c4:	d24f      	bcs.n	8001566 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80014c6:	2304      	movs	r3, #4
 80014c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80014cc:	23f0      	movs	r3, #240	; 0xf0
 80014ce:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80014d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80014dc:	e015      	b.n	800150a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6819      	ldr	r1, [r3, #0]
 80014ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014f0:	440b      	add	r3, r1
 80014f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	099b      	lsrs	r3, r3, #6
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001500:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001504:	3b01      	subs	r3, #1
 8001506:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800150a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1e5      	bne.n	80014de <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001516:	2b01      	cmp	r3, #1
 8001518:	d909      	bls.n	800152e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	b2d9      	uxtb	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001526:	430a      	orrs	r2, r1
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
 800152c:	e007      	b.n	800153e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001546:	441a      	add	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800154c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001550:	e00b      	b.n	800156a <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001552:	bf00      	nop
 8001554:	e008      	b.n	8001568 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001556:	bf00      	nop
 8001558:	e006      	b.n	8001568 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800155a:	bf00      	nop
 800155c:	e004      	b.n	8001568 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800155e:	bf00      	nop
 8001560:	e002      	b.n	8001568 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001562:	bf00      	nop
 8001564:	e000      	b.n	8001568 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001566:	bf00      	nop

fail:
    return 0;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	000ffc00 	.word	0x000ffc00

08001578 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	3301      	adds	r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	3301      	adds	r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b22      	cmp	r3, #34	; 0x22
 80015b4:	f040 8102 	bne.w	80017bc <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80015c0:	e017      	b.n	80015f2 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b5c      	cmp	r3, #92	; 0x5c
 80015c8:	d110      	bne.n	80015ec <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	429a      	cmp	r2, r3
 80015dc:	f080 80f0 	bcs.w	80017c0 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	3301      	adds	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
                input_end++;
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	3301      	adds	r3, #1
 80015ea:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	3301      	adds	r3, #1
 80015f0:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a3a      	ldr	r2, [r7, #32]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	d203      	bcs.n	800160c <parse_string+0x94>
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b22      	cmp	r3, #34	; 0x22
 800160a:	d1da      	bne.n	80015c2 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6a3a      	ldr	r2, [r7, #32]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	461a      	mov	r2, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	f080 80d2 	bcs.w	80017c4 <parse_string+0x24c>
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b22      	cmp	r3, #34	; 0x22
 8001626:	f040 80cd 	bne.w	80017c4 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4413      	add	r3, r2
 8001634:	6a3a      	ldr	r2, [r7, #32]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	461a      	mov	r2, r3
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	3201      	adds	r2, #1
 8001648:	4610      	mov	r0, r2
 800164a:	4798      	blx	r3
 800164c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80b9 	beq.w	80017c8 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800165a:	e093      	b.n	8001784 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b5c      	cmp	r3, #92	; 0x5c
 8001662:	d008      	beq.n	8001676 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001666:	1c53      	adds	r3, r2, #1
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1c59      	adds	r1, r3, #1
 800166e:	60f9      	str	r1, [r7, #12]
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e086      	b.n	8001784 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001676:	2302      	movs	r3, #2
 8001678:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800167a:	6a3a      	ldr	r2, [r7, #32]
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	f340 80a3 	ble.w	80017cc <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	3301      	adds	r3, #1
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b75      	cmp	r3, #117	; 0x75
 800168e:	f300 809f 	bgt.w	80017d0 <parse_string+0x258>
 8001692:	2b5c      	cmp	r3, #92	; 0x5c
 8001694:	da04      	bge.n	80016a0 <parse_string+0x128>
 8001696:	2b22      	cmp	r3, #34	; 0x22
 8001698:	d05c      	beq.n	8001754 <parse_string+0x1dc>
 800169a:	2b2f      	cmp	r3, #47	; 0x2f
 800169c:	d05a      	beq.n	8001754 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800169e:	e097      	b.n	80017d0 <parse_string+0x258>
            switch (input_pointer[1])
 80016a0:	3b5c      	subs	r3, #92	; 0x5c
 80016a2:	2b19      	cmp	r3, #25
 80016a4:	f200 8094 	bhi.w	80017d0 <parse_string+0x258>
 80016a8:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <parse_string+0x138>)
 80016aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ae:	bf00      	nop
 80016b0:	08001755 	.word	0x08001755
 80016b4:	080017d1 	.word	0x080017d1
 80016b8:	080017d1 	.word	0x080017d1
 80016bc:	080017d1 	.word	0x080017d1
 80016c0:	080017d1 	.word	0x080017d1
 80016c4:	080017d1 	.word	0x080017d1
 80016c8:	08001719 	.word	0x08001719
 80016cc:	080017d1 	.word	0x080017d1
 80016d0:	080017d1 	.word	0x080017d1
 80016d4:	080017d1 	.word	0x080017d1
 80016d8:	08001725 	.word	0x08001725
 80016dc:	080017d1 	.word	0x080017d1
 80016e0:	080017d1 	.word	0x080017d1
 80016e4:	080017d1 	.word	0x080017d1
 80016e8:	080017d1 	.word	0x080017d1
 80016ec:	080017d1 	.word	0x080017d1
 80016f0:	080017d1 	.word	0x080017d1
 80016f4:	080017d1 	.word	0x080017d1
 80016f8:	08001731 	.word	0x08001731
 80016fc:	080017d1 	.word	0x080017d1
 8001700:	080017d1 	.word	0x080017d1
 8001704:	080017d1 	.word	0x080017d1
 8001708:	0800173d 	.word	0x0800173d
 800170c:	080017d1 	.word	0x080017d1
 8001710:	08001749 	.word	0x08001749
 8001714:	08001763 	.word	0x08001763
                    *output_pointer++ = '\b';
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60fa      	str	r2, [r7, #12]
 800171e:	2208      	movs	r2, #8
 8001720:	701a      	strb	r2, [r3, #0]
                    break;
 8001722:	e02b      	b.n	800177c <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60fa      	str	r2, [r7, #12]
 800172a:	220c      	movs	r2, #12
 800172c:	701a      	strb	r2, [r3, #0]
                    break;
 800172e:	e025      	b.n	800177c <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	60fa      	str	r2, [r7, #12]
 8001736:	220a      	movs	r2, #10
 8001738:	701a      	strb	r2, [r3, #0]
                    break;
 800173a:	e01f      	b.n	800177c <parse_string+0x204>
                    *output_pointer++ = '\r';
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60fa      	str	r2, [r7, #12]
 8001742:	220d      	movs	r2, #13
 8001744:	701a      	strb	r2, [r3, #0]
                    break;
 8001746:	e019      	b.n	800177c <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60fa      	str	r2, [r7, #12]
 800174e:	2209      	movs	r2, #9
 8001750:	701a      	strb	r2, [r3, #0]
                    break;
 8001752:	e013      	b.n	800177c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	60fa      	str	r2, [r7, #12]
 800175a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175c:	7852      	ldrb	r2, [r2, #1]
 800175e:	701a      	strb	r2, [r3, #0]
                    break;
 8001760:	e00c      	b.n	800177c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	461a      	mov	r2, r3
 8001768:	6a39      	ldr	r1, [r7, #32]
 800176a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800176c:	f7ff fe1c 	bl	80013a8 <utf16_literal_to_utf8>
 8001770:	4603      	mov	r3, r0
 8001772:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d02c      	beq.n	80017d4 <parse_string+0x25c>
                    break;
 800177a:	bf00      	nop
            }
            input_pointer += sequence_length;
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001780:	4413      	add	r3, r2
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	429a      	cmp	r2, r3
 800178a:	f4ff af67 	bcc.w	800165c <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2210      	movs	r2, #16
 8001798:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a3a      	ldr	r2, [r7, #32]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	609a      	str	r2, [r3, #8]

    return true;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e01e      	b.n	80017fa <parse_string+0x282>
        goto fail;
 80017bc:	bf00      	nop
 80017be:	e00a      	b.n	80017d6 <parse_string+0x25e>
                    goto fail;
 80017c0:	bf00      	nop
 80017c2:	e008      	b.n	80017d6 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 80017c4:	bf00      	nop
 80017c6:	e006      	b.n	80017d6 <parse_string+0x25e>
            goto fail; /* allocation failure */
 80017c8:	bf00      	nop
 80017ca:	e004      	b.n	80017d6 <parse_string+0x25e>
                goto fail;
 80017cc:	bf00      	nop
 80017ce:	e002      	b.n	80017d6 <parse_string+0x25e>
                    goto fail;
 80017d0:	bf00      	nop
 80017d2:	e000      	b.n	80017d6 <parse_string+0x25e>
                        goto fail;
 80017d4:	bf00      	nop

fail:
    if (output != NULL)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	69f8      	ldr	r0, [r7, #28]
 80017e2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	609a      	str	r2, [r3, #8]
    }

    return false;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop

08001804 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <buffer_skip_whitespace+0x16>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800181a:	2300      	movs	r3, #0
 800181c:	e02c      	b.n	8001878 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <buffer_skip_whitespace+0x2c>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	429a      	cmp	r2, r3
 800182e:	d306      	bcc.n	800183e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	e021      	b.n	8001878 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00d      	beq.n	8001860 <buffer_skip_whitespace+0x5c>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <buffer_skip_whitespace+0x5c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b20      	cmp	r3, #32
 800185e:	d9e9      	bls.n	8001834 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	d104      	bne.n	8001876 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	1e5a      	subs	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001876:	687b      	ldr	r3, [r7, #4]
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <skip_utf8_bom+0x1e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <skip_utf8_bom+0x1e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <skip_utf8_bom+0x22>
    {
        return NULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e01c      	b.n	80018e0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d018      	beq.n	80018de <skip_utf8_bom+0x5a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	1d1a      	adds	r2, r3, #4
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d211      	bcs.n	80018de <skip_utf8_bom+0x5a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	4413      	add	r3, r2
 80018c4:	2203      	movs	r2, #3
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <skip_utf8_bom+0x64>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f006 fdf3 	bl	80084b4 <strncmp>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d104      	bne.n	80018de <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	1cda      	adds	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018de:	687b      	ldr	r3, [r7, #4]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	0800afd0 	.word	0x0800afd0

080018ec <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	e00c      	b.n	800191c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f7fe fc76 	bl	80001f4 <strlen>
 8001908:	4603      	mov	r3, r0
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	6979      	ldr	r1, [r7, #20]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f805 	bl	8001924 <cJSON_ParseWithLengthOpts>
 800191a:	4603      	mov	r3, r0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08e      	sub	sp, #56	; 0x38
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001932:	f107 0318 	add.w	r3, r7, #24
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <cJSON_ParseWithLengthOpts+0x12c>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001950:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <cJSON_ParseWithLengthOpts+0x12c>)
 8001952:	2200      	movs	r2, #0
 8001954:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d042      	beq.n	80019e2 <cJSON_ParseWithLengthOpts+0xbe>
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d03f      	beq.n	80019e2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800196e:	4a39      	ldr	r2, [pc, #228]	; (8001a54 <cJSON_ParseWithLengthOpts+0x130>)
 8001970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001974:	ca07      	ldmia	r2, {r0, r1, r2}
 8001976:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800197a:	4836      	ldr	r0, [pc, #216]	; (8001a54 <cJSON_ParseWithLengthOpts+0x130>)
 800197c:	f7ff fb5a 	bl	8001034 <cJSON_New_Item>
 8001980:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	2b00      	cmp	r3, #0
 8001986:	d02e      	beq.n	80019e6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001988:	f107 0318 	add.w	r3, r7, #24
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff79 	bl	8001884 <skip_utf8_bom>
 8001992:	4603      	mov	r3, r0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff35 	bl	8001804 <buffer_skip_whitespace>
 800199a:	4603      	mov	r3, r0
 800199c:	4619      	mov	r1, r3
 800199e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019a0:	f000 f868 	bl	8001a74 <parse_value>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01f      	beq.n	80019ea <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff25 	bl	8001804 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80019ba:	6a3a      	ldr	r2, [r7, #32]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d215      	bcs.n	80019ee <cJSON_ParseWithLengthOpts+0xca>
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	441a      	add	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
    }

    return item;
 80019de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e0:	e031      	b.n	8001a46 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80019e2:	bf00      	nop
 80019e4:	e004      	b.n	80019f0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80019e6:	bf00      	nop
 80019e8:	e002      	b.n	80019f0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80019ea:	bf00      	nop
 80019ec:	e000      	b.n	80019f0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80019ee:	bf00      	nop

fail:
    if (item != NULL)
 80019f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80019f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019f8:	f7ff fb32 	bl	8001060 <cJSON_Delete>
    }

    if (value != NULL)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d020      	beq.n	8001a44 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a0a:	6a3a      	ldr	r2, [r7, #32]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d202      	bcs.n	8001a18 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e005      	b.n	8001a24 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	441a      	add	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <cJSON_ParseWithLengthOpts+0x12c>)
 8001a36:	461a      	mov	r2, r3
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a40:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3738      	adds	r7, #56	; 0x38
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000448 	.word	0x20000448
 8001a54:	20000000 	.word	0x20000000

08001a58 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff41 	bl	80018ec <cJSON_ParseWithOpts>
 8001a6a:	4603      	mov	r3, r0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <parse_value+0x18>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <parse_value+0x1c>
    {
        return false; /* no input */
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e0d2      	b.n	8001c36 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d01d      	beq.n	8001ad2 <parse_value+0x5e>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	1d1a      	adds	r2, r3, #4
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d816      	bhi.n	8001ad2 <parse_value+0x5e>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4413      	add	r3, r2
 8001aae:	2204      	movs	r2, #4
 8001ab0:	4963      	ldr	r1, [pc, #396]	; (8001c40 <parse_value+0x1cc>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f006 fcfe 	bl	80084b4 <strncmp>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	1d1a      	adds	r2, r3, #4
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	609a      	str	r2, [r3, #8]
        return true;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0b1      	b.n	8001c36 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01d      	beq.n	8001b14 <parse_value+0xa0>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	1d5a      	adds	r2, r3, #5
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d816      	bhi.n	8001b14 <parse_value+0xa0>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	4413      	add	r3, r2
 8001af0:	2205      	movs	r2, #5
 8001af2:	4954      	ldr	r1, [pc, #336]	; (8001c44 <parse_value+0x1d0>)
 8001af4:	4618      	mov	r0, r3
 8001af6:	f006 fcdd 	bl	80084b4 <strncmp>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	1d5a      	adds	r2, r3, #5
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	609a      	str	r2, [r3, #8]
        return true;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e090      	b.n	8001c36 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d020      	beq.n	8001b5c <parse_value+0xe8>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	1d1a      	adds	r2, r3, #4
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d819      	bhi.n	8001b5c <parse_value+0xe8>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4413      	add	r3, r2
 8001b32:	2204      	movs	r2, #4
 8001b34:	4944      	ldr	r1, [pc, #272]	; (8001c48 <parse_value+0x1d4>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f006 fcbc 	bl	80084b4 <strncmp>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2202      	movs	r2, #2
 8001b46:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	1d1a      	adds	r2, r3, #4
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	609a      	str	r2, [r3, #8]
        return true;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e06c      	b.n	8001c36 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d013      	beq.n	8001b8a <parse_value+0x116>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d20d      	bcs.n	8001b8a <parse_value+0x116>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b22      	cmp	r3, #34	; 0x22
 8001b7c:	d105      	bne.n	8001b8a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001b7e:	6839      	ldr	r1, [r7, #0]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fcf9 	bl	8001578 <parse_string>
 8001b86:	4603      	mov	r3, r0
 8001b88:	e055      	b.n	8001c36 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d023      	beq.n	8001bd8 <parse_value+0x164>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d21d      	bcs.n	8001bd8 <parse_value+0x164>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b2d      	cmp	r3, #45	; 0x2d
 8001baa:	d00f      	beq.n	8001bcc <parse_value+0x158>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b2f      	cmp	r3, #47	; 0x2f
 8001bba:	d90d      	bls.n	8001bd8 <parse_value+0x164>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b39      	cmp	r3, #57	; 0x39
 8001bca:	d805      	bhi.n	8001bd8 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001bcc:	6839      	ldr	r1, [r7, #0]
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fa9a 	bl	8001108 <parse_number>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	e02e      	b.n	8001c36 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d013      	beq.n	8001c06 <parse_value+0x192>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d20d      	bcs.n	8001c06 <parse_value+0x192>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b5b      	cmp	r3, #91	; 0x5b
 8001bf8:	d105      	bne.n	8001c06 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f825 	bl	8001c4c <parse_array>
 8001c02:	4603      	mov	r3, r0
 8001c04:	e017      	b.n	8001c36 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <parse_value+0x1c0>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d20d      	bcs.n	8001c34 <parse_value+0x1c0>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4413      	add	r3, r2
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b7b      	cmp	r3, #123	; 0x7b
 8001c26:	d105      	bne.n	8001c34 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8d2 	bl	8001dd4 <parse_object>
 8001c30:	4603      	mov	r3, r0
 8001c32:	e000      	b.n	8001c36 <parse_value+0x1c2>
    }

    return false;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	0800afa4 	.word	0x0800afa4
 8001c44:	0800afd4 	.word	0x0800afd4
 8001c48:	0800afdc 	.word	0x0800afdc

08001c4c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c66:	d301      	bcc.n	8001c6c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e0af      	b.n	8001dcc <parse_array+0x180>
    }
    input_buffer->depth++;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b5b      	cmp	r3, #91	; 0x5b
 8001c84:	f040 8094 	bne.w	8001db0 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001c92:	6838      	ldr	r0, [r7, #0]
 8001c94:	f7ff fdb6 	bl	8001804 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00d      	beq.n	8001cba <parse_array+0x6e>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d207      	bcs.n	8001cba <parse_array+0x6e>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b5d      	cmp	r3, #93	; 0x5d
 8001cb8:	d061      	beq.n	8001d7e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <parse_array+0x80>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d305      	bcc.n	8001cd8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	609a      	str	r2, [r3, #8]
        goto fail;
 8001cd6:	e072      	b.n	8001dbe <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3310      	adds	r3, #16
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f9a4 	bl	8001034 <cJSON_New_Item>
 8001cec:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d05f      	beq.n	8001db4 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d104      	bne.n	8001d04 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	e007      	b.n	8001d14 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001d1e:	6838      	ldr	r0, [r7, #0]
 8001d20:	f7ff fd70 	bl	8001804 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001d24:	6839      	ldr	r1, [r7, #0]
 8001d26:	6938      	ldr	r0, [r7, #16]
 8001d28:	f7ff fea4 	bl	8001a74 <parse_value>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d042      	beq.n	8001db8 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001d32:	6838      	ldr	r0, [r7, #0]
 8001d34:	f7ff fd66 	bl	8001804 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00d      	beq.n	8001d5a <parse_array+0x10e>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d207      	bcs.n	8001d5a <parse_array+0x10e>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b2c      	cmp	r3, #44	; 0x2c
 8001d58:	d0c3      	beq.n	8001ce2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d02d      	beq.n	8001dbc <parse_array+0x170>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d227      	bcs.n	8001dbc <parse_array+0x170>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4413      	add	r3, r2
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b5d      	cmp	r3, #93	; 0x5d
 8001d7a:	d11f      	bne.n	8001dbc <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001d7c:	e000      	b.n	8001d80 <parse_array+0x134>
        goto success;
 8001d7e:	bf00      	nop
    input_buffer->depth--;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	1e5a      	subs	r2, r3, #1
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <parse_array+0x14a>
        head->prev = current_item;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	609a      	str	r2, [r3, #8]

    return true;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e00d      	b.n	8001dcc <parse_array+0x180>
        goto fail;
 8001db0:	bf00      	nop
 8001db2:	e004      	b.n	8001dbe <parse_array+0x172>
            goto fail; /* allocation failure */
 8001db4:	bf00      	nop
 8001db6:	e002      	b.n	8001dbe <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001db8:	bf00      	nop
 8001dba:	e000      	b.n	8001dbe <parse_array+0x172>
        goto fail; /* expected end of array */
 8001dbc:	bf00      	nop

fail:
    if (head != NULL)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001dc4:	6978      	ldr	r0, [r7, #20]
 8001dc6:	f7ff f94b 	bl	8001060 <cJSON_Delete>
    }

    return false;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dee:	d301      	bcc.n	8001df4 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001df0:	2300      	movs	r3, #0
 8001df2:	e0ea      	b.n	8001fca <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80d0 	beq.w	8001fa6 <parse_object+0x1d2>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	f080 80c9 	bcs.w	8001fa6 <parse_object+0x1d2>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b7b      	cmp	r3, #123	; 0x7b
 8001e22:	f040 80c0 	bne.w	8001fa6 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001e30:	6838      	ldr	r0, [r7, #0]
 8001e32:	f7ff fce7 	bl	8001804 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00e      	beq.n	8001e5a <parse_object+0x86>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d208      	bcs.n	8001e5a <parse_object+0x86>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4413      	add	r3, r2
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b7d      	cmp	r3, #125	; 0x7d
 8001e56:	f000 808d 	beq.w	8001f74 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <parse_object+0x98>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d305      	bcc.n	8001e78 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	1e5a      	subs	r2, r3, #1
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	609a      	str	r2, [r3, #8]
        goto fail;
 8001e76:	e0a1      	b.n	8001fbc <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3310      	adds	r3, #16
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f8d4 	bl	8001034 <cJSON_New_Item>
 8001e8c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 808a 	beq.w	8001faa <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d104      	bne.n	8001ea6 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	e007      	b.n	8001eb6 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	f7ff fc9f 	bl	8001804 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	6938      	ldr	r0, [r7, #16]
 8001eca:	f7ff fb55 	bl	8001578 <parse_string>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d06c      	beq.n	8001fae <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001ed4:	6838      	ldr	r0, [r7, #0]
 8001ed6:	f7ff fc95 	bl	8001804 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d061      	beq.n	8001fb2 <parse_object+0x1de>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d25b      	bcs.n	8001fb2 <parse_object+0x1de>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b3a      	cmp	r3, #58	; 0x3a
 8001f08:	d153      	bne.n	8001fb2 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f14:	6838      	ldr	r0, [r7, #0]
 8001f16:	f7ff fc75 	bl	8001804 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001f1a:	6839      	ldr	r1, [r7, #0]
 8001f1c:	6938      	ldr	r0, [r7, #16]
 8001f1e:	f7ff fda9 	bl	8001a74 <parse_value>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d046      	beq.n	8001fb6 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001f28:	6838      	ldr	r0, [r7, #0]
 8001f2a:	f7ff fc6b 	bl	8001804 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <parse_object+0x17c>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <parse_object+0x17c>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b2c      	cmp	r3, #44	; 0x2c
 8001f4e:	d098      	beq.n	8001e82 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d031      	beq.n	8001fba <parse_object+0x1e6>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d22b      	bcs.n	8001fba <parse_object+0x1e6>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b7d      	cmp	r3, #125	; 0x7d
 8001f70:	d123      	bne.n	8001fba <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001f72:	e000      	b.n	8001f76 <parse_object+0x1a2>
        goto success; /* empty object */
 8001f74:	bf00      	nop
    input_buffer->depth--;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <parse_object+0x1b8>
        head->prev = current_item;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	609a      	str	r2, [r3, #8]
    return true;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e011      	b.n	8001fca <parse_object+0x1f6>
        goto fail; /* not an object */
 8001fa6:	bf00      	nop
 8001fa8:	e008      	b.n	8001fbc <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001faa:	bf00      	nop
 8001fac:	e006      	b.n	8001fbc <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001fae:	bf00      	nop
 8001fb0:	e004      	b.n	8001fbc <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001fb2:	bf00      	nop
 8001fb4:	e002      	b.n	8001fbc <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001fb6:	bf00      	nop
 8001fb8:	e000      	b.n	8001fbc <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001fba:	bf00      	nop

fail:
    if (head != NULL)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff f84c 	bl	8001060 <cJSON_Delete>
    }

    return false;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <get_array_item>:

    return (int)size;
}

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <get_array_item+0x18>
    {
        return NULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e010      	b.n	800200c <get_array_item+0x3a>
    }

    current_child = array->child;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8001ff0:	e005      	b.n	8001ffe <get_array_item+0x2c>
    {
        index--;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <get_array_item+0x38>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f3      	bne.n	8001ff2 <get_array_item+0x20>
    }

    return current_child;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	da01      	bge.n	800202c <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 8002028:	2300      	movs	r3, #0
 800202a:	e005      	b.n	8002038 <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4619      	mov	r1, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ffce 	bl	8001fd2 <get_array_item>
 8002036:	4603      	mov	r3, r0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <get_object_item+0x1c>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <get_object_item+0x20>
    {
        return NULL;
 800205c:	2300      	movs	r3, #0
 800205e:	e033      	b.n	80020c8 <get_object_item+0x88>
    }

    current_element = object->child;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d017      	beq.n	800209c <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800206c:	e002      	b.n	8002074 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01c      	beq.n	80020b4 <get_object_item+0x74>
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d018      	beq.n	80020b4 <get_object_item+0x74>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4619      	mov	r1, r3
 8002088:	68b8      	ldr	r0, [r7, #8]
 800208a:	f7fe f8a9 	bl	80001e0 <strcmp>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ec      	bne.n	800206e <get_object_item+0x2e>
 8002094:	e00e      	b.n	80020b4 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d008      	beq.n	80020b4 <get_object_item+0x74>
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4619      	mov	r1, r3
 80020a8:	68b8      	ldr	r0, [r7, #8]
 80020aa:	f7fe ff57 	bl	8000f5c <case_insensitive_strcmp>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <get_object_item+0x82>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <get_object_item+0x86>
        return NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e000      	b.n	80020c8 <get_object_item+0x88>
    }

    return current_element;
 80020c6:	697b      	ldr	r3, [r7, #20]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 80020da:	2201      	movs	r2, #1
 80020dc:	6839      	ldr	r1, [r7, #0]
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffae 	bl	8002040 <get_object_item>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <vApplicationGetIdleTaskMemory+0x2c>)
 8002100:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4a06      	ldr	r2, [pc, #24]	; (8002120 <vApplicationGetIdleTaskMemory+0x30>)
 8002106:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000450 	.word	0x20000450
 8002120:	200004a4 	.word	0x200004a4

08002124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002124:	b5b0      	push	{r4, r5, r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800212a:	f001 fa43 	bl	80035b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800212e:	f000 f823 	bl	8002178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002132:	f000 f915 	bl	8002360 <MX_GPIO_Init>
  MX_DMA_Init();
 8002136:	f000 f8dd 	bl	80022f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800213a:	f000 f8b1 	bl	80022a0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800213e:	f000 f885 	bl	800224c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <main+0x4c>)
 8002144:	1d3c      	adds	r4, r7, #4
 8002146:	461d      	mov	r5, r3
 8002148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800214c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f003 fca0 	bl	8005a9e <osThreadCreate>
 800215e:	4603      	mov	r3, r0
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <main+0x50>)
 8002162:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  serie_Init_FreeRTOS();
 8002164:	f000 fc56 	bl	8002a14 <serie_Init_FreeRTOS>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002168:	f003 fc92 	bl	8005a90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800216c:	e7fe      	b.n	800216c <main+0x48>
 800216e:	bf00      	nop
 8002170:	0800aff0 	.word	0x0800aff0
 8002174:	200007ec 	.word	0x200007ec

08002178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b094      	sub	sp, #80	; 0x50
 800217c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800217e:	f107 0320 	add.w	r3, r7, #32
 8002182:	2230      	movs	r2, #48	; 0x30
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f005 ff96 	bl	80080b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <SystemClock_Config+0xcc>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a27      	ldr	r2, [pc, #156]	; (8002244 <SystemClock_Config+0xcc>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <SystemClock_Config+0xcc>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	4b22      	ldr	r3, [pc, #136]	; (8002248 <SystemClock_Config+0xd0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a21      	ldr	r2, [pc, #132]	; (8002248 <SystemClock_Config+0xd0>)
 80021c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <SystemClock_Config+0xd0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021d4:	2302      	movs	r3, #2
 80021d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d8:	2301      	movs	r3, #1
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021dc:	2310      	movs	r3, #16
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e0:	2302      	movs	r3, #2
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021e4:	2300      	movs	r3, #0
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80021e8:	2310      	movs	r3, #16
 80021ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80021f2:	2304      	movs	r3, #4
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021f6:	2304      	movs	r3, #4
 80021f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021fa:	f107 0320 	add.w	r3, r7, #32
 80021fe:	4618      	mov	r0, r3
 8002200:	f002 f8da 	bl	80043b8 <HAL_RCC_OscConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800220a:	f000 f91f 	bl	800244c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800220e:	230f      	movs	r3, #15
 8002210:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002212:	2302      	movs	r3, #2
 8002214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800221a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	2102      	movs	r1, #2
 800222a:	4618      	mov	r0, r3
 800222c:	f002 fb3c 	bl	80048a8 <HAL_RCC_ClockConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002236:	f000 f909 	bl	800244c <Error_Handler>
  }
}
 800223a:	bf00      	nop
 800223c:	3750      	adds	r7, #80	; 0x50
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40007000 	.word	0x40007000

0800224c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002252:	4a12      	ldr	r2, [pc, #72]	; (800229c <MX_USART1_UART_Init+0x50>)
 8002254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800225c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_USART1_UART_Init+0x4c>)
 8002284:	f002 fd30 	bl	8004ce8 <HAL_UART_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800228e:	f000 f8dd 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200006a4 	.word	0x200006a4
 800229c:	40011000 	.word	0x40011000

080022a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <MX_USART2_UART_Init+0x50>)
 80022a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022c6:	220c      	movs	r2, #12
 80022c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <MX_USART2_UART_Init+0x4c>)
 80022d8:	f002 fd06 	bl	8004ce8 <HAL_UART_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022e2:	f000 f8b3 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200006e8 	.word	0x200006e8
 80022f0:	40004400 	.word	0x40004400

080022f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	4b17      	ldr	r3, [pc, #92]	; (800235c <MX_DMA_Init+0x68>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a16      	ldr	r2, [pc, #88]	; (800235c <MX_DMA_Init+0x68>)
 8002304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <MX_DMA_Init+0x68>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <MX_DMA_Init+0x68>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a0f      	ldr	r2, [pc, #60]	; (800235c <MX_DMA_Init+0x68>)
 8002320:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <MX_DMA_Init+0x68>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2105      	movs	r1, #5
 8002336:	2010      	movs	r0, #16
 8002338:	f001 fa89 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800233c:	2010      	movs	r0, #16
 800233e:	f001 faa2 	bl	8003886 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2105      	movs	r1, #5
 8002346:	203a      	movs	r0, #58	; 0x3a
 8002348:	f001 fa81 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800234c:	203a      	movs	r0, #58	; 0x3a
 800234e:	f001 fa9a 	bl	8003886 <HAL_NVIC_EnableIRQ>

}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <MX_GPIO_Init+0xd0>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a2c      	ldr	r2, [pc, #176]	; (8002430 <MX_GPIO_Init+0xd0>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <MX_GPIO_Init+0xd0>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <MX_GPIO_Init+0xd0>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a25      	ldr	r2, [pc, #148]	; (8002430 <MX_GPIO_Init+0xd0>)
 800239c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b23      	ldr	r3, [pc, #140]	; (8002430 <MX_GPIO_Init+0xd0>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <MX_GPIO_Init+0xd0>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a1e      	ldr	r2, [pc, #120]	; (8002430 <MX_GPIO_Init+0xd0>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <MX_GPIO_Init+0xd0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <MX_GPIO_Init+0xd0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a17      	ldr	r2, [pc, #92]	; (8002430 <MX_GPIO_Init+0xd0>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <MX_GPIO_Init+0xd0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2120      	movs	r1, #32
 80023ea:	4812      	ldr	r0, [pc, #72]	; (8002434 <MX_GPIO_Init+0xd4>)
 80023ec:	f001 ffca 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	480c      	ldr	r0, [pc, #48]	; (8002438 <MX_GPIO_Init+0xd8>)
 8002408:	f001 fe38 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800240c:	2320      	movs	r3, #32
 800240e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4619      	mov	r1, r3
 8002422:	4804      	ldr	r0, [pc, #16]	; (8002434 <MX_GPIO_Init+0xd4>)
 8002424:	f001 fe2a 	bl	800407c <HAL_GPIO_Init>

}
 8002428:	bf00      	nop
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	40020000 	.word	0x40020000
 8002438:	40020800 	.word	0x40020800

0800243c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002444:	2001      	movs	r0, #1
 8002446:	f003 fb76 	bl	8005b36 <osDelay>
 800244a:	e7fb      	b.n	8002444 <StartDefaultTask+0x8>

0800244c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002450:	b672      	cpsid	i
}
 8002452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002454:	e7fe      	b.n	8002454 <Error_Handler+0x8>
	...

08002458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_MspInit+0x54>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_MspInit+0x54>)
 8002468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <HAL_MspInit+0x54>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_MspInit+0x54>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_MspInit+0x54>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_MspInit+0x54>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	210f      	movs	r1, #15
 800249a:	f06f 0001 	mvn.w	r0, #1
 800249e:	f001 f9d6 	bl	800384e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800

080024b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 031c 	add.w	r3, r7, #28
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a60      	ldr	r2, [pc, #384]	; (8002650 <HAL_UART_MspInit+0x1a0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d15b      	bne.n	800258a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	4b5f      	ldr	r3, [pc, #380]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	4a5e      	ldr	r2, [pc, #376]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 80024dc:	f043 0310 	orr.w	r3, r3, #16
 80024e0:	6453      	str	r3, [r2, #68]	; 0x44
 80024e2:	4b5c      	ldr	r3, [pc, #368]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	4b58      	ldr	r3, [pc, #352]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a57      	ldr	r2, [pc, #348]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b55      	ldr	r3, [pc, #340]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800250a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800250e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800251c:	2307      	movs	r3, #7
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	4619      	mov	r1, r3
 8002526:	484c      	ldr	r0, [pc, #304]	; (8002658 <HAL_UART_MspInit+0x1a8>)
 8002528:	f001 fda8 	bl	800407c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800252c:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_UART_MspInit+0x1ac>)
 800252e:	4a4c      	ldr	r2, [pc, #304]	; (8002660 <HAL_UART_MspInit+0x1b0>)
 8002530:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_UART_MspInit+0x1ac>)
 8002534:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002538:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800253a:	4b48      	ldr	r3, [pc, #288]	; (800265c <HAL_UART_MspInit+0x1ac>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002540:	4b46      	ldr	r3, [pc, #280]	; (800265c <HAL_UART_MspInit+0x1ac>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002546:	4b45      	ldr	r3, [pc, #276]	; (800265c <HAL_UART_MspInit+0x1ac>)
 8002548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800254e:	4b43      	ldr	r3, [pc, #268]	; (800265c <HAL_UART_MspInit+0x1ac>)
 8002550:	2200      	movs	r2, #0
 8002552:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002554:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_UART_MspInit+0x1ac>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800255a:	4b40      	ldr	r3, [pc, #256]	; (800265c <HAL_UART_MspInit+0x1ac>)
 800255c:	2200      	movs	r2, #0
 800255e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002560:	4b3e      	ldr	r3, [pc, #248]	; (800265c <HAL_UART_MspInit+0x1ac>)
 8002562:	2200      	movs	r2, #0
 8002564:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_UART_MspInit+0x1ac>)
 8002568:	2200      	movs	r2, #0
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800256c:	483b      	ldr	r0, [pc, #236]	; (800265c <HAL_UART_MspInit+0x1ac>)
 800256e:	f001 f9a5 	bl	80038bc <HAL_DMA_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002578:	f7ff ff68 	bl	800244c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a37      	ldr	r2, [pc, #220]	; (800265c <HAL_UART_MspInit+0x1ac>)
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
 8002582:	4a36      	ldr	r2, [pc, #216]	; (800265c <HAL_UART_MspInit+0x1ac>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002588:	e05e      	b.n	8002648 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a35      	ldr	r2, [pc, #212]	; (8002664 <HAL_UART_MspInit+0x1b4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d159      	bne.n	8002648 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	4a2d      	ldr	r2, [pc, #180]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a2:	6413      	str	r3, [r2, #64]	; 0x40
 80025a4:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	4a26      	ldr	r2, [pc, #152]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6313      	str	r3, [r2, #48]	; 0x30
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_UART_MspInit+0x1a4>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025cc:	230c      	movs	r3, #12
 80025ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025dc:	2307      	movs	r3, #7
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e0:	f107 031c 	add.w	r3, r7, #28
 80025e4:	4619      	mov	r1, r3
 80025e6:	481c      	ldr	r0, [pc, #112]	; (8002658 <HAL_UART_MspInit+0x1a8>)
 80025e8:	f001 fd48 	bl	800407c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80025ec:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 80025ee:	4a1f      	ldr	r2, [pc, #124]	; (800266c <HAL_UART_MspInit+0x1bc>)
 80025f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 80025f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 8002608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800260c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 8002610:	2200      	movs	r2, #0
 8002612:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 800261c:	2200      	movs	r2, #0
 800261e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 8002622:	2200      	movs	r2, #0
 8002624:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 8002628:	2200      	movs	r2, #0
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800262c:	480e      	ldr	r0, [pc, #56]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 800262e:	f001 f945 	bl	80038bc <HAL_DMA_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002638:	f7ff ff08 	bl	800244c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
 8002642:	4a09      	ldr	r2, [pc, #36]	; (8002668 <HAL_UART_MspInit+0x1b8>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002648:	bf00      	nop
 800264a:	3730      	adds	r7, #48	; 0x30
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40011000 	.word	0x40011000
 8002654:	40023800 	.word	0x40023800
 8002658:	40020000 	.word	0x40020000
 800265c:	2000072c 	.word	0x2000072c
 8002660:	40026440 	.word	0x40026440
 8002664:	40004400 	.word	0x40004400
 8002668:	2000078c 	.word	0x2000078c
 800266c:	40026088 	.word	0x40026088

08002670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <NMI_Handler+0x4>

08002676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800267a:	e7fe      	b.n	800267a <HardFault_Handler+0x4>

0800267c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <MemManage_Handler+0x4>

08002682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002686:	e7fe      	b.n	8002686 <BusFault_Handler+0x4>

08002688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800268c:	e7fe      	b.n	800268c <UsageFault_Handler+0x4>

0800268e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a0:	f000 ffda 	bl	8003658 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80026a4:	f004 fcd6 	bl	8007054 <xTaskGetSchedulerState>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d001      	beq.n	80026b2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80026ae:	f005 f8b3 	bl	8007818 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <DMA1_Stream5_IRQHandler+0x10>)
 80026be:	f001 fa73 	bl	8003ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000078c 	.word	0x2000078c

080026cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <DMA2_Stream2_IRQHandler+0x10>)
 80026d2:	f001 fa69 	bl	8003ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000072c 	.word	0x2000072c

080026e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
	return 1;
 80026e4:	2301      	movs	r3, #1
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_kill>:

int _kill(int pid, int sig)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026fa:	f005 fac7 	bl	8007c8c <__errno>
 80026fe:	4603      	mov	r3, r0
 8002700:	2216      	movs	r2, #22
 8002702:	601a      	str	r2, [r3, #0]
	return -1;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_exit>:

void _exit (int status)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002718:	f04f 31ff 	mov.w	r1, #4294967295
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ffe7 	bl	80026f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002722:	e7fe      	b.n	8002722 <_exit+0x12>

08002724 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	e00a      	b.n	800274c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002736:	f3af 8000 	nop.w
 800273a:	4601      	mov	r1, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	b2ca      	uxtb	r2, r1
 8002744:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	dbf0      	blt.n	8002736 <_read+0x12>
	}

return len;
 8002754:	687b      	ldr	r3, [r7, #4]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <_close>:
	}
	return len;
}

int _close(int file)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
	return -1;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002786:	605a      	str	r2, [r3, #4]
	return 0;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <_isatty>:

int _isatty(int file)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
	return 1;
 800279e:	2301      	movs	r3, #1
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
	return 0;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <_sbrk+0x5c>)
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <_sbrk+0x60>)
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <_sbrk+0x64>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <_sbrk+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f8:	f005 fa48 	bl	8007c8c <__errno>
 80027fc:	4603      	mov	r3, r0
 80027fe:	220c      	movs	r2, #12
 8002800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e009      	b.n	800281c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <_sbrk+0x64>)
 8002818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20020000 	.word	0x20020000
 8002828:	00000400 	.word	0x00000400
 800282c:	20000850 	.word	0x20000850
 8002830:	20005d80 	.word	0x20005d80

08002834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <SystemInit+0x20>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	4a05      	ldr	r2, [pc, #20]	; (8002854 <SystemInit+0x20>)
 8002840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <Task_DMA>:
extern uint8_t buffer_DMA_1[buffer_SIZE];
extern uint8_t buffer_DMA_2[buffer_SIZE];



void Task_DMA( void *pvParameters ){
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef res;
	uint32_t nbuff;



    hdma_usart2_rx2.Instance = DMA1_Stream7;
 8002860:	4b54      	ldr	r3, [pc, #336]	; (80029b4 <Task_DMA+0x15c>)
 8002862:	4a55      	ldr	r2, [pc, #340]	; (80029b8 <Task_DMA+0x160>)
 8002864:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx2.Init.Channel = DMA_CHANNEL_6;
 8002866:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <Task_DMA+0x15c>)
 8002868:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800286c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800286e:	4b51      	ldr	r3, [pc, #324]	; (80029b4 <Task_DMA+0x15c>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002874:	4b4f      	ldr	r3, [pc, #316]	; (80029b4 <Task_DMA+0x15c>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx2.Init.MemInc = DMA_MINC_ENABLE;
 800287a:	4b4e      	ldr	r3, [pc, #312]	; (80029b4 <Task_DMA+0x15c>)
 800287c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002880:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002882:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <Task_DMA+0x15c>)
 8002884:	2200      	movs	r2, #0
 8002886:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002888:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <Task_DMA+0x15c>)
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx2.Init.Mode = DMA_NORMAL;
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <Task_DMA+0x15c>)
 8002890:	2200      	movs	r2, #0
 8002892:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx2.Init.Priority = DMA_PRIORITY_LOW;
 8002894:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <Task_DMA+0x15c>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289a:	4b46      	ldr	r3, [pc, #280]	; (80029b4 <Task_DMA+0x15c>)
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	; 0x24



    if (HAL_DMA_Init(&hdma_usart2_rx2) != HAL_OK)
 80028a0:	4844      	ldr	r0, [pc, #272]	; (80029b4 <Task_DMA+0x15c>)
 80028a2:	f001 f80b 	bl	80038bc <HAL_DMA_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <Task_DMA+0x58>
    {
      Error_Handler();
 80028ac:	f7ff fdce 	bl	800244c <Error_Handler>
    }

	nbuff=0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
	res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE); // Para arrancar
 80028b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b8:	4940      	ldr	r1, [pc, #256]	; (80029bc <Task_DMA+0x164>)
 80028ba:	4841      	ldr	r0, [pc, #260]	; (80029c0 <Task_DMA+0x168>)
 80028bc:	f002 faf3 	bl	8004ea6 <HAL_UART_Receive_DMA>
 80028c0:	4603      	mov	r3, r0
 80028c2:	73fb      	strb	r3, [r7, #15]

	it=0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
	while(1){

		switch (nbuff){
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <Task_DMA+0x7e>
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d032      	beq.n	800293a <Task_DMA+0xe2>
 80028d4:	e066      	b.n	80029a4 <Task_DMA+0x14c>
		case 0: 	num=hdma_usart2_rx.Instance->NDTR;
 80028d6:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <Task_DMA+0x16c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60bb      	str	r3, [r7, #8]
					if (num<buffer_SIZE){
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e4:	d25b      	bcs.n	800299e <Task_DMA+0x146>
  __ASM volatile ("cpsid i" : : : "memory");
 80028e6:	b672      	cpsid	i
}
 80028e8:	bf00      	nop
						__disable_irq();
						res=HAL_UART_DMAStop_PAS(&huart2);
 80028ea:	4835      	ldr	r0, [pc, #212]	; (80029c0 <Task_DMA+0x168>)
 80028ec:	f000 fde4 	bl	80034b8 <HAL_UART_DMAStop_PAS>
 80028f0:	4603      	mov	r3, r0
 80028f2:	73fb      	strb	r3, [r7, #15]
					   __HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx2);
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <Task_DMA+0x168>)
 80028f6:	4a2f      	ldr	r2, [pc, #188]	; (80029b4 <Task_DMA+0x15c>)
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <Task_DMA+0x15c>)
 80028fc:	4a30      	ldr	r2, [pc, #192]	; (80029c0 <Task_DMA+0x168>)
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
					   res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_2,buffer_SIZE);
 8002900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002904:	4930      	ldr	r1, [pc, #192]	; (80029c8 <Task_DMA+0x170>)
 8002906:	482e      	ldr	r0, [pc, #184]	; (80029c0 <Task_DMA+0x168>)
 8002908:	f002 facd 	bl	8004ea6 <HAL_UART_Receive_DMA>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002910:	b662      	cpsie	i
}
 8002912:	bf00      	nop
					   __enable_irq();
					   nbuff=1;
 8002914:	2301      	movs	r3, #1
 8002916:	613b      	str	r3, [r7, #16]
					   num=hdma_usart2_rx.Instance->NDTR;
 8002918:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <Task_DMA+0x16c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60bb      	str	r3, [r7, #8]
					   res=buff->puts(buff_rx,buffer_DMA_1,buffer_SIZE-num);
 8002920:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <Task_DMA+0x174>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <Task_DMA+0x178>)
 8002928:	6810      	ldr	r0, [r2, #0]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8002930:	4922      	ldr	r1, [pc, #136]	; (80029bc <Task_DMA+0x164>)
 8002932:	4798      	blx	r3
 8002934:	4603      	mov	r3, r0
 8002936:	73fb      	strb	r3, [r7, #15]
					}else
						;

					break;
 8002938:	e031      	b.n	800299e <Task_DMA+0x146>
		case 1:
	    			num=hdma_usart2_rx2.Instance->NDTR;
 800293a:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <Task_DMA+0x15c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	60bb      	str	r3, [r7, #8]
	    			if (num<buffer_SIZE){
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002948:	d22b      	bcs.n	80029a2 <Task_DMA+0x14a>
  __ASM volatile ("cpsid i" : : : "memory");
 800294a:	b672      	cpsid	i
}
 800294c:	bf00      	nop
	    				__disable_irq();
	    				res=HAL_UART_DMAStop_PAS(&huart2);
 800294e:	481c      	ldr	r0, [pc, #112]	; (80029c0 <Task_DMA+0x168>)
 8002950:	f000 fdb2 	bl	80034b8 <HAL_UART_DMAStop_PAS>
 8002954:	4603      	mov	r3, r0
 8002956:	73fb      	strb	r3, [r7, #15]
	    				__HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx);
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <Task_DMA+0x168>)
 800295a:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <Task_DMA+0x16c>)
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <Task_DMA+0x16c>)
 8002960:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <Task_DMA+0x168>)
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
	    				res=HAL_UART_Receive_DMA(&huart2, buffer_DMA_1,buffer_SIZE);
 8002964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002968:	4914      	ldr	r1, [pc, #80]	; (80029bc <Task_DMA+0x164>)
 800296a:	4815      	ldr	r0, [pc, #84]	; (80029c0 <Task_DMA+0x168>)
 800296c:	f002 fa9b 	bl	8004ea6 <HAL_UART_Receive_DMA>
 8002970:	4603      	mov	r3, r0
 8002972:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002974:	b662      	cpsie	i
}
 8002976:	bf00      	nop
	    				__enable_irq();
	    				nbuff=0;
 8002978:	2300      	movs	r3, #0
 800297a:	613b      	str	r3, [r7, #16]
	    				num=hdma_usart2_rx2.Instance->NDTR;
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <Task_DMA+0x15c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	60bb      	str	r3, [r7, #8]
	    				res=buff->puts(buff_rx,buffer_DMA_2,buffer_SIZE-num);
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <Task_DMA+0x174>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <Task_DMA+0x178>)
 800298c:	6810      	ldr	r0, [r2, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8002994:	490c      	ldr	r1, [pc, #48]	; (80029c8 <Task_DMA+0x170>)
 8002996:	4798      	blx	r3
 8002998:	4603      	mov	r3, r0
 800299a:	73fb      	strb	r3, [r7, #15]
	    			}else
	    				;
	    			break;
 800299c:	e001      	b.n	80029a2 <Task_DMA+0x14a>
					break;
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <Task_DMA+0x14c>
	    			break;
 80029a2:	bf00      	nop
		}

		it++;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3301      	adds	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
		vTaskDelay(1/portTICK_RATE_MS );
 80029aa:	2001      	movs	r0, #1
 80029ac:	f003 ff20 	bl	80067f0 <vTaskDelay>
		switch (nbuff){
 80029b0:	e78a      	b.n	80028c8 <Task_DMA+0x70>
 80029b2:	bf00      	nop
 80029b4:	200007f0 	.word	0x200007f0
 80029b8:	400260b8 	.word	0x400260b8
 80029bc:	20001c14 	.word	0x20001c14
 80029c0:	200006e8 	.word	0x200006e8
 80029c4:	2000078c 	.word	0x2000078c
 80029c8:	20001e14 	.word	0x20001e14
 80029cc:	20001c0c 	.word	0x20001c0c
 80029d0:	20001c10 	.word	0x20001c10

080029d4 <Task_Display>:
	}
}


void Task_Display( void *pvParameters ){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

	uint32_t it;
	BUFF_ITEM_t car;
	HAL_StatusTypeDef res;

    it=0;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
	while(1){

		buff->get(buff,&car);
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <Task_Display+0x38>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <Task_Display+0x38>)
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	f107 010a 	add.w	r1, r7, #10
 80029ee:	4610      	mov	r0, r2
 80029f0:	4798      	blx	r3
		res=HAL_UART_Transmit(& huart2,&car,1,100);
 80029f2:	f107 010a 	add.w	r1, r7, #10
 80029f6:	2364      	movs	r3, #100	; 0x64
 80029f8:	2201      	movs	r2, #1
 80029fa:	4805      	ldr	r0, [pc, #20]	; (8002a10 <Task_Display+0x3c>)
 80029fc:	f002 f9c1 	bl	8004d82 <HAL_UART_Transmit>
 8002a00:	4603      	mov	r3, r0
 8002a02:	72fb      	strb	r3, [r7, #11]
		it++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]
		buff->get(buff,&car);
 8002a0a:	e7e9      	b.n	80029e0 <Task_Display+0xc>
 8002a0c:	20001c0c 	.word	0x20001c0c
 8002a10:	200006e8 	.word	0x200006e8

08002a14 <serie_Init_FreeRTOS>:


extern BUFF_BUFFER_t * buff;
extern BUFF_BUFFER_t * buff_rx;

void serie_Init_FreeRTOS(void){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af02      	add	r7, sp, #8

	BaseType_t res_task;

	printf (PASCU_PRJ " at "__TIME__);
 8002a1a:	4844      	ldr	r0, [pc, #272]	; (8002b2c <serie_Init_FreeRTOS+0x118>)
 8002a1c:	f005 fc34 	bl	8008288 <iprintf>
	fflush(0);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f005 f9fb 	bl	8007e1c <fflush>

	buff=bufferCreat(128);
 8002a26:	2080      	movs	r0, #128	; 0x80
 8002a28:	f000 fbfe 	bl	8003228 <bufferCreat>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4a40      	ldr	r2, [pc, #256]	; (8002b30 <serie_Init_FreeRTOS+0x11c>)
 8002a30:	6013      	str	r3, [r2, #0]
	if (!buff) return;
 8002a32:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <serie_Init_FreeRTOS+0x11c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d072      	beq.n	8002b20 <serie_Init_FreeRTOS+0x10c>

	buff_rx=bufferCreat(512);
 8002a3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a3e:	f000 fbf3 	bl	8003228 <bufferCreat>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4a3b      	ldr	r2, [pc, #236]	; (8002b34 <serie_Init_FreeRTOS+0x120>)
 8002a46:	6013      	str	r3, [r2, #0]
	if (!buff_rx) return;
 8002a48:	4b3a      	ldr	r3, [pc, #232]	; (8002b34 <serie_Init_FreeRTOS+0x120>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d069      	beq.n	8002b24 <serie_Init_FreeRTOS+0x110>

	res_task=xTaskCreate(Task_Display,"DISPLAY",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f000 fc43 	bl	80032dc <makeFreeRtosPriority>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	9200      	str	r2, [sp, #0]
 8002a60:	2300      	movs	r3, #0
 8002a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a66:	4934      	ldr	r1, [pc, #208]	; (8002b38 <serie_Init_FreeRTOS+0x124>)
 8002a68:	4834      	ldr	r0, [pc, #208]	; (8002b3c <serie_Init_FreeRTOS+0x128>)
 8002a6a:	f003 fd8a 	bl	8006582 <xTaskCreate>
 8002a6e:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d006      	beq.n	8002a84 <serie_Init_FreeRTOS+0x70>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002a76:	4832      	ldr	r0, [pc, #200]	; (8002b40 <serie_Init_FreeRTOS+0x12c>)
 8002a78:	f005 fc8c 	bl	8008394 <puts>
			fflush(NULL);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f005 f9cd 	bl	8007e1c <fflush>
			while(1);
 8002a82:	e7fe      	b.n	8002a82 <serie_Init_FreeRTOS+0x6e>
	}

	res_task=xTaskCreate(Task_DMA,"DMA",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f000 fc29 	bl	80032dc <makeFreeRtosPriority>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	9200      	str	r2, [sp, #0]
 8002a94:	2300      	movs	r3, #0
 8002a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9a:	492a      	ldr	r1, [pc, #168]	; (8002b44 <serie_Init_FreeRTOS+0x130>)
 8002a9c:	482a      	ldr	r0, [pc, #168]	; (8002b48 <serie_Init_FreeRTOS+0x134>)
 8002a9e:	f003 fd70 	bl	8006582 <xTaskCreate>
 8002aa2:	6078      	str	r0, [r7, #4]
		if( res_task != pdPASS ){
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d006      	beq.n	8002ab8 <serie_Init_FreeRTOS+0xa4>
				printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002aaa:	4825      	ldr	r0, [pc, #148]	; (8002b40 <serie_Init_FreeRTOS+0x12c>)
 8002aac:	f005 fc72 	bl	8008394 <puts>
				fflush(NULL);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f005 f9b3 	bl	8007e1c <fflush>
				while(1);
 8002ab6:	e7fe      	b.n	8002ab6 <serie_Init_FreeRTOS+0xa2>
		}

	res_task=xTaskCreate(Task_Send,"ENVIO",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f000 fc0f 	bl	80032dc <makeFreeRtosPriority>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	9200      	str	r2, [sp, #0]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ace:	491f      	ldr	r1, [pc, #124]	; (8002b4c <serie_Init_FreeRTOS+0x138>)
 8002ad0:	481f      	ldr	r0, [pc, #124]	; (8002b50 <serie_Init_FreeRTOS+0x13c>)
 8002ad2:	f003 fd56 	bl	8006582 <xTaskCreate>
 8002ad6:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d006      	beq.n	8002aec <serie_Init_FreeRTOS+0xd8>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002ade:	4818      	ldr	r0, [pc, #96]	; (8002b40 <serie_Init_FreeRTOS+0x12c>)
 8002ae0:	f005 fc58 	bl	8008394 <puts>
			fflush(NULL);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f005 f999 	bl	8007e1c <fflush>
			while(1);
 8002aea:	e7fe      	b.n	8002aea <serie_Init_FreeRTOS+0xd6>
	}

	res_task=xTaskCreate(Task_Receive,"RECEIVE",512,NULL,	makeFreeRtosPriority(osPriorityNormal),NULL);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f000 fbf5 	bl	80032dc <makeFreeRtosPriority>
 8002af2:	4603      	mov	r3, r0
 8002af4:	461a      	mov	r2, r3
 8002af6:	2300      	movs	r3, #0
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	9200      	str	r2, [sp, #0]
 8002afc:	2300      	movs	r3, #0
 8002afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b02:	4914      	ldr	r1, [pc, #80]	; (8002b54 <serie_Init_FreeRTOS+0x140>)
 8002b04:	4814      	ldr	r0, [pc, #80]	; (8002b58 <serie_Init_FreeRTOS+0x144>)
 8002b06:	f003 fd3c 	bl	8006582 <xTaskCreate>
 8002b0a:	6078      	str	r0, [r7, #4]
	if( res_task != pdPASS ){
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d009      	beq.n	8002b26 <serie_Init_FreeRTOS+0x112>
			printf("PANIC: Error al crear Tarea Visualizador\r\n");
 8002b12:	480b      	ldr	r0, [pc, #44]	; (8002b40 <serie_Init_FreeRTOS+0x12c>)
 8002b14:	f005 fc3e 	bl	8008394 <puts>
			fflush(NULL);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f005 f97f 	bl	8007e1c <fflush>
			while(1);
 8002b1e:	e7fe      	b.n	8002b1e <serie_Init_FreeRTOS+0x10a>
	if (!buff) return;
 8002b20:	bf00      	nop
 8002b22:	e000      	b.n	8002b26 <serie_Init_FreeRTOS+0x112>
	if (!buff_rx) return;
 8002b24:	bf00      	nop
	}
}
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	0800b00c 	.word	0x0800b00c
 8002b30:	20001c0c 	.word	0x20001c0c
 8002b34:	20001c10 	.word	0x20001c10
 8002b38:	0800b034 	.word	0x0800b034
 8002b3c:	080029d5 	.word	0x080029d5
 8002b40:	0800b03c 	.word	0x0800b03c
 8002b44:	0800b068 	.word	0x0800b068
 8002b48:	08002859 	.word	0x08002859
 8002b4c:	0800b06c 	.word	0x0800b06c
 8002b50:	08002e91 	.word	0x08002e91
 8002b54:	0800b074 	.word	0x0800b074
 8002b58:	08002ec1 	.word	0x08002ec1

08002b5c <funcion_conf>:

char candenafinal[2000];
int funcion_conf(char * cadena,int len,int  osDelay_, int  osDelay_2){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
	int vuelta=1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	61bb      	str	r3, [r7, #24]
	uint32_t res;
	res=HAL_UART_Transmit(UART_ESP_AT_WIFI,cadena,len,1000);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	481b      	ldr	r0, [pc, #108]	; (8002be8 <funcion_conf+0x8c>)
 8002b7a:	f002 f902 	bl	8004d82 <HAL_UART_Transmit>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 8002b82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b86:	4919      	ldr	r1, [pc, #100]	; (8002bec <funcion_conf+0x90>)
 8002b88:	4817      	ldr	r0, [pc, #92]	; (8002be8 <funcion_conf+0x8c>)
 8002b8a:	f002 f98c 	bl	8004ea6 <HAL_UART_Receive_DMA>
	osDelay(osDelay_);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 ffd0 	bl	8005b36 <osDelay>
	HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8002b96:	4814      	ldr	r0, [pc, #80]	; (8002be8 <funcion_conf+0x8c>)
 8002b98:	f002 f9b5 	bl	8004f06 <HAL_UART_DMAStop>
	int buffer_ct1=buffer_DMA_size - HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8002b9c:	4812      	ldr	r0, [pc, #72]	; (8002be8 <funcion_conf+0x8c>)
 8002b9e:	f000 fcd0 	bl	8003542 <HAL_DMA_getcounter>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002ba8:	613b      	str	r3, [r7, #16]
	int buffer_ct=0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
	while (buffer_ct<buffer_ct1)
 8002bae:	e00d      	b.n	8002bcc <funcion_conf+0x70>
		res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <funcion_conf+0x94>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <funcion_conf+0x94>)
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	1c59      	adds	r1, r3, #1
 8002bbe:	61f9      	str	r1, [r7, #28]
 8002bc0:	490a      	ldr	r1, [pc, #40]	; (8002bec <funcion_conf+0x90>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4790      	blx	r2
 8002bc8:	4603      	mov	r3, r0
 8002bca:	617b      	str	r3, [r7, #20]
	while (buffer_ct<buffer_ct1)
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	dbed      	blt.n	8002bb0 <funcion_conf+0x54>
	osDelay(osDelay_2);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 ffad 	bl	8005b36 <osDelay>

	return vuelta;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200006a4 	.word	0x200006a4
 8002bec:	20000854 	.word	0x20000854
 8002bf0:	20001c0c 	.word	0x20001c0c

08002bf4 <postfunc>:
			strftime(hora2,100,"%Y-%Om-%d %H:%M:%S\r\n",&hora);
			res=buff->puts(buff,(BUFF_ITEM_t *)hora2,strlen(hora2));
			vTaskDelay(2000/portTICK_RATE_MS );
		}
}
void postfunc(char * nombreMaquina,char * ssid, char * passwd, char * puerto){
 8002bf4:	b5b0      	push	{r4, r5, r7, lr}
 8002bf6:	b0ae      	sub	sp, #184	; 0xb8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
	uint32_t res;
	char cad[]="AT+CWJAP=\"%s\",\"%s\"\r\n";
 8002c02:	4b92      	ldr	r3, [pc, #584]	; (8002e4c <postfunc+0x258>)
 8002c04:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8002c08:	461d      	mov	r5, r3
 8002c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c12:	6020      	str	r0, [r4, #0]
 8002c14:	3404      	adds	r4, #4
 8002c16:	7021      	strb	r1, [r4, #0]
	char cad1[]="AT+CWMODE=1\r\n";
 8002c18:	4b8d      	ldr	r3, [pc, #564]	; (8002e50 <postfunc+0x25c>)
 8002c1a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8002c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c20:	c407      	stmia	r4!, {r0, r1, r2}
 8002c22:	8023      	strh	r3, [r4, #0]
	char cad2[]="AT+CIFSR\r\n";
 8002c24:	4a8b      	ldr	r2, [pc, #556]	; (8002e54 <postfunc+0x260>)
 8002c26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c2c:	c303      	stmia	r3!, {r0, r1}
 8002c2e:	801a      	strh	r2, [r3, #0]
 8002c30:	3302      	adds	r3, #2
 8002c32:	0c12      	lsrs	r2, r2, #16
 8002c34:	701a      	strb	r2, [r3, #0]
	char cad3[]="AT+CIPSTART=\"TCP\",\"%s\",%s\r\n";
 8002c36:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <postfunc+0x264>)
 8002c38:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002c3c:	461d      	mov	r5, r3
 8002c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sprintf(candenafinal,cad3,nombreMaquina,puerto);
 8002c4a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4882      	ldr	r0, [pc, #520]	; (8002e5c <postfunc+0x268>)
 8002c54:	f005 fbbe 	bl	80083d4 <siprintf>
	int r = funcion_conf(cad1,strlen(cad1),2000,1);
 8002c58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fac9 	bl	80001f4 <strlen>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4619      	mov	r1, r3
 8002c66:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002c70:	f7ff ff74 	bl	8002b5c <funcion_conf>
 8002c74:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	sprintf(candenafinal,cad,ssid,passwd);
 8002c78:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	4876      	ldr	r0, [pc, #472]	; (8002e5c <postfunc+0x268>)
 8002c82:	f005 fba7 	bl	80083d4 <siprintf>
	int r2 = funcion_conf(candenafinal,strlen(candenafinal),2000,1);
 8002c86:	4875      	ldr	r0, [pc, #468]	; (8002e5c <postfunc+0x268>)
 8002c88:	f7fd fab4 	bl	80001f4 <strlen>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4619      	mov	r1, r3
 8002c90:	2301      	movs	r3, #1
 8002c92:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002c96:	4871      	ldr	r0, [pc, #452]	; (8002e5c <postfunc+0x268>)
 8002c98:	f7ff ff60 	bl	8002b5c <funcion_conf>
 8002c9c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	int r3 = funcion_conf(cad2,strlen(cad2),2000,1);
 8002ca0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd faa5 	bl	80001f4 <strlen>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4619      	mov	r1, r3
 8002cae:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002cb8:	f7ff ff50 	bl	8002b5c <funcion_conf>
 8002cbc:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	sprintf(candenafinal,cad3,nombreMaquina,puerto);
 8002cc0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4864      	ldr	r0, [pc, #400]	; (8002e5c <postfunc+0x268>)
 8002cca:	f005 fb83 	bl	80083d4 <siprintf>
	int r4 = funcion_conf(candenafinal,strlen(candenafinal),500,1000);
 8002cce:	4863      	ldr	r0, [pc, #396]	; (8002e5c <postfunc+0x268>)
 8002cd0:	f7fd fa90 	bl	80001f4 <strlen>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cdc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ce0:	485e      	ldr	r0, [pc, #376]	; (8002e5c <postfunc+0x268>)
 8002ce2:	f7ff ff3b 	bl	8002b5c <funcion_conf>
 8002ce6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

		//***post***
		//sprintf(candenafinal,post_temp,strlen(body),&body);
		sprintf(candenafinal,post_temp_apli,strlen(body_update),&body_update);
 8002cea:	485d      	ldr	r0, [pc, #372]	; (8002e60 <postfunc+0x26c>)
 8002cec:	f7fd fa82 	bl	80001f4 <strlen>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b5b      	ldr	r3, [pc, #364]	; (8002e60 <postfunc+0x26c>)
 8002cf4:	495b      	ldr	r1, [pc, #364]	; (8002e64 <postfunc+0x270>)
 8002cf6:	4859      	ldr	r0, [pc, #356]	; (8002e5c <postfunc+0x268>)
 8002cf8:	f005 fb6c 	bl	80083d4 <siprintf>
		char cad4[]="AT+CIPSEND=%d\r\n";
 8002cfc:	4b5a      	ldr	r3, [pc, #360]	; (8002e68 <postfunc+0x274>)
 8002cfe:	f107 0414 	add.w	r4, r7, #20
 8002d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		sprintf(cadenafinalv2,cad4,strlen(candenafinal));/*
 8002d08:	4854      	ldr	r0, [pc, #336]	; (8002e5c <postfunc+0x268>)
 8002d0a:	f7fd fa73 	bl	80001f4 <strlen>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4619      	mov	r1, r3
 8002d16:	4855      	ldr	r0, [pc, #340]	; (8002e6c <postfunc+0x278>)
 8002d18:	f005 fb5c 	bl	80083d4 <siprintf>
		printf("*********************\r\n");
		printf(candenafinal);
		printf("\r\n*********************\r\n");*/

		int r5 = funcion_conf(cadenafinalv2,strlen(cadenafinalv2),500,20);//send=de bytes
 8002d1c:	4853      	ldr	r0, [pc, #332]	; (8002e6c <postfunc+0x278>)
 8002d1e:	f7fd fa69 	bl	80001f4 <strlen>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4619      	mov	r1, r3
 8002d26:	2314      	movs	r3, #20
 8002d28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d2c:	484f      	ldr	r0, [pc, #316]	; (8002e6c <postfunc+0x278>)
 8002d2e:	f7ff ff15 	bl	8002b5c <funcion_conf>
 8002d32:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		int r6 = funcion_conf(candenafinal,strlen(candenafinal),500,20);//json peticion
 8002d36:	4849      	ldr	r0, [pc, #292]	; (8002e5c <postfunc+0x268>)
 8002d38:	f7fd fa5c 	bl	80001f4 <strlen>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4619      	mov	r1, r3
 8002d40:	2314      	movs	r3, #20
 8002d42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d46:	4845      	ldr	r0, [pc, #276]	; (8002e5c <postfunc+0x268>)
 8002d48:	f7ff ff08 	bl	8002b5c <funcion_conf>
 8002d4c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

		sprintf(candenafinal,post_temp,strlen(body),&body);
 8002d50:	4847      	ldr	r0, [pc, #284]	; (8002e70 <postfunc+0x27c>)
 8002d52:	f7fd fa4f 	bl	80001f4 <strlen>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b45      	ldr	r3, [pc, #276]	; (8002e70 <postfunc+0x27c>)
 8002d5a:	4946      	ldr	r1, [pc, #280]	; (8002e74 <postfunc+0x280>)
 8002d5c:	483f      	ldr	r0, [pc, #252]	; (8002e5c <postfunc+0x268>)
 8002d5e:	f005 fb39 	bl	80083d4 <siprintf>
		sprintf(cadenafinalv2,cad4,strlen(candenafinal));
 8002d62:	483e      	ldr	r0, [pc, #248]	; (8002e5c <postfunc+0x268>)
 8002d64:	f7fd fa46 	bl	80001f4 <strlen>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	4619      	mov	r1, r3
 8002d70:	483e      	ldr	r0, [pc, #248]	; (8002e6c <postfunc+0x278>)
 8002d72:	f005 fb2f 	bl	80083d4 <siprintf>
		int r7 = funcion_conf(cadenafinalv2,strlen(cadenafinalv2),1000,2000);
 8002d76:	483d      	ldr	r0, [pc, #244]	; (8002e6c <postfunc+0x278>)
 8002d78:	f7fd fa3c 	bl	80001f4 <strlen>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d88:	4838      	ldr	r0, [pc, #224]	; (8002e6c <postfunc+0x278>)
 8002d8a:	f7ff fee7 	bl	8002b5c <funcion_conf>
 8002d8e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

		/*printf("*********************\r\n");
		printf(candenafinal);
		printf("\r\n*********************\r\n");*/
		int r8 = funcion_conf(candenafinal,strlen(candenafinal),1000,2000);
 8002d92:	4832      	ldr	r0, [pc, #200]	; (8002e5c <postfunc+0x268>)
 8002d94:	f7fd fa2e 	bl	80001f4 <strlen>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002da4:	482d      	ldr	r0, [pc, #180]	; (8002e5c <postfunc+0x268>)
 8002da6:	f7ff fed9 	bl	8002b5c <funcion_conf>
 8002daa:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98




		//tratado del json
		char *jsonp=strstr(buffer_DMA,"{");
 8002dae:	217b      	movs	r1, #123	; 0x7b
 8002db0:	4831      	ldr	r0, [pc, #196]	; (8002e78 <postfunc+0x284>)
 8002db2:	f005 fb72 	bl	800849a <strchr>
 8002db6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		jsonp[strlen(jsonp)-2]='\0';
 8002dba:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002dbe:	f7fd fa19 	bl	80001f4 <strlen>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	3b02      	subs	r3, #2
 8002dc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dca:	4413      	add	r3, r2
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
		cJSON *contextResponses=cJSON_Parse(jsonp);
 8002dd0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002dd4:	f7fe fe40 	bl	8001a58 <cJSON_Parse>
 8002dd8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		cJSON * contextEl = cJSON_GetObjectItemCaseSensitive(contextResponses,"contextResponses");
 8002ddc:	4927      	ldr	r1, [pc, #156]	; (8002e7c <postfunc+0x288>)
 8002dde:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002de2:	f7ff f975 	bl	80020d0 <cJSON_GetObjectItemCaseSensitive>
 8002de6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		cJSON * array1 = cJSON_GetArrayItem(contextEl,0);
 8002dea:	2100      	movs	r1, #0
 8002dec:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002df0:	f7ff f912 	bl	8002018 <cJSON_GetArrayItem>
 8002df4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		cJSON * contextElement = cJSON_GetObjectItemCaseSensitive(array1,"contextElement");
 8002df8:	4921      	ldr	r1, [pc, #132]	; (8002e80 <postfunc+0x28c>)
 8002dfa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002dfe:	f7ff f967 	bl	80020d0 <cJSON_GetObjectItemCaseSensitive>
 8002e02:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		cJSON * atributes = cJSON_GetObjectItemCaseSensitive(contextElement,"attributes");
 8002e06:	491f      	ldr	r1, [pc, #124]	; (8002e84 <postfunc+0x290>)
 8002e08:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002e0c:	f7ff f960 	bl	80020d0 <cJSON_GetObjectItemCaseSensitive>
 8002e10:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		cJSON * atributo =  cJSON_GetArrayItem(atributes,0);
 8002e14:	2100      	movs	r1, #0
 8002e16:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002e1a:	f7ff f8fd 	bl	8002018 <cJSON_GetArrayItem>
 8002e1e:	67f8      	str	r0, [r7, #124]	; 0x7c
		cJSON * values = cJSON_GetObjectItemCaseSensitive(atributo,"value");
 8002e20:	4919      	ldr	r1, [pc, #100]	; (8002e88 <postfunc+0x294>)
 8002e22:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002e24:	f7ff f954 	bl	80020d0 <cJSON_GetObjectItemCaseSensitive>
 8002e28:	67b8      	str	r0, [r7, #120]	; 0x78
		char* leds= values->valuestring;
 8002e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	677b      	str	r3, [r7, #116]	; 0x74
		printf("\r\n*********************\r\n");
 8002e30:	4816      	ldr	r0, [pc, #88]	; (8002e8c <postfunc+0x298>)
 8002e32:	f005 faaf 	bl	8008394 <puts>
		printf(leds);
 8002e36:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002e38:	f005 fa26 	bl	8008288 <iprintf>
		printf("\r\n*********************\r\n");
 8002e3c:	4813      	ldr	r0, [pc, #76]	; (8002e8c <postfunc+0x298>)
 8002e3e:	f005 faa9 	bl	8008394 <puts>
}
 8002e42:	bf00      	nop
 8002e44:	37b8      	adds	r7, #184	; 0xb8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bdb0      	pop	{r4, r5, r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	0800b0b8 	.word	0x0800b0b8
 8002e50:	0800b0d0 	.word	0x0800b0d0
 8002e54:	0800b0e0 	.word	0x0800b0e0
 8002e58:	0800b0ec 	.word	0x0800b0ec
 8002e5c:	2000143c 	.word	0x2000143c
 8002e60:	20000190 	.word	0x20000190
 8002e64:	200000a8 	.word	0x200000a8
 8002e68:	0800b108 	.word	0x0800b108
 8002e6c:	20001054 	.word	0x20001054
 8002e70:	20000140 	.word	0x20000140
 8002e74:	20000010 	.word	0x20000010
 8002e78:	20000854 	.word	0x20000854
 8002e7c:	0800b168 	.word	0x0800b168
 8002e80:	0800b17c 	.word	0x0800b17c
 8002e84:	0800b18c 	.word	0x0800b18c
 8002e88:	0800b198 	.word	0x0800b198
 8002e8c:	0800b1a0 	.word	0x0800b1a0

08002e90 <Task_Send>:


void Task_Send( void *pvParameters ){
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b09c      	sub	sp, #112	; 0x70
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

	uint32_t it;
    uint32_t res;

	char cad[100];
	it=0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
	//boot_wifi("OPPOReno2","ilovematy");
	//entregable("worldclockapi.com","OPPOReno2","ilovematy","80");
	//postfunc("pperez-seu-or.disca.upv.es","routerSEU","00000000","10000");
	postfunc("imaginye.ddns.net","OPPOReno2","ilovematy","1026");/*
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <Task_Send+0x20>)
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <Task_Send+0x24>)
 8002ea0:	4905      	ldr	r1, [pc, #20]	; (8002eb8 <Task_Send+0x28>)
 8002ea2:	4806      	ldr	r0, [pc, #24]	; (8002ebc <Task_Send+0x2c>)
 8002ea4:	f7ff fea6 	bl	8002bf4 <postfunc>
		sprintf(cad,"IT %d\r\n",(int)it);
		res=buff->puts(buff,(BUFF_ITEM_t *)cad,strlen(cad));
		vTaskDelay(10000/portTICK_RATE_MS );

	}*/
}
 8002ea8:	bf00      	nop
 8002eaa:	3770      	adds	r7, #112	; 0x70
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	0800b1bc 	.word	0x0800b1bc
 8002eb4:	0800b1c4 	.word	0x0800b1c4
 8002eb8:	0800b1d0 	.word	0x0800b1d0
 8002ebc:	0800b1dc 	.word	0x0800b1dc

08002ec0 <Task_Receive>:

void Task_Receive( void *pvParameters ){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b0a8      	sub	sp, #160	; 0xa0
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
#define buffer_length	128
    BUFF_ITEM_t  buffer[buffer_length];
    int buffer_ct,buffer_ct1;
    int crln_detect;

	it=0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


	while(1){
		it++;
 8002ece:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		crln_detect=0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		buffer_ct=0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		while(crln_detect<2){
 8002ee4:	e037      	b.n	8002f56 <Task_Receive+0x96>
	    	res=buff->get(buff_rx,&car);
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <Task_Receive+0x11c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3c      	ldr	r2, [pc, #240]	; (8002fe0 <Task_Receive+0x120>)
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	f107 018b 	add.w	r1, r7, #139	; 0x8b
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4798      	blx	r3
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	    	buffer[buffer_ct++]=car;
 8002efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002f08:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 8002f0c:	33a0      	adds	r3, #160	; 0xa0
 8002f0e:	443b      	add	r3, r7
 8002f10:	f803 2c98 	strb.w	r2, [r3, #-152]
	    	if (buffer_ct>1){
 8002f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	dd1c      	ble.n	8002f56 <Task_Receive+0x96>

	    		if ((buffer[buffer_ct-2]=='\r')&&(buffer[buffer_ct-1]=='\n')) // \r\n detection end of line
 8002f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f20:	3b02      	subs	r3, #2
 8002f22:	33a0      	adds	r3, #160	; 0xa0
 8002f24:	443b      	add	r3, r7
 8002f26:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8002f2a:	2b0d      	cmp	r3, #13
 8002f2c:	d10c      	bne.n	8002f48 <Task_Receive+0x88>
 8002f2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f32:	3b01      	subs	r3, #1
 8002f34:	33a0      	adds	r3, #160	; 0xa0
 8002f36:	443b      	add	r3, r7
 8002f38:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8002f3c:	2b0a      	cmp	r3, #10
 8002f3e:	d103      	bne.n	8002f48 <Task_Receive+0x88>
					crln_detect=2;
 8002f40:	2302      	movs	r3, #2
 8002f42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f46:	e006      	b.n	8002f56 <Task_Receive+0x96>
				else
					if ((buffer_ct)==buffer_length)  // line out of limits --> error
 8002f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f4c:	2b80      	cmp	r3, #128	; 0x80
 8002f4e:	d102      	bne.n	8002f56 <Task_Receive+0x96>
						crln_detect=3;
 8002f50:	2303      	movs	r3, #3
 8002f52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		while(crln_detect<2){
 8002f56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	ddc3      	ble.n	8002ee6 <Task_Receive+0x26>
	    	}

		}

		// prepare reception buffer from ESP
		HAL_UART_Receive_DMA(UART_ESP_AT_WIFI, buffer_DMA,buffer_DMA_size);
 8002f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f62:	4920      	ldr	r1, [pc, #128]	; (8002fe4 <Task_Receive+0x124>)
 8002f64:	4820      	ldr	r0, [pc, #128]	; (8002fe8 <Task_Receive+0x128>)
 8002f66:	f001 ff9e 	bl	8004ea6 <HAL_UART_Receive_DMA>
		// send line (command) to ESP
		res=HAL_UART_Transmit(UART_ESP_AT_WIFI,buffer,buffer_ct,1000);
 8002f6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	f107 0108 	add.w	r1, r7, #8
 8002f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f78:	481b      	ldr	r0, [pc, #108]	; (8002fe8 <Task_Receive+0x128>)
 8002f7a:	f001 ff02 	bl	8004d82 <HAL_UART_Transmit>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		// wait a bit time
		osDelay(500);
 8002f84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f88:	f002 fdd5 	bl	8005b36 <osDelay>
		//stop reception probably all data are in dma buffer
		HAL_UART_DMAStop(UART_ESP_AT_WIFI);
 8002f8c:	4816      	ldr	r0, [pc, #88]	; (8002fe8 <Task_Receive+0x128>)
 8002f8e:	f001 ffba 	bl	8004f06 <HAL_UART_DMAStop>

		// send to console ESP answer.
		buffer_ct1=HAL_DMA_getcounter(UART_ESP_AT_WIFI);
 8002f92:	4815      	ldr	r0, [pc, #84]	; (8002fe8 <Task_Receive+0x128>)
 8002f94:	f000 fad5 	bl	8003542 <HAL_DMA_getcounter>
 8002f98:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		buffer_ct=0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		while (buffer_ct<buffer_ct1)
 8002fa2:	e010      	b.n	8002fc6 <Task_Receive+0x106>
			res=buff->put(buff,buffer_DMA[buffer_ct++]);
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <Task_Receive+0x11c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <Task_Receive+0x11c>)
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fb2:	1c59      	adds	r1, r3, #1
 8002fb4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8002fb8:	490a      	ldr	r1, [pc, #40]	; (8002fe4 <Task_Receive+0x124>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4790      	blx	r2
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		while (buffer_ct<buffer_ct1)
 8002fc6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	dbe8      	blt.n	8002fa4 <Task_Receive+0xe4>
		// wait a bit time
		osDelay(1);
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f002 fdaf 	bl	8005b36 <osDelay>
	while(1){
 8002fd8:	e779      	b.n	8002ece <Task_Receive+0xe>
 8002fda:	bf00      	nop
 8002fdc:	20001c0c 	.word	0x20001c0c
 8002fe0:	20001c10 	.word	0x20001c10
 8002fe4:	20000854 	.word	0x20000854
 8002fe8:	200006a4 	.word	0x200006a4

08002fec <BUFF_is_empty>:
#include <task.h>
#include <math.h>

/////////////////////////////////////////////////////////////////////////////////////// BUFFER sin proteccion

uint32_t BUFF_is_empty(BUFF_BUFFER_t * buffer){
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==0);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <BUFF_is_full>:

uint32_t BUFF_is_full(BUFF_BUFFER_t * buffer){
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
	return (buffer->n_elem==buffer->size);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	429a      	cmp	r2, r3
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <BUFF_inserta>:

uint32_t BUFF_inserta(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item){
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]

	if (!buffer->isfull(buffer)){
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d119      	bne.n	8003082 <BUFF_inserta+0x4e>
		buffer->buff[buffer->cabeza]=item;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	4413      	add	r3, r2
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	701a      	strb	r2, [r3, #0]
		buffer->cabeza=((buffer->cabeza)+1)%(buffer->size);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	3301      	adds	r3, #1
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6a12      	ldr	r2, [r2, #32]
 8003066:	fbb3 f1f2 	udiv	r1, r3, r2
 800306a:	fb01 f202 	mul.w	r2, r1, r2
 800306e:	1a9a      	subs	r2, r3, r2
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	619a      	str	r2, [r3, #24]
		buffer->n_elem++;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	629a      	str	r2, [r3, #40]	; 0x28
		return 1;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <BUFF_inserta+0x50>
	} else return 0;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <BUFF_extrae>:

uint32_t BUFF_extrae(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item){
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]

	if (!buffer->isempty(buffer)){
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d11a      	bne.n	80030da <BUFF_extrae+0x4e>
			*item=buffer->buff[buffer->cola];
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	4413      	add	r3, r2
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	701a      	strb	r2, [r3, #0]
			buffer->cola=(buffer->cola+1)%(buffer->size);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	3301      	adds	r3, #1
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6a12      	ldr	r2, [r2, #32]
 80030be:	fbb3 f1f2 	udiv	r1, r3, r2
 80030c2:	fb01 f202 	mul.w	r2, r1, r2
 80030c6:	1a9a      	subs	r2, r3, r2
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	61da      	str	r2, [r3, #28]
			buffer->n_elem--;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	1e5a      	subs	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28

	} else return 0;

   return 1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <BUFF_extrae+0x50>
	} else return 0;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <BUFF_extrae_prot>:

uint32_t BUFF_extrae_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t *item)
{ //variable condicion
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
	int it;

	it=0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 80030f2:	bf00      	nop
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f242 7110 	movw	r1, #10000	; 0x2710
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 ffd5 	bl	80060ac <xQueueSemaphoreTake>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	d1f5      	bne.n	80030f4 <BUFF_extrae_prot+0x10>
	 // lock
	while(!BUFF_extrae(buffer,item)){
 8003108:	e017      	b.n	800313a <BUFF_extrae_prot+0x56>
			 xSemaphoreGive(buffer->xSem);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6958      	ldr	r0, [r3, #20]
 800310e:	2300      	movs	r3, #0
 8003110:	2200      	movs	r2, #0
 8003112:	2100      	movs	r1, #0
 8003114:	f002 fecc 	bl	8005eb0 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8003118:	2064      	movs	r0, #100	; 0x64
 800311a:	f003 fb69 	bl	80067f0 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800311e:	bf00      	nop
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f242 7110 	movw	r1, #10000	; 0x2710
 8003128:	4618      	mov	r0, r3
 800312a:	f002 ffbf 	bl	80060ac <xQueueSemaphoreTake>
 800312e:	4603      	mov	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d1f5      	bne.n	8003120 <BUFF_extrae_prot+0x3c>
	 		 it++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3301      	adds	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
	while(!BUFF_extrae(buffer,item)){
 800313a:	6839      	ldr	r1, [r7, #0]
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ffa5 	bl	800308c <BUFF_extrae>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0e0      	beq.n	800310a <BUFF_extrae_prot+0x26>
	}
	xSemaphoreGive(buffer->xSem);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6958      	ldr	r0, [r3, #20]
 800314c:	2300      	movs	r3, #0
 800314e:	2200      	movs	r2, #0
 8003150:	2100      	movs	r1, #0
 8003152:	f002 fead 	bl	8005eb0 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 8003156:	2301      	movs	r3, #1
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <BUFF_inserta_prot>:
uint32_t BUFF_inserta_prot(BUFF_BUFFER_t * buffer,BUFF_ITEM_t item)
{ //variable condicion
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	70fb      	strb	r3, [r7, #3]
	int it;

	it=0;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
	while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 8003170:	bf00      	nop
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f242 7110 	movw	r1, #10000	; 0x2710
 800317a:	4618      	mov	r0, r3
 800317c:	f002 ff96 	bl	80060ac <xQueueSemaphoreTake>
 8003180:	4603      	mov	r3, r0
 8003182:	2b01      	cmp	r3, #1
 8003184:	d1f5      	bne.n	8003172 <BUFF_inserta_prot+0x12>
	 // lock
	while(!BUFF_inserta(buffer,item)){
 8003186:	e017      	b.n	80031b8 <BUFF_inserta_prot+0x58>
	 		 xSemaphoreGive(buffer->xSem);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6958      	ldr	r0, [r3, #20]
 800318c:	2300      	movs	r3, #0
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	f002 fe8d 	bl	8005eb0 <xQueueGenericSend>
	 		 vTaskDelay(100/portTICK_RATE_MS );
 8003196:	2064      	movs	r0, #100	; 0x64
 8003198:	f003 fb2a 	bl	80067f0 <vTaskDelay>
	 		 while (xSemaphoreTake(buffer->xSem, 10000/portTICK_RATE_MS  ) != pdTRUE );
 800319c:	bf00      	nop
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f242 7110 	movw	r1, #10000	; 0x2710
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 ff80 	bl	80060ac <xQueueSemaphoreTake>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d1f5      	bne.n	800319e <BUFF_inserta_prot+0x3e>
	 		 it++;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3301      	adds	r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
	while(!BUFF_inserta(buffer,item)){
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ff39 	bl	8003034 <BUFF_inserta>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0df      	beq.n	8003188 <BUFF_inserta_prot+0x28>
	}
	xSemaphoreGive(buffer->xSem);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6958      	ldr	r0, [r3, #20]
 80031cc:	2300      	movs	r3, #0
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	f002 fe6d 	bl	8005eb0 <xQueueGenericSend>
	return 1; // siempre tiene éxito
 80031d6:	2301      	movs	r3, #1
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <BUFF_inserta_cad>:

uint32_t BUFF_inserta_cad(BUFF_BUFFER_t * buffer,BUFF_ITEM_t * cad,uint32_t nitems)
{ //variable condicion
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]

	int it;
	uint32_t res;
	for (it=0;it<nitems;it++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e010      	b.n	8003214 <BUFF_inserta_cad+0x34>
	{
		res=BUFF_inserta_prot(buffer,cad[it]);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	4413      	add	r3, r2
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	4619      	mov	r1, r3
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff ffaf 	bl	8003160 <BUFF_inserta_prot>
 8003202:	6138      	str	r0, [r7, #16]
		if (!res) return it;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <BUFF_inserta_cad+0x2e>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	e007      	b.n	800321e <BUFF_inserta_cad+0x3e>
	for (it=0;it<nitems;it++)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3301      	adds	r3, #1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d8ea      	bhi.n	80031f2 <BUFF_inserta_cad+0x12>
	}
	return 1; // siempre tiene éxito
 800321c:	2301      	movs	r3, #1
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <bufferCreat>:
} BUFF_BUFFER_t;
*/


// API
BUFF_BUFFER_t * bufferCreat(int size){
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	BUFF_BUFFER_t * tmp;
	void * bff;

	tmp=malloc(sizeof(BUFF_BUFFER_t));
 8003230:	202c      	movs	r0, #44	; 0x2c
 8003232:	f004 ff23 	bl	800807c <malloc>
 8003236:	4603      	mov	r3, r0
 8003238:	60fb      	str	r3, [r7, #12]
	if (tmp){ // enought for structure
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d03d      	beq.n	80032bc <bufferCreat+0x94>

		bff=malloc(sizeof(uint8_t)*size);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4618      	mov	r0, r3
 8003244:	f004 ff1a 	bl	800807c <malloc>
 8003248:	4603      	mov	r3, r0
 800324a:	60bb      	str	r3, [r7, #8]
		if (bff){ //enought for buffer
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d031      	beq.n	80032b6 <bufferCreat+0x8e>
			tmp->xSem=xSemaphoreCreateMutex();
 8003252:	2001      	movs	r0, #1
 8003254:	f002 fe13 	bl	8005e7e <xQueueCreateMutex>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	615a      	str	r2, [r3, #20]
			if (!tmp->xSem){
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <bufferCreat+0x4e>
				free(bff);
 8003266:	68b8      	ldr	r0, [r7, #8]
 8003268:	f004 ff10 	bl	800808c <free>
				free(tmp);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f004 ff0d 	bl	800808c <free>
				return NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	e023      	b.n	80032be <bufferCreat+0x96>
			};
            tmp->buff=bff;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
			tmp->cabeza=0;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
			tmp->cola=0;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	61da      	str	r2, [r3, #28]
			tmp->size=size;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
			tmp->n_elem=0;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
			tmp->get=(void*)BUFF_extrae_prot;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <bufferCreat+0xa0>)
 8003298:	601a      	str	r2, [r3, #0]
			tmp->put=(void*)BUFF_inserta_prot;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a0b      	ldr	r2, [pc, #44]	; (80032cc <bufferCreat+0xa4>)
 800329e:	605a      	str	r2, [r3, #4]
			tmp->puts=(void*)BUFF_inserta_cad;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a0b      	ldr	r2, [pc, #44]	; (80032d0 <bufferCreat+0xa8>)
 80032a4:	611a      	str	r2, [r3, #16]

			tmp->isfull=(void*)BUFF_is_full;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <bufferCreat+0xac>)
 80032aa:	60da      	str	r2, [r3, #12]
			tmp->isempty=(void*)BUFF_is_empty;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <bufferCreat+0xb0>)
 80032b0:	609a      	str	r2, [r3, #8]
			return tmp;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	e003      	b.n	80032be <bufferCreat+0x96>
		}
		else
			free(tmp);
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f004 fee8 	bl	800808c <free>
	}
	return NULL;
 80032bc:	2300      	movs	r3, #0

}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	080030e5 	.word	0x080030e5
 80032cc:	08003161 	.word	0x08003161
 80032d0:	080031e1 	.word	0x080031e1
 80032d4:	0800300f 	.word	0x0800300f
 80032d8:	08002fed 	.word	0x08002fed

080032dc <makeFreeRtosPriority>:
uint8_t buffer_DMA_1[buffer_SIZE];
uint8_t buffer_DMA_2[buffer_SIZE];


unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	80fb      	strh	r3, [r7, #6]
unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]

if (priority != osPriorityError) {
 80032ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ee:	2b84      	cmp	r3, #132	; 0x84
 80032f0:	d005      	beq.n	80032fe <makeFreeRtosPriority+0x22>
fpriority += (priority - osPriorityIdle);
 80032f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	3303      	adds	r3, #3
 80032fc:	60fb      	str	r3, [r7, #12]
}

return fpriority;
 80032fe:	68fb      	ldr	r3, [r7, #12]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <_write>:

int _write(int file, char *ptr, int len)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	e00b      	b.n	8003336 <_write+0x2a>
	{
	    //ITM_SendChar( *ptr++ );
	   HAL_UART_Transmit(&huart2, (uint8_t*)ptr++,1,1000);
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	1c4b      	adds	r3, r1, #1
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003328:	2201      	movs	r2, #1
 800332a:	4807      	ldr	r0, [pc, #28]	; (8003348 <_write+0x3c>)
 800332c:	f001 fd29 	bl	8004d82 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3301      	adds	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	dbef      	blt.n	800331e <_write+0x12>
	}

	return len;
 800333e:	687b      	ldr	r3, [r7, #4]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	200006e8 	.word	0x200006e8

0800334c <UART_EndRxTransfer>:
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */

static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b095      	sub	sp, #84	; 0x54
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	330c      	adds	r3, #12
 800335a:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	330c      	adds	r3, #12
 8003372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003374:	643a      	str	r2, [r7, #64]	; 0x40
 8003376:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800337a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e5      	bne.n	8003354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3314      	adds	r3, #20
 800338e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	61fb      	str	r3, [r7, #28]
   return(result);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3314      	adds	r3, #20
 80033a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e5      	bne.n	8003388 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d119      	bne.n	80033f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f023 0310 	bic.w	r3, r3, #16
 80033da:	647b      	str	r3, [r7, #68]	; 0x44
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033e4:	61ba      	str	r2, [r7, #24]
 80033e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6979      	ldr	r1, [r7, #20]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	613b      	str	r3, [r7, #16]
   return(result);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e5      	bne.n	80033c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003406:	bf00      	nop
 8003408:	3754      	adds	r7, #84	; 0x54
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_DMA_Abort_PAS>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_PAS(DMA_HandleTypeDef *hdma)
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	60fb      	str	r3, [r7, #12]

  //uint32_t tickstart = HAL_GetTick();

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d008      	beq.n	800343e <HAL_DMA_Abort_PAS+0x2c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e036      	b.n	80034ac <HAL_DMA_Abort_PAS+0x9a>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0216 	bic.w	r2, r2, #22
 800344c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800345c:	615a      	str	r2, [r3, #20]

    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d103      	bne.n	800346e <HAL_DMA_Abort_PAS+0x5c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_DMA_Abort_PAS+0x6c>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0208 	bic.w	r2, r2, #8
 800347c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
        return HAL_TIMEOUT;
      }
    }*/

    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	223f      	movs	r2, #63	; 0x3f
 8003494:	409a      	lsls	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	609a      	str	r2, [r3, #8]

    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_UART_DMAStop_PAS>:

HAL_StatusTypeDef HAL_UART_DMAStop_PAS(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */


  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	bf0c      	ite	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	2300      	movne	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b22      	cmp	r3, #34	; 0x22
 80034e4:	d128      	bne.n	8003538 <HAL_UART_DMAStop_PAS+0x80>
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d025      	beq.n	8003538 <HAL_UART_DMAStop_PAS+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3314      	adds	r3, #20
 80034f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	e853 3f00 	ldrex	r3, [r3]
 80034fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003502:	623b      	str	r3, [r7, #32]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3314      	adds	r3, #20
 800350a:	6a3a      	ldr	r2, [r7, #32]
 800350c:	61fa      	str	r2, [r7, #28]
 800350e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	69b9      	ldr	r1, [r7, #24]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	617b      	str	r3, [r7, #20]
   return(result);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e5      	bne.n	80034ec <HAL_UART_DMAStop_PAS+0x34>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	2b00      	cmp	r3, #0
 8003526:	d004      	beq.n	8003532 <HAL_UART_DMAStop_PAS+0x7a>
    {
      HAL_DMA_Abort_PAS(huart->hdmarx);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff70 	bl	8003412 <HAL_DMA_Abort_PAS>
    }
    UART_EndRxTransfer(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff0a 	bl	800334c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3728      	adds	r7, #40	; 0x28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_DMA_getcounter>:



uint32_t HAL_DMA_getcounter(UART_HandleTypeDef *huart){
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
	return huart->hdmarx->Instance->NDTR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003598 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003564:	480d      	ldr	r0, [pc, #52]	; (800359c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003566:	490e      	ldr	r1, [pc, #56]	; (80035a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003568:	4a0e      	ldr	r2, [pc, #56]	; (80035a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800356c:	e002      	b.n	8003574 <LoopCopyDataInit>

0800356e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800356e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003572:	3304      	adds	r3, #4

08003574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003578:	d3f9      	bcc.n	800356e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800357a:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800357c:	4c0b      	ldr	r4, [pc, #44]	; (80035ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800357e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003580:	e001      	b.n	8003586 <LoopFillZerobss>

08003582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003584:	3204      	adds	r2, #4

08003586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003588:	d3fb      	bcc.n	8003582 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800358a:	f7ff f953 	bl	8002834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800358e:	f004 fd4d 	bl	800802c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003592:	f7fe fdc7 	bl	8002124 <main>
  bx  lr    
 8003596:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800359c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a0:	2000042c 	.word	0x2000042c
  ldr r2, =_sidata
 80035a4:	0800b65c 	.word	0x0800b65c
  ldr r2, =_sbss
 80035a8:	2000042c 	.word	0x2000042c
  ldr r4, =_ebss
 80035ac:	20005d7c 	.word	0x20005d7c

080035b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035b0:	e7fe      	b.n	80035b0 <ADC_IRQHandler>
	...

080035b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_Init+0x40>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0d      	ldr	r2, [pc, #52]	; (80035f4 <HAL_Init+0x40>)
 80035be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_Init+0x40>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <HAL_Init+0x40>)
 80035ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <HAL_Init+0x40>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <HAL_Init+0x40>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035dc:	2003      	movs	r0, #3
 80035de:	f000 f92b 	bl	8003838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035e2:	200f      	movs	r0, #15
 80035e4:	f000 f808 	bl	80035f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035e8:	f7fe ff36 	bl	8002458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023c00 	.word	0x40023c00

080035f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003600:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_InitTick+0x54>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_InitTick+0x58>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800360e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f943 	bl	80038a2 <HAL_SYSTICK_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e00e      	b.n	8003644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b0f      	cmp	r3, #15
 800362a:	d80a      	bhi.n	8003642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800362c:	2200      	movs	r2, #0
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	f000 f90b 	bl	800384e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003638:	4a06      	ldr	r2, [pc, #24]	; (8003654 <HAL_InitTick+0x5c>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	2000000c 	.word	0x2000000c
 8003650:	20000250 	.word	0x20000250
 8003654:	2000024c 	.word	0x2000024c

08003658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_IncTick+0x20>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_IncTick+0x24>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4413      	add	r3, r2
 8003668:	4a04      	ldr	r2, [pc, #16]	; (800367c <HAL_IncTick+0x24>)
 800366a:	6013      	str	r3, [r2, #0]
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000250 	.word	0x20000250
 800367c:	20002014 	.word	0x20002014

08003680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return uwTick;
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_GetTick+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20002014 	.word	0x20002014

08003698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <__NVIC_SetPriorityGrouping+0x44>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036b4:	4013      	ands	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ca:	4a04      	ldr	r2, [pc, #16]	; (80036dc <__NVIC_SetPriorityGrouping+0x44>)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	60d3      	str	r3, [r2, #12]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <__NVIC_GetPriorityGrouping+0x18>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	0a1b      	lsrs	r3, r3, #8
 80036ea:	f003 0307 	and.w	r3, r3, #7
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	2b00      	cmp	r3, #0
 800370c:	db0b      	blt.n	8003726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	f003 021f 	and.w	r2, r3, #31
 8003714:	4907      	ldr	r1, [pc, #28]	; (8003734 <__NVIC_EnableIRQ+0x38>)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2001      	movs	r0, #1
 800371e:	fa00 f202 	lsl.w	r2, r0, r2
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000e100 	.word	0xe000e100

08003738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	6039      	str	r1, [r7, #0]
 8003742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003748:	2b00      	cmp	r3, #0
 800374a:	db0a      	blt.n	8003762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	490c      	ldr	r1, [pc, #48]	; (8003784 <__NVIC_SetPriority+0x4c>)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	0112      	lsls	r2, r2, #4
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	440b      	add	r3, r1
 800375c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003760:	e00a      	b.n	8003778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4908      	ldr	r1, [pc, #32]	; (8003788 <__NVIC_SetPriority+0x50>)
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	3b04      	subs	r3, #4
 8003770:	0112      	lsls	r2, r2, #4
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	440b      	add	r3, r1
 8003776:	761a      	strb	r2, [r3, #24]
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000e100 	.word	0xe000e100
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f1c3 0307 	rsb	r3, r3, #7
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	bf28      	it	cs
 80037aa:	2304      	movcs	r3, #4
 80037ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3304      	adds	r3, #4
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d902      	bls.n	80037bc <NVIC_EncodePriority+0x30>
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3b03      	subs	r3, #3
 80037ba:	e000      	b.n	80037be <NVIC_EncodePriority+0x32>
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c0:	f04f 32ff 	mov.w	r2, #4294967295
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43da      	mvns	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	401a      	ands	r2, r3
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d4:	f04f 31ff 	mov.w	r1, #4294967295
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	43d9      	mvns	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e4:	4313      	orrs	r3, r2
         );
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3724      	adds	r7, #36	; 0x24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003804:	d301      	bcc.n	800380a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003806:	2301      	movs	r3, #1
 8003808:	e00f      	b.n	800382a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800380a:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <SysTick_Config+0x40>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003812:	210f      	movs	r1, #15
 8003814:	f04f 30ff 	mov.w	r0, #4294967295
 8003818:	f7ff ff8e 	bl	8003738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <SysTick_Config+0x40>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <SysTick_Config+0x40>)
 8003824:	2207      	movs	r2, #7
 8003826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	e000e010 	.word	0xe000e010

08003838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff29 	bl	8003698 <__NVIC_SetPriorityGrouping>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003860:	f7ff ff3e 	bl	80036e0 <__NVIC_GetPriorityGrouping>
 8003864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	6978      	ldr	r0, [r7, #20]
 800386c:	f7ff ff8e 	bl	800378c <NVIC_EncodePriority>
 8003870:	4602      	mov	r2, r0
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff5d 	bl	8003738 <__NVIC_SetPriority>
}
 800387e:	bf00      	nop
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	4603      	mov	r3, r0
 800388e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff31 	bl	80036fc <__NVIC_EnableIRQ>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff ffa2 	bl	80037f4 <SysTick_Config>
 80038b0:	4603      	mov	r3, r0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff feda 	bl	8003680 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e099      	b.n	8003a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f8:	e00f      	b.n	800391a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038fa:	f7ff fec1 	bl	8003680 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b05      	cmp	r3, #5
 8003906:	d908      	bls.n	800391a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2203      	movs	r2, #3
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e078      	b.n	8003a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e8      	bne.n	80038fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <HAL_DMA_Init+0x158>)
 8003934:	4013      	ands	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800395e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	2b04      	cmp	r3, #4
 8003972:	d107      	bne.n	8003984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	4313      	orrs	r3, r2
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f023 0307 	bic.w	r3, r3, #7
 800399a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d117      	bne.n	80039de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00e      	beq.n	80039de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fadf 	bl	8003f84 <DMA_CheckFifoParam>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2240      	movs	r2, #64	; 0x40
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039da:	2301      	movs	r3, #1
 80039dc:	e016      	b.n	8003a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fa96 	bl	8003f18 <DMA_CalcBaseAndBitshift>
 80039ec:	4603      	mov	r3, r0
 80039ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	223f      	movs	r2, #63	; 0x3f
 80039f6:	409a      	lsls	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	f010803f 	.word	0xf010803f

08003a18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_DMA_Start_IT+0x26>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e040      	b.n	8003ac0 <HAL_DMA_Start_IT+0xa8>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d12f      	bne.n	8003ab2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fa28 	bl	8003ebc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	223f      	movs	r2, #63	; 0x3f
 8003a72:	409a      	lsls	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0216 	orr.w	r2, r2, #22
 8003a86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d007      	beq.n	8003aa0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0208 	orr.w	r2, r2, #8
 8003a9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e005      	b.n	8003abe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
 8003abc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ad6:	f7ff fdd3 	bl	8003680 <HAL_GetTick>
 8003ada:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d008      	beq.n	8003afa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2280      	movs	r2, #128	; 0x80
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e052      	b.n	8003ba0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0216 	bic.w	r2, r2, #22
 8003b08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d103      	bne.n	8003b2a <HAL_DMA_Abort+0x62>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0208 	bic.w	r2, r2, #8
 8003b38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b4a:	e013      	b.n	8003b74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b4c:	f7ff fd98 	bl	8003680 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d90c      	bls.n	8003b74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2203      	movs	r2, #3
 8003b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e015      	b.n	8003ba0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e4      	bne.n	8003b4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	223f      	movs	r2, #63	; 0x3f
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bb4:	4b8e      	ldr	r3, [pc, #568]	; (8003df0 <HAL_DMA_IRQHandler+0x248>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a8e      	ldr	r2, [pc, #568]	; (8003df4 <HAL_DMA_IRQHandler+0x24c>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	0a9b      	lsrs	r3, r3, #10
 8003bc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d01a      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d013      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0204 	bic.w	r2, r2, #4
 8003bfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	2208      	movs	r2, #8
 8003c02:	409a      	lsls	r2, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c18:	2201      	movs	r2, #1
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d012      	beq.n	8003c4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	2201      	movs	r2, #1
 8003c38:	409a      	lsls	r2, r3
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c42:	f043 0202 	orr.w	r2, r3, #2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	2204      	movs	r2, #4
 8003c50:	409a      	lsls	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d012      	beq.n	8003c80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00b      	beq.n	8003c80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	f043 0204 	orr.w	r2, r3, #4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	2210      	movs	r2, #16
 8003c86:	409a      	lsls	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d043      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d03c      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d018      	beq.n	8003cea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d108      	bne.n	8003cd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d024      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
 8003cd6:	e01f      	b.n	8003d18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01b      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
 8003ce8:	e016      	b.n	8003d18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0208 	bic.w	r2, r2, #8
 8003d06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 808f 	beq.w	8003e48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8087 	beq.w	8003e48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3e:	2220      	movs	r2, #32
 8003d40:	409a      	lsls	r2, r3
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b05      	cmp	r3, #5
 8003d50:	d136      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0216 	bic.w	r2, r2, #22
 8003d60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <HAL_DMA_IRQHandler+0x1da>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0208 	bic.w	r2, r2, #8
 8003d90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	223f      	movs	r2, #63	; 0x3f
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d07e      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
        }
        return;
 8003dbe:	e079      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01d      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10d      	bne.n	8003df8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d031      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
 8003dec:	e02c      	b.n	8003e48 <HAL_DMA_IRQHandler+0x2a0>
 8003dee:	bf00      	nop
 8003df0:	2000000c 	.word	0x2000000c
 8003df4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d023      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
 8003e08:	e01e      	b.n	8003e48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10f      	bne.n	8003e38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0210 	bic.w	r2, r2, #16
 8003e26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d032      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d022      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2205      	movs	r2, #5
 8003e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	3301      	adds	r3, #1
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d307      	bcc.n	8003e90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f2      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x2cc>
 8003e8e:	e000      	b.n	8003e92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4798      	blx	r3
 8003eb2:	e000      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003eb4:	bf00      	nop
    }
  }
}
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d108      	bne.n	8003efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003efa:	e007      	b.n	8003f0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	3b10      	subs	r3, #16
 8003f28:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <DMA_CalcBaseAndBitshift+0x64>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f32:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <DMA_CalcBaseAndBitshift+0x68>)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d909      	bls.n	8003f5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	1d1a      	adds	r2, r3, #4
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	659a      	str	r2, [r3, #88]	; 0x58
 8003f58:	e007      	b.n	8003f6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f62:	f023 0303 	bic.w	r3, r3, #3
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	aaaaaaab 	.word	0xaaaaaaab
 8003f80:	0800b210 	.word	0x0800b210

08003f84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d11f      	bne.n	8003fde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d856      	bhi.n	8004052 <DMA_CheckFifoParam+0xce>
 8003fa4:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <DMA_CheckFifoParam+0x28>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fcf 	.word	0x08003fcf
 8003fb4:	08003fbd 	.word	0x08003fbd
 8003fb8:	08004053 	.word	0x08004053
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d046      	beq.n	8004056 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fcc:	e043      	b.n	8004056 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fd6:	d140      	bne.n	800405a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fdc:	e03d      	b.n	800405a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe6:	d121      	bne.n	800402c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d837      	bhi.n	800405e <DMA_CheckFifoParam+0xda>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <DMA_CheckFifoParam+0x70>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	0800400b 	.word	0x0800400b
 8003ffc:	08004005 	.word	0x08004005
 8004000:	0800401d 	.word	0x0800401d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      break;
 8004008:	e030      	b.n	800406c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d025      	beq.n	8004062 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800401a:	e022      	b.n	8004062 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004024:	d11f      	bne.n	8004066 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800402a:	e01c      	b.n	8004066 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d903      	bls.n	800403a <DMA_CheckFifoParam+0xb6>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d003      	beq.n	8004040 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004038:	e018      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	73fb      	strb	r3, [r7, #15]
      break;
 800403e:	e015      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00e      	beq.n	800406a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      break;
 8004050:	e00b      	b.n	800406a <DMA_CheckFifoParam+0xe6>
      break;
 8004052:	bf00      	nop
 8004054:	e00a      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;
 8004056:	bf00      	nop
 8004058:	e008      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;
 800405a:	bf00      	nop
 800405c:	e006      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;
 800405e:	bf00      	nop
 8004060:	e004      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;
 8004062:	bf00      	nop
 8004064:	e002      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;   
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;
 800406a:	bf00      	nop
    }
  } 
  
  return status; 
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop

0800407c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800407c:	b480      	push	{r7}
 800407e:	b089      	sub	sp, #36	; 0x24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800408e:	2300      	movs	r3, #0
 8004090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	e159      	b.n	800434c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004098:	2201      	movs	r2, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	f040 8148 	bne.w	8004346 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d005      	beq.n	80040ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d130      	bne.n	8004130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	2203      	movs	r2, #3
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004104:	2201      	movs	r2, #1
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 0201 	and.w	r2, r3, #1
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b03      	cmp	r3, #3
 800413a:	d017      	beq.n	800416c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d123      	bne.n	80041c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	08da      	lsrs	r2, r3, #3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3208      	adds	r2, #8
 8004180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	220f      	movs	r2, #15
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	08da      	lsrs	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3208      	adds	r2, #8
 80041ba:	69b9      	ldr	r1, [r7, #24]
 80041bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	2203      	movs	r2, #3
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4013      	ands	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0203 	and.w	r2, r3, #3
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80a2 	beq.w	8004346 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	4b57      	ldr	r3, [pc, #348]	; (8004364 <HAL_GPIO_Init+0x2e8>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	4a56      	ldr	r2, [pc, #344]	; (8004364 <HAL_GPIO_Init+0x2e8>)
 800420c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004210:	6453      	str	r3, [r2, #68]	; 0x44
 8004212:	4b54      	ldr	r3, [pc, #336]	; (8004364 <HAL_GPIO_Init+0x2e8>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800421e:	4a52      	ldr	r2, [pc, #328]	; (8004368 <HAL_GPIO_Init+0x2ec>)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	3302      	adds	r3, #2
 8004226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	220f      	movs	r2, #15
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a49      	ldr	r2, [pc, #292]	; (800436c <HAL_GPIO_Init+0x2f0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d019      	beq.n	800427e <HAL_GPIO_Init+0x202>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a48      	ldr	r2, [pc, #288]	; (8004370 <HAL_GPIO_Init+0x2f4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d013      	beq.n	800427a <HAL_GPIO_Init+0x1fe>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a47      	ldr	r2, [pc, #284]	; (8004374 <HAL_GPIO_Init+0x2f8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00d      	beq.n	8004276 <HAL_GPIO_Init+0x1fa>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a46      	ldr	r2, [pc, #280]	; (8004378 <HAL_GPIO_Init+0x2fc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d007      	beq.n	8004272 <HAL_GPIO_Init+0x1f6>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a45      	ldr	r2, [pc, #276]	; (800437c <HAL_GPIO_Init+0x300>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d101      	bne.n	800426e <HAL_GPIO_Init+0x1f2>
 800426a:	2304      	movs	r3, #4
 800426c:	e008      	b.n	8004280 <HAL_GPIO_Init+0x204>
 800426e:	2307      	movs	r3, #7
 8004270:	e006      	b.n	8004280 <HAL_GPIO_Init+0x204>
 8004272:	2303      	movs	r3, #3
 8004274:	e004      	b.n	8004280 <HAL_GPIO_Init+0x204>
 8004276:	2302      	movs	r3, #2
 8004278:	e002      	b.n	8004280 <HAL_GPIO_Init+0x204>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_GPIO_Init+0x204>
 800427e:	2300      	movs	r3, #0
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	f002 0203 	and.w	r2, r2, #3
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	4093      	lsls	r3, r2
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004290:	4935      	ldr	r1, [pc, #212]	; (8004368 <HAL_GPIO_Init+0x2ec>)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	3302      	adds	r3, #2
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800429e:	4b38      	ldr	r3, [pc, #224]	; (8004380 <HAL_GPIO_Init+0x304>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042c2:	4a2f      	ldr	r2, [pc, #188]	; (8004380 <HAL_GPIO_Init+0x304>)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042c8:	4b2d      	ldr	r3, [pc, #180]	; (8004380 <HAL_GPIO_Init+0x304>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042ec:	4a24      	ldr	r2, [pc, #144]	; (8004380 <HAL_GPIO_Init+0x304>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042f2:	4b23      	ldr	r3, [pc, #140]	; (8004380 <HAL_GPIO_Init+0x304>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004316:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <HAL_GPIO_Init+0x304>)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800431c:	4b18      	ldr	r3, [pc, #96]	; (8004380 <HAL_GPIO_Init+0x304>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004340:	4a0f      	ldr	r2, [pc, #60]	; (8004380 <HAL_GPIO_Init+0x304>)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3301      	adds	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	f67f aea2 	bls.w	8004098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3724      	adds	r7, #36	; 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
 8004368:	40013800 	.word	0x40013800
 800436c:	40020000 	.word	0x40020000
 8004370:	40020400 	.word	0x40020400
 8004374:	40020800 	.word	0x40020800
 8004378:	40020c00 	.word	0x40020c00
 800437c:	40021000 	.word	0x40021000
 8004380:	40013c00 	.word	0x40013c00

08004384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]
 8004390:	4613      	mov	r3, r2
 8004392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004394:	787b      	ldrb	r3, [r7, #1]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800439a:	887a      	ldrh	r2, [r7, #2]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043a0:	e003      	b.n	80043aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043a2:	887b      	ldrh	r3, [r7, #2]
 80043a4:	041a      	lsls	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	619a      	str	r2, [r3, #24]
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e267      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d075      	beq.n	80044c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043d6:	4b88      	ldr	r3, [pc, #544]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d00c      	beq.n	80043fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043e2:	4b85      	ldr	r3, [pc, #532]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d112      	bne.n	8004414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ee:	4b82      	ldr	r3, [pc, #520]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043fa:	d10b      	bne.n	8004414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fc:	4b7e      	ldr	r3, [pc, #504]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d05b      	beq.n	80044c0 <HAL_RCC_OscConfig+0x108>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d157      	bne.n	80044c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e242      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d106      	bne.n	800442c <HAL_RCC_OscConfig+0x74>
 800441e:	4b76      	ldr	r3, [pc, #472]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a75      	ldr	r2, [pc, #468]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e01d      	b.n	8004468 <HAL_RCC_OscConfig+0xb0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004434:	d10c      	bne.n	8004450 <HAL_RCC_OscConfig+0x98>
 8004436:	4b70      	ldr	r3, [pc, #448]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a6f      	ldr	r2, [pc, #444]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800443c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	4b6d      	ldr	r3, [pc, #436]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a6c      	ldr	r2, [pc, #432]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e00b      	b.n	8004468 <HAL_RCC_OscConfig+0xb0>
 8004450:	4b69      	ldr	r3, [pc, #420]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a68      	ldr	r2, [pc, #416]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b66      	ldr	r3, [pc, #408]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a65      	ldr	r2, [pc, #404]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d013      	beq.n	8004498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7ff f906 	bl	8003680 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004478:	f7ff f902 	bl	8003680 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b64      	cmp	r3, #100	; 0x64
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e207      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	4b5b      	ldr	r3, [pc, #364]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0xc0>
 8004496:	e014      	b.n	80044c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7ff f8f2 	bl	8003680 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a0:	f7ff f8ee 	bl	8003680 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e1f3      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b2:	4b51      	ldr	r3, [pc, #324]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0xe8>
 80044be:	e000      	b.n	80044c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d063      	beq.n	8004596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ce:	4b4a      	ldr	r3, [pc, #296]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044da:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d11c      	bne.n	8004520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044e6:	4b44      	ldr	r3, [pc, #272]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d116      	bne.n	8004520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f2:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_RCC_OscConfig+0x152>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d001      	beq.n	800450a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e1c7      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450a:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4937      	ldr	r1, [pc, #220]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451e:	e03a      	b.n	8004596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d020      	beq.n	800456a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004528:	4b34      	ldr	r3, [pc, #208]	; (80045fc <HAL_RCC_OscConfig+0x244>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7ff f8a7 	bl	8003680 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004536:	f7ff f8a3 	bl	8003680 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e1a8      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004548:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004554:	4b28      	ldr	r3, [pc, #160]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4925      	ldr	r1, [pc, #148]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]
 8004568:	e015      	b.n	8004596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800456a:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCC_OscConfig+0x244>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7ff f886 	bl	8003680 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004578:	f7ff f882 	bl	8003680 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e187      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458a:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d036      	beq.n	8004610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d016      	beq.n	80045d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <HAL_RCC_OscConfig+0x248>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7ff f866 	bl	8003680 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b8:	f7ff f862 	bl	8003680 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e167      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_OscConfig+0x240>)
 80045cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x200>
 80045d6:	e01b      	b.n	8004610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_OscConfig+0x248>)
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7ff f84f 	bl	8003680 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	e00e      	b.n	8004604 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e6:	f7ff f84b 	bl	8003680 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d907      	bls.n	8004604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e150      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
 80045f8:	40023800 	.word	0x40023800
 80045fc:	42470000 	.word	0x42470000
 8004600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004604:	4b88      	ldr	r3, [pc, #544]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ea      	bne.n	80045e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8097 	beq.w	800474c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004622:	4b81      	ldr	r3, [pc, #516]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10f      	bne.n	800464e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	4b7d      	ldr	r3, [pc, #500]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	4a7c      	ldr	r2, [pc, #496]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463c:	6413      	str	r3, [r2, #64]	; 0x40
 800463e:	4b7a      	ldr	r3, [pc, #488]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464e:	4b77      	ldr	r3, [pc, #476]	; (800482c <HAL_RCC_OscConfig+0x474>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d118      	bne.n	800468c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800465a:	4b74      	ldr	r3, [pc, #464]	; (800482c <HAL_RCC_OscConfig+0x474>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a73      	ldr	r2, [pc, #460]	; (800482c <HAL_RCC_OscConfig+0x474>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004666:	f7ff f80b 	bl	8003680 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466e:	f7ff f807 	bl	8003680 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e10c      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004680:	4b6a      	ldr	r3, [pc, #424]	; (800482c <HAL_RCC_OscConfig+0x474>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x2ea>
 8004694:	4b64      	ldr	r3, [pc, #400]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	4a63      	ldr	r2, [pc, #396]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6713      	str	r3, [r2, #112]	; 0x70
 80046a0:	e01c      	b.n	80046dc <HAL_RCC_OscConfig+0x324>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x30c>
 80046aa:	4b5f      	ldr	r3, [pc, #380]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	4a5e      	ldr	r2, [pc, #376]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046b0:	f043 0304 	orr.w	r3, r3, #4
 80046b4:	6713      	str	r3, [r2, #112]	; 0x70
 80046b6:	4b5c      	ldr	r3, [pc, #368]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a5b      	ldr	r2, [pc, #364]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0x324>
 80046c4:	4b58      	ldr	r3, [pc, #352]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	4a57      	ldr	r2, [pc, #348]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70
 80046d0:	4b55      	ldr	r3, [pc, #340]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a54      	ldr	r2, [pc, #336]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80046d6:	f023 0304 	bic.w	r3, r3, #4
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d015      	beq.n	8004710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e4:	f7fe ffcc 	bl	8003680 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ea:	e00a      	b.n	8004702 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ec:	f7fe ffc8 	bl	8003680 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e0cb      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004702:	4b49      	ldr	r3, [pc, #292]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0ee      	beq.n	80046ec <HAL_RCC_OscConfig+0x334>
 800470e:	e014      	b.n	800473a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004710:	f7fe ffb6 	bl	8003680 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fe ffb2 	bl	8003680 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e0b5      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472e:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1ee      	bne.n	8004718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800473a:	7dfb      	ldrb	r3, [r7, #23]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d105      	bne.n	800474c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004740:	4b39      	ldr	r3, [pc, #228]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	4a38      	ldr	r2, [pc, #224]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80a1 	beq.w	8004898 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004756:	4b34      	ldr	r3, [pc, #208]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b08      	cmp	r3, #8
 8004760:	d05c      	beq.n	800481c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d141      	bne.n	80047ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476a:	4b31      	ldr	r3, [pc, #196]	; (8004830 <HAL_RCC_OscConfig+0x478>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fe ff86 	bl	8003680 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004778:	f7fe ff82 	bl	8003680 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e087      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	4b27      	ldr	r3, [pc, #156]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	019b      	lsls	r3, r3, #6
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	3b01      	subs	r3, #1
 80047b0:	041b      	lsls	r3, r3, #16
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	061b      	lsls	r3, r3, #24
 80047ba:	491b      	ldr	r1, [pc, #108]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c0:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_RCC_OscConfig+0x478>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c6:	f7fe ff5b 	bl	8003680 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ce:	f7fe ff57 	bl	8003680 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e05c      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x416>
 80047ec:	e054      	b.n	8004898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ee:	4b10      	ldr	r3, [pc, #64]	; (8004830 <HAL_RCC_OscConfig+0x478>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fe ff44 	bl	8003680 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fe ff40 	bl	8003680 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e045      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <HAL_RCC_OscConfig+0x470>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x444>
 800481a:	e03d      	b.n	8004898 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d107      	bne.n	8004834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e038      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
 8004828:	40023800 	.word	0x40023800
 800482c:	40007000 	.word	0x40007000
 8004830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004834:	4b1b      	ldr	r3, [pc, #108]	; (80048a4 <HAL_RCC_OscConfig+0x4ec>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d028      	beq.n	8004894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d121      	bne.n	8004894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d11a      	bne.n	8004894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004864:	4013      	ands	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800486a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800486c:	4293      	cmp	r3, r2
 800486e:	d111      	bne.n	8004894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	3b01      	subs	r3, #1
 800487e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d107      	bne.n	8004894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800

080048a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0cc      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048bc:	4b68      	ldr	r3, [pc, #416]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d90c      	bls.n	80048e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b65      	ldr	r3, [pc, #404]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d2:	4b63      	ldr	r3, [pc, #396]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0b8      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d020      	beq.n	8004932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048fc:	4b59      	ldr	r3, [pc, #356]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	4a58      	ldr	r2, [pc, #352]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004914:	4b53      	ldr	r3, [pc, #332]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a52      	ldr	r2, [pc, #328]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800491e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004920:	4b50      	ldr	r3, [pc, #320]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	494d      	ldr	r1, [pc, #308]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d044      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d107      	bne.n	8004956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d119      	bne.n	8004986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e07f      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d003      	beq.n	8004966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004962:	2b03      	cmp	r3, #3
 8004964:	d107      	bne.n	8004976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004966:	4b3f      	ldr	r3, [pc, #252]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e06f      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004976:	4b3b      	ldr	r3, [pc, #236]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e067      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004986:	4b37      	ldr	r3, [pc, #220]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f023 0203 	bic.w	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4934      	ldr	r1, [pc, #208]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004998:	f7fe fe72 	bl	8003680 <HAL_GetTick>
 800499c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a0:	f7fe fe6e 	bl	8003680 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e04f      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	4b2b      	ldr	r3, [pc, #172]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 020c 	and.w	r2, r3, #12
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1eb      	bne.n	80049a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c8:	4b25      	ldr	r3, [pc, #148]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d20c      	bcs.n	80049f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b22      	ldr	r3, [pc, #136]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e032      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049fc:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4916      	ldr	r1, [pc, #88]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	490e      	ldr	r1, [pc, #56]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a2e:	f000 f821 	bl	8004a74 <HAL_RCC_GetSysClockFreq>
 8004a32:	4602      	mov	r2, r0
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	091b      	lsrs	r3, r3, #4
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	490a      	ldr	r1, [pc, #40]	; (8004a68 <HAL_RCC_ClockConfig+0x1c0>)
 8004a40:	5ccb      	ldrb	r3, [r1, r3]
 8004a42:	fa22 f303 	lsr.w	r3, r2, r3
 8004a46:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a4a:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fdd2 	bl	80035f8 <HAL_InitTick>

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40023c00 	.word	0x40023c00
 8004a64:	40023800 	.word	0x40023800
 8004a68:	0800b1f8 	.word	0x0800b1f8
 8004a6c:	2000000c 	.word	0x2000000c
 8004a70:	2000024c 	.word	0x2000024c

08004a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a78:	b094      	sub	sp, #80	; 0x50
 8004a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a80:	2300      	movs	r3, #0
 8004a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a84:	2300      	movs	r3, #0
 8004a86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a8c:	4b79      	ldr	r3, [pc, #484]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 030c 	and.w	r3, r3, #12
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d00d      	beq.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	f200 80e1 	bhi.w	8004c60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_GetSysClockFreq+0x3a>
 8004aa6:	e0db      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aa8:	4b73      	ldr	r3, [pc, #460]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004aac:	e0db      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aae:	4b73      	ldr	r3, [pc, #460]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ab2:	e0d8      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ab4:	4b6f      	ldr	r3, [pc, #444]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004abc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004abe:	4b6d      	ldr	r3, [pc, #436]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d063      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aca:	4b6a      	ldr	r3, [pc, #424]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	099b      	lsrs	r3, r3, #6
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004adc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ade:	2300      	movs	r3, #0
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	462b      	mov	r3, r5
 8004aea:	f04f 0000 	mov.w	r0, #0
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	0159      	lsls	r1, r3, #5
 8004af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af8:	0150      	lsls	r0, r2, #5
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4621      	mov	r1, r4
 8004b00:	1a51      	subs	r1, r2, r1
 8004b02:	6139      	str	r1, [r7, #16]
 8004b04:	4629      	mov	r1, r5
 8004b06:	eb63 0301 	sbc.w	r3, r3, r1
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b18:	4659      	mov	r1, fp
 8004b1a:	018b      	lsls	r3, r1, #6
 8004b1c:	4651      	mov	r1, sl
 8004b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b22:	4651      	mov	r1, sl
 8004b24:	018a      	lsls	r2, r1, #6
 8004b26:	4651      	mov	r1, sl
 8004b28:	ebb2 0801 	subs.w	r8, r2, r1
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b46:	4690      	mov	r8, r2
 8004b48:	4699      	mov	r9, r3
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	eb18 0303 	adds.w	r3, r8, r3
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	462b      	mov	r3, r5
 8004b54:	eb49 0303 	adc.w	r3, r9, r3
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b66:	4629      	mov	r1, r5
 8004b68:	024b      	lsls	r3, r1, #9
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b70:	4621      	mov	r1, r4
 8004b72:	024a      	lsls	r2, r1, #9
 8004b74:	4610      	mov	r0, r2
 8004b76:	4619      	mov	r1, r3
 8004b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b84:	f7fc f832 	bl	8000bec <__aeabi_uldivmod>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b90:	e058      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b92:	4b38      	ldr	r3, [pc, #224]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ba2:	623b      	str	r3, [r7, #32]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bac:	4642      	mov	r2, r8
 8004bae:	464b      	mov	r3, r9
 8004bb0:	f04f 0000 	mov.w	r0, #0
 8004bb4:	f04f 0100 	mov.w	r1, #0
 8004bb8:	0159      	lsls	r1, r3, #5
 8004bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bbe:	0150      	lsls	r0, r2, #5
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bca:	4649      	mov	r1, r9
 8004bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004be4:	ebb2 040a 	subs.w	r4, r2, sl
 8004be8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	00eb      	lsls	r3, r5, #3
 8004bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bfa:	00e2      	lsls	r2, r4, #3
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	461d      	mov	r5, r3
 8004c00:	4643      	mov	r3, r8
 8004c02:	18e3      	adds	r3, r4, r3
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	464b      	mov	r3, r9
 8004c08:	eb45 0303 	adc.w	r3, r5, r3
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	028b      	lsls	r3, r1, #10
 8004c1e:	4621      	mov	r1, r4
 8004c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c24:	4621      	mov	r1, r4
 8004c26:	028a      	lsls	r2, r1, #10
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2e:	2200      	movs	r2, #0
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	61fa      	str	r2, [r7, #28]
 8004c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c38:	f7fb ffd8 	bl	8000bec <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c5e:	e002      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3750      	adds	r7, #80	; 0x50
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800
 8004c78:	00f42400 	.word	0x00f42400
 8004c7c:	007a1200 	.word	0x007a1200

08004c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c84:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c86:	681b      	ldr	r3, [r3, #0]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	2000000c 	.word	0x2000000c

08004c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c9c:	f7ff fff0 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	0a9b      	lsrs	r3, r3, #10
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4903      	ldr	r1, [pc, #12]	; (8004cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	0800b208 	.word	0x0800b208

08004cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cc4:	f7ff ffdc 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	0b5b      	lsrs	r3, r3, #13
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	4903      	ldr	r1, [pc, #12]	; (8004ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cd6:	5ccb      	ldrb	r3, [r1, r3]
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	0800b208 	.word	0x0800b208

08004ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e03f      	b.n	8004d7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fd fbce 	bl	80024b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2224      	movs	r2, #36	; 0x24
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fc23 	bl	8005578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b08a      	sub	sp, #40	; 0x28
 8004d86:	af02      	add	r7, sp, #8
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d17c      	bne.n	8004e9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_UART_Transmit+0x2c>
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e075      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_UART_Transmit+0x3e>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e06e      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2221      	movs	r2, #33	; 0x21
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dd6:	f7fe fc53 	bl	8003680 <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df0:	d108      	bne.n	8004e04 <HAL_UART_Transmit+0x82>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	e003      	b.n	8004e0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e14:	e02a      	b.n	8004e6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2180      	movs	r1, #128	; 0x80
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fa11 	bl	8005248 <UART_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e036      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	3302      	adds	r3, #2
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	e007      	b.n	8004e5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	781a      	ldrb	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1cf      	bne.n	8004e16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2140      	movs	r1, #64	; 0x40
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f9e1 	bl	8005248 <UART_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e006      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
  }
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d11d      	bne.n	8004efc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_UART_Receive_DMA+0x26>
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e016      	b.n	8004efe <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_UART_Receive_DMA+0x38>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e00f      	b.n	8004efe <HAL_UART_Receive_DMA+0x58>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fa16 	bl	8005324 <UART_Start_Receive_DMA>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	e000      	b.n	8004efe <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b090      	sub	sp, #64	; 0x40
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b80      	cmp	r3, #128	; 0x80
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b21      	cmp	r3, #33	; 0x21
 8004f32:	d128      	bne.n	8004f86 <HAL_UART_DMAStop+0x80>
 8004f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d025      	beq.n	8004f86 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3314      	adds	r3, #20
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	623b      	str	r3, [r7, #32]
   return(result);
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f50:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3314      	adds	r3, #20
 8004f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f5a:	633a      	str	r2, [r7, #48]	; 0x30
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d004      	beq.n	8004f80 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fe fda4 	bl	8003ac8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fa6d 	bl	8005460 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b22      	cmp	r3, #34	; 0x22
 8004fa6:	d128      	bne.n	8004ffa <HAL_UART_DMAStop+0xf4>
 8004fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d025      	beq.n	8004ffa <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3314      	adds	r3, #20
 8004fb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3314      	adds	r3, #20
 8004fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fce:	61fa      	str	r2, [r7, #28]
 8004fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	69b9      	ldr	r1, [r7, #24]
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	617b      	str	r3, [r7, #20]
   return(result);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e5      	bne.n	8004fae <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d004      	beq.n	8004ff4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe fd6a 	bl	8003ac8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fa5b 	bl	80054b0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3740      	adds	r7, #64	; 0x40
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b09c      	sub	sp, #112	; 0x70
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d172      	bne.n	800515a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005076:	2200      	movs	r2, #0
 8005078:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800508a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800508c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005090:	66bb      	str	r3, [r7, #104]	; 0x68
 8005092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	330c      	adds	r3, #12
 8005098:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800509a:	65ba      	str	r2, [r7, #88]	; 0x58
 800509c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1e5      	bne.n	800507a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3314      	adds	r3, #20
 80050b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c0:	f023 0301 	bic.w	r3, r3, #1
 80050c4:	667b      	str	r3, [r7, #100]	; 0x64
 80050c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3314      	adds	r3, #20
 80050cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050ce:	647a      	str	r2, [r7, #68]	; 0x44
 80050d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e5      	bne.n	80050ae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3314      	adds	r3, #20
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	623b      	str	r3, [r7, #32]
   return(result);
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f8:	663b      	str	r3, [r7, #96]	; 0x60
 80050fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3314      	adds	r3, #20
 8005100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005102:	633a      	str	r2, [r7, #48]	; 0x30
 8005104:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e5      	bne.n	80050e2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	2b01      	cmp	r3, #1
 8005124:	d119      	bne.n	800515a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	60fb      	str	r3, [r7, #12]
   return(result);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f023 0310 	bic.w	r3, r3, #16
 800513c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800513e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	330c      	adds	r3, #12
 8005144:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005146:	61fa      	str	r2, [r7, #28]
 8005148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	69b9      	ldr	r1, [r7, #24]
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	617b      	str	r3, [r7, #20]
   return(result);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e5      	bne.n	8005126 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	2b01      	cmp	r3, #1
 8005160:	d106      	bne.n	8005170 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005164:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005166:	4619      	mov	r1, r3
 8005168:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800516a:	f7ff ff69 	bl	8005040 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800516e:	e002      	b.n	8005176 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005170:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005172:	f7ff ff47 	bl	8005004 <HAL_UART_RxCpltCallback>
}
 8005176:	bf00      	nop
 8005178:	3770      	adds	r7, #112	; 0x70
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	2b01      	cmp	r3, #1
 8005192:	d108      	bne.n	80051a6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	b29b      	uxth	r3, r3
 800519c:	4619      	mov	r1, r3
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff ff4e 	bl	8005040 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051a4:	e002      	b.n	80051ac <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff ff36 	bl	8005018 <HAL_UART_RxHalfCpltCallback>
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d0:	2b80      	cmp	r3, #128	; 0x80
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b21      	cmp	r3, #33	; 0x21
 80051e6:	d108      	bne.n	80051fa <UART_DMAError+0x46>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2200      	movs	r2, #0
 80051f2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80051f4:	68b8      	ldr	r0, [r7, #8]
 80051f6:	f000 f933 	bl	8005460 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b40      	cmp	r3, #64	; 0x40
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b22      	cmp	r3, #34	; 0x22
 800521a:	d108      	bne.n	800522e <UART_DMAError+0x7a>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005228:	68b8      	ldr	r0, [r7, #8]
 800522a:	f000 f941 	bl	80054b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f043 0210 	orr.w	r2, r3, #16
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800523a:	68b8      	ldr	r0, [r7, #8]
 800523c:	f7ff fef6 	bl	800502c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b090      	sub	sp, #64	; 0x40
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005258:	e050      	b.n	80052fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d04c      	beq.n	80052fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <UART_WaitOnFlagUntilTimeout+0x30>
 8005268:	f7fe fa0a 	bl	8003680 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005274:	429a      	cmp	r2, r3
 8005276:	d241      	bcs.n	80052fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330c      	adds	r3, #12
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005298:	637a      	str	r2, [r7, #52]	; 0x34
 800529a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800529e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e5      	bne.n	8005278 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	613b      	str	r3, [r7, #16]
   return(result);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3314      	adds	r3, #20
 80052ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052cc:	623a      	str	r2, [r7, #32]
 80052ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	69f9      	ldr	r1, [r7, #28]
 80052d2:	6a3a      	ldr	r2, [r7, #32]
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e5      	bne.n	80052ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e00f      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	429a      	cmp	r2, r3
 8005318:	d09f      	beq.n	800525a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3740      	adds	r7, #64	; 0x40
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b098      	sub	sp, #96	; 0x60
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2222      	movs	r2, #34	; 0x22
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	4a40      	ldr	r2, [pc, #256]	; (8005454 <UART_Start_Receive_DMA+0x130>)
 8005352:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	4a3f      	ldr	r2, [pc, #252]	; (8005458 <UART_Start_Receive_DMA+0x134>)
 800535a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	4a3e      	ldr	r2, [pc, #248]	; (800545c <UART_Start_Receive_DMA+0x138>)
 8005362:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	2200      	movs	r2, #0
 800536a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800536c:	f107 0308 	add.w	r3, r7, #8
 8005370:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	f7fe fb48 	bl	8003a18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005388:	2300      	movs	r3, #0
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d019      	beq.n	80053e2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80053d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80053d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80053dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e5      	bne.n	80053ae <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	657b      	str	r3, [r7, #84]	; 0x54
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3314      	adds	r3, #20
 8005400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005402:	63ba      	str	r2, [r7, #56]	; 0x38
 8005404:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e5      	bne.n	80053e2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3314      	adds	r3, #20
 800541c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	617b      	str	r3, [r7, #20]
   return(result);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542c:	653b      	str	r3, [r7, #80]	; 0x50
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3314      	adds	r3, #20
 8005434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005436:	627a      	str	r2, [r7, #36]	; 0x24
 8005438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6a39      	ldr	r1, [r7, #32]
 800543c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	61fb      	str	r3, [r7, #28]
   return(result);
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e5      	bne.n	8005416 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3760      	adds	r7, #96	; 0x60
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	08005059 	.word	0x08005059
 8005458:	0800517f 	.word	0x0800517f
 800545c:	080051b5 	.word	0x080051b5

08005460 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b089      	sub	sp, #36	; 0x24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	60bb      	str	r3, [r7, #8]
   return(result);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	61ba      	str	r2, [r7, #24]
 800548a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6979      	ldr	r1, [r7, #20]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	613b      	str	r3, [r7, #16]
   return(result);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e5      	bne.n	8005468 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80054a4:	bf00      	nop
 80054a6:	3724      	adds	r7, #36	; 0x24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b095      	sub	sp, #84	; 0x54
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054d8:	643a      	str	r2, [r7, #64]	; 0x40
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e5      	bne.n	80054b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3314      	adds	r3, #20
 80054f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	64bb      	str	r3, [r7, #72]	; 0x48
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3314      	adds	r3, #20
 800550a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800550c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e5      	bne.n	80054ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	2b01      	cmp	r3, #1
 8005526:	d119      	bne.n	800555c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	60bb      	str	r3, [r7, #8]
   return(result);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 0310 	bic.w	r3, r3, #16
 800553e:	647b      	str	r3, [r7, #68]	; 0x44
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005548:	61ba      	str	r2, [r7, #24]
 800554a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	613b      	str	r3, [r7, #16]
   return(result);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
}
 800556a:	bf00      	nop
 800556c:	3754      	adds	r7, #84	; 0x54
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800557c:	b0c0      	sub	sp, #256	; 0x100
 800557e:	af00      	add	r7, sp, #0
 8005580:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005594:	68d9      	ldr	r1, [r3, #12]
 8005596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	ea40 0301 	orr.w	r3, r0, r1
 80055a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055d0:	f021 010c 	bic.w	r1, r1, #12
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055de:	430b      	orrs	r3, r1
 80055e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f2:	6999      	ldr	r1, [r3, #24]
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	ea40 0301 	orr.w	r3, r0, r1
 80055fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4b8f      	ldr	r3, [pc, #572]	; (8005844 <UART_SetConfig+0x2cc>)
 8005608:	429a      	cmp	r2, r3
 800560a:	d005      	beq.n	8005618 <UART_SetConfig+0xa0>
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b8d      	ldr	r3, [pc, #564]	; (8005848 <UART_SetConfig+0x2d0>)
 8005614:	429a      	cmp	r2, r3
 8005616:	d104      	bne.n	8005622 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005618:	f7ff fb52 	bl	8004cc0 <HAL_RCC_GetPCLK2Freq>
 800561c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005620:	e003      	b.n	800562a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005622:	f7ff fb39 	bl	8004c98 <HAL_RCC_GetPCLK1Freq>
 8005626:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005634:	f040 810c 	bne.w	8005850 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800563c:	2200      	movs	r2, #0
 800563e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005642:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005646:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800564a:	4622      	mov	r2, r4
 800564c:	462b      	mov	r3, r5
 800564e:	1891      	adds	r1, r2, r2
 8005650:	65b9      	str	r1, [r7, #88]	; 0x58
 8005652:	415b      	adcs	r3, r3
 8005654:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005656:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800565a:	4621      	mov	r1, r4
 800565c:	eb12 0801 	adds.w	r8, r2, r1
 8005660:	4629      	mov	r1, r5
 8005662:	eb43 0901 	adc.w	r9, r3, r1
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800567a:	4690      	mov	r8, r2
 800567c:	4699      	mov	r9, r3
 800567e:	4623      	mov	r3, r4
 8005680:	eb18 0303 	adds.w	r3, r8, r3
 8005684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005688:	462b      	mov	r3, r5
 800568a:	eb49 0303 	adc.w	r3, r9, r3
 800568e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800569e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056a6:	460b      	mov	r3, r1
 80056a8:	18db      	adds	r3, r3, r3
 80056aa:	653b      	str	r3, [r7, #80]	; 0x50
 80056ac:	4613      	mov	r3, r2
 80056ae:	eb42 0303 	adc.w	r3, r2, r3
 80056b2:	657b      	str	r3, [r7, #84]	; 0x54
 80056b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056bc:	f7fb fa96 	bl	8000bec <__aeabi_uldivmod>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4b61      	ldr	r3, [pc, #388]	; (800584c <UART_SetConfig+0x2d4>)
 80056c6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	011c      	lsls	r4, r3, #4
 80056ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056e0:	4642      	mov	r2, r8
 80056e2:	464b      	mov	r3, r9
 80056e4:	1891      	adds	r1, r2, r2
 80056e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80056e8:	415b      	adcs	r3, r3
 80056ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056f0:	4641      	mov	r1, r8
 80056f2:	eb12 0a01 	adds.w	sl, r2, r1
 80056f6:	4649      	mov	r1, r9
 80056f8:	eb43 0b01 	adc.w	fp, r3, r1
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005708:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800570c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005710:	4692      	mov	sl, r2
 8005712:	469b      	mov	fp, r3
 8005714:	4643      	mov	r3, r8
 8005716:	eb1a 0303 	adds.w	r3, sl, r3
 800571a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800571e:	464b      	mov	r3, r9
 8005720:	eb4b 0303 	adc.w	r3, fp, r3
 8005724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005734:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005738:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800573c:	460b      	mov	r3, r1
 800573e:	18db      	adds	r3, r3, r3
 8005740:	643b      	str	r3, [r7, #64]	; 0x40
 8005742:	4613      	mov	r3, r2
 8005744:	eb42 0303 	adc.w	r3, r2, r3
 8005748:	647b      	str	r3, [r7, #68]	; 0x44
 800574a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800574e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005752:	f7fb fa4b 	bl	8000bec <__aeabi_uldivmod>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4611      	mov	r1, r2
 800575c:	4b3b      	ldr	r3, [pc, #236]	; (800584c <UART_SetConfig+0x2d4>)
 800575e:	fba3 2301 	umull	r2, r3, r3, r1
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	2264      	movs	r2, #100	; 0x64
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	1acb      	subs	r3, r1, r3
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005772:	4b36      	ldr	r3, [pc, #216]	; (800584c <UART_SetConfig+0x2d4>)
 8005774:	fba3 2302 	umull	r2, r3, r3, r2
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005780:	441c      	add	r4, r3
 8005782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005786:	2200      	movs	r2, #0
 8005788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800578c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005790:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005794:	4642      	mov	r2, r8
 8005796:	464b      	mov	r3, r9
 8005798:	1891      	adds	r1, r2, r2
 800579a:	63b9      	str	r1, [r7, #56]	; 0x38
 800579c:	415b      	adcs	r3, r3
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057a4:	4641      	mov	r1, r8
 80057a6:	1851      	adds	r1, r2, r1
 80057a8:	6339      	str	r1, [r7, #48]	; 0x30
 80057aa:	4649      	mov	r1, r9
 80057ac:	414b      	adcs	r3, r1
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057bc:	4659      	mov	r1, fp
 80057be:	00cb      	lsls	r3, r1, #3
 80057c0:	4651      	mov	r1, sl
 80057c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057c6:	4651      	mov	r1, sl
 80057c8:	00ca      	lsls	r2, r1, #3
 80057ca:	4610      	mov	r0, r2
 80057cc:	4619      	mov	r1, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	4642      	mov	r2, r8
 80057d2:	189b      	adds	r3, r3, r2
 80057d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057d8:	464b      	mov	r3, r9
 80057da:	460a      	mov	r2, r1
 80057dc:	eb42 0303 	adc.w	r3, r2, r3
 80057e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057f8:	460b      	mov	r3, r1
 80057fa:	18db      	adds	r3, r3, r3
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057fe:	4613      	mov	r3, r2
 8005800:	eb42 0303 	adc.w	r3, r2, r3
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800580a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800580e:	f7fb f9ed 	bl	8000bec <__aeabi_uldivmod>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4b0d      	ldr	r3, [pc, #52]	; (800584c <UART_SetConfig+0x2d4>)
 8005818:	fba3 1302 	umull	r1, r3, r3, r2
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	2164      	movs	r1, #100	; 0x64
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	3332      	adds	r3, #50	; 0x32
 800582a:	4a08      	ldr	r2, [pc, #32]	; (800584c <UART_SetConfig+0x2d4>)
 800582c:	fba2 2303 	umull	r2, r3, r2, r3
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	f003 0207 	and.w	r2, r3, #7
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4422      	add	r2, r4
 800583e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005840:	e105      	b.n	8005a4e <UART_SetConfig+0x4d6>
 8005842:	bf00      	nop
 8005844:	40011000 	.word	0x40011000
 8005848:	40011400 	.word	0x40011400
 800584c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005854:	2200      	movs	r2, #0
 8005856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800585a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800585e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005862:	4642      	mov	r2, r8
 8005864:	464b      	mov	r3, r9
 8005866:	1891      	adds	r1, r2, r2
 8005868:	6239      	str	r1, [r7, #32]
 800586a:	415b      	adcs	r3, r3
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
 800586e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005872:	4641      	mov	r1, r8
 8005874:	1854      	adds	r4, r2, r1
 8005876:	4649      	mov	r1, r9
 8005878:	eb43 0501 	adc.w	r5, r3, r1
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	00eb      	lsls	r3, r5, #3
 8005886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800588a:	00e2      	lsls	r2, r4, #3
 800588c:	4614      	mov	r4, r2
 800588e:	461d      	mov	r5, r3
 8005890:	4643      	mov	r3, r8
 8005892:	18e3      	adds	r3, r4, r3
 8005894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005898:	464b      	mov	r3, r9
 800589a:	eb45 0303 	adc.w	r3, r5, r3
 800589e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058be:	4629      	mov	r1, r5
 80058c0:	008b      	lsls	r3, r1, #2
 80058c2:	4621      	mov	r1, r4
 80058c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c8:	4621      	mov	r1, r4
 80058ca:	008a      	lsls	r2, r1, #2
 80058cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058d0:	f7fb f98c 	bl	8000bec <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4b60      	ldr	r3, [pc, #384]	; (8005a5c <UART_SetConfig+0x4e4>)
 80058da:	fba3 2302 	umull	r2, r3, r3, r2
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	011c      	lsls	r4, r3, #4
 80058e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058f4:	4642      	mov	r2, r8
 80058f6:	464b      	mov	r3, r9
 80058f8:	1891      	adds	r1, r2, r2
 80058fa:	61b9      	str	r1, [r7, #24]
 80058fc:	415b      	adcs	r3, r3
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005904:	4641      	mov	r1, r8
 8005906:	1851      	adds	r1, r2, r1
 8005908:	6139      	str	r1, [r7, #16]
 800590a:	4649      	mov	r1, r9
 800590c:	414b      	adcs	r3, r1
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800591c:	4659      	mov	r1, fp
 800591e:	00cb      	lsls	r3, r1, #3
 8005920:	4651      	mov	r1, sl
 8005922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005926:	4651      	mov	r1, sl
 8005928:	00ca      	lsls	r2, r1, #3
 800592a:	4610      	mov	r0, r2
 800592c:	4619      	mov	r1, r3
 800592e:	4603      	mov	r3, r0
 8005930:	4642      	mov	r2, r8
 8005932:	189b      	adds	r3, r3, r2
 8005934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005938:	464b      	mov	r3, r9
 800593a:	460a      	mov	r2, r1
 800593c:	eb42 0303 	adc.w	r3, r2, r3
 8005940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	67bb      	str	r3, [r7, #120]	; 0x78
 800594e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800595c:	4649      	mov	r1, r9
 800595e:	008b      	lsls	r3, r1, #2
 8005960:	4641      	mov	r1, r8
 8005962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005966:	4641      	mov	r1, r8
 8005968:	008a      	lsls	r2, r1, #2
 800596a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800596e:	f7fb f93d 	bl	8000bec <__aeabi_uldivmod>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <UART_SetConfig+0x4e4>)
 8005978:	fba3 1302 	umull	r1, r3, r3, r2
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	2164      	movs	r1, #100	; 0x64
 8005980:	fb01 f303 	mul.w	r3, r1, r3
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	3332      	adds	r3, #50	; 0x32
 800598a:	4a34      	ldr	r2, [pc, #208]	; (8005a5c <UART_SetConfig+0x4e4>)
 800598c:	fba2 2303 	umull	r2, r3, r2, r3
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005996:	441c      	add	r4, r3
 8005998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800599c:	2200      	movs	r2, #0
 800599e:	673b      	str	r3, [r7, #112]	; 0x70
 80059a0:	677a      	str	r2, [r7, #116]	; 0x74
 80059a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059a6:	4642      	mov	r2, r8
 80059a8:	464b      	mov	r3, r9
 80059aa:	1891      	adds	r1, r2, r2
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	415b      	adcs	r3, r3
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059b6:	4641      	mov	r1, r8
 80059b8:	1851      	adds	r1, r2, r1
 80059ba:	6039      	str	r1, [r7, #0]
 80059bc:	4649      	mov	r1, r9
 80059be:	414b      	adcs	r3, r1
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059ce:	4659      	mov	r1, fp
 80059d0:	00cb      	lsls	r3, r1, #3
 80059d2:	4651      	mov	r1, sl
 80059d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059d8:	4651      	mov	r1, sl
 80059da:	00ca      	lsls	r2, r1, #3
 80059dc:	4610      	mov	r0, r2
 80059de:	4619      	mov	r1, r3
 80059e0:	4603      	mov	r3, r0
 80059e2:	4642      	mov	r2, r8
 80059e4:	189b      	adds	r3, r3, r2
 80059e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80059e8:	464b      	mov	r3, r9
 80059ea:	460a      	mov	r2, r1
 80059ec:	eb42 0303 	adc.w	r3, r2, r3
 80059f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	663b      	str	r3, [r7, #96]	; 0x60
 80059fc:	667a      	str	r2, [r7, #100]	; 0x64
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	008b      	lsls	r3, r1, #2
 8005a0e:	4641      	mov	r1, r8
 8005a10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a14:	4641      	mov	r1, r8
 8005a16:	008a      	lsls	r2, r1, #2
 8005a18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a1c:	f7fb f8e6 	bl	8000bec <__aeabi_uldivmod>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <UART_SetConfig+0x4e4>)
 8005a26:	fba3 1302 	umull	r1, r3, r3, r2
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	2164      	movs	r1, #100	; 0x64
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	3332      	adds	r3, #50	; 0x32
 8005a38:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <UART_SetConfig+0x4e4>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f003 020f 	and.w	r2, r3, #15
 8005a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4422      	add	r2, r4
 8005a4c:	609a      	str	r2, [r3, #8]
}
 8005a4e:	bf00      	nop
 8005a50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a54:	46bd      	mov	sp, r7
 8005a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5a:	bf00      	nop
 8005a5c:	51eb851f 	.word	0x51eb851f

08005a60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a72:	2b84      	cmp	r3, #132	; 0x84
 8005a74:	d005      	beq.n	8005a82 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005a76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	3303      	adds	r3, #3
 8005a80:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005a82:	68fb      	ldr	r3, [r7, #12]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a94:	f000 fee0 	bl	8006858 <vTaskStartScheduler>
  
  return osOK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa0:	b089      	sub	sp, #36	; 0x24
 8005aa2:	af04      	add	r7, sp, #16
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d020      	beq.n	8005af2 <osThreadCreate+0x54>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01c      	beq.n	8005af2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685c      	ldr	r4, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681d      	ldr	r5, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691e      	ldr	r6, [r3, #16]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff ffc8 	bl	8005a60 <makeFreeRtosPriority>
 8005ad0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ada:	9202      	str	r2, [sp, #8]
 8005adc:	9301      	str	r3, [sp, #4]
 8005ade:	9100      	str	r1, [sp, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	4632      	mov	r2, r6
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 fcee 	bl	80064c8 <xTaskCreateStatic>
 8005aec:	4603      	mov	r3, r0
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e01c      	b.n	8005b2c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685c      	ldr	r4, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005afe:	b29e      	uxth	r6, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff ffaa 	bl	8005a60 <makeFreeRtosPriority>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	f107 030c 	add.w	r3, r7, #12
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	9200      	str	r2, [sp, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	4632      	mov	r2, r6
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 fd30 	bl	8006582 <xTaskCreate>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d001      	beq.n	8005b2c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e000      	b.n	8005b2e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <osDelay+0x16>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	e000      	b.n	8005b4e <osDelay+0x18>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fe4e 	bl	80067f0 <vTaskDelay>
  
  return osOK;
 8005b54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f103 0208 	add.w	r2, r3, #8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295
 8005b76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f103 0208 	add.w	r2, r3, #8
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f103 0208 	add.w	r2, r3, #8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	601a      	str	r2, [r3, #0]
}
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d103      	bne.n	8005c20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e00c      	b.n	8005c3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3308      	adds	r3, #8
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	e002      	b.n	8005c2e <vListInsert+0x2e>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d2f6      	bcs.n	8005c28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	601a      	str	r2, [r3, #0]
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6892      	ldr	r2, [r2, #8]
 8005c88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6852      	ldr	r2, [r2, #4]
 8005c92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d103      	bne.n	8005ca6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	1e5a      	subs	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
	...

08005cc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10a      	bne.n	8005cf2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cee:	bf00      	nop
 8005cf0:	e7fe      	b.n	8005cf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cf2:	f001 fcff 	bl	80076f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	441a      	add	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	3b01      	subs	r3, #1
 8005d24:	68f9      	ldr	r1, [r7, #12]
 8005d26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	441a      	add	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	22ff      	movs	r2, #255	; 0xff
 8005d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d114      	bne.n	8005d72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01a      	beq.n	8005d86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3310      	adds	r3, #16
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 ffc1 	bl	8006cdc <xTaskRemoveFromEventList>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d012      	beq.n	8005d86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <xQueueGenericReset+0xcc>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	e009      	b.n	8005d86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3310      	adds	r3, #16
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fef1 	bl	8005b5e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3324      	adds	r3, #36	; 0x24
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff feec 	bl	8005b5e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d86:	f001 fce5 	bl	8007754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d8a:	2301      	movs	r3, #1
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	e000ed04 	.word	0xe000ed04

08005d98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08a      	sub	sp, #40	; 0x28
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	613b      	str	r3, [r7, #16]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	fb02 f303 	mul.w	r3, r2, r3
 8005dca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	3348      	adds	r3, #72	; 0x48
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 fd71 	bl	80078b8 <pvPortMalloc>
 8005dd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d011      	beq.n	8005e02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	3348      	adds	r3, #72	; 0x48
 8005de6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005df0:	79fa      	ldrb	r2, [r7, #7]
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	4613      	mov	r3, r2
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f805 	bl	8005e0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e02:	69bb      	ldr	r3, [r7, #24]
	}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d103      	bne.n	8005e28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e002      	b.n	8005e2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	69b8      	ldr	r0, [r7, #24]
 8005e3e:	f7ff ff43 	bl	8005cc8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00e      	beq.n	8005e76 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2100      	movs	r1, #0
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f81d 	bl	8005eb0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b086      	sub	sp, #24
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	4603      	mov	r3, r0
 8005e86:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	461a      	mov	r2, r3
 8005e94:	6939      	ldr	r1, [r7, #16]
 8005e96:	6978      	ldr	r0, [r7, #20]
 8005e98:	f7ff ff7e 	bl	8005d98 <xQueueGenericCreate>
 8005e9c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff ffd3 	bl	8005e4a <prvInitialiseMutex>

		return xNewQueue;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
	}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08e      	sub	sp, #56	; 0x38
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xQueueGenericSend+0x32>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <xQueueGenericSend+0x40>
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <xQueueGenericSend+0x44>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e000      	b.n	8005ef6 <xQueueGenericSend+0x46>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <xQueueGenericSend+0x60>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d103      	bne.n	8005f1e <xQueueGenericSend+0x6e>
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <xQueueGenericSend+0x72>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <xQueueGenericSend+0x74>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <xQueueGenericSend+0x8e>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	623b      	str	r3, [r7, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f3e:	f001 f889 	bl	8007054 <xTaskGetSchedulerState>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <xQueueGenericSend+0x9e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <xQueueGenericSend+0xa2>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <xQueueGenericSend+0xa4>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <xQueueGenericSend+0xbe>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	61fb      	str	r3, [r7, #28]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f6e:	f001 fbc1 	bl	80076f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d302      	bcc.n	8005f84 <xQueueGenericSend+0xd4>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d129      	bne.n	8005fd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f8a:	f000 f9b3 	bl	80062f4 <prvCopyDataToQueue>
 8005f8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d010      	beq.n	8005fba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	3324      	adds	r3, #36	; 0x24
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fe9d 	bl	8006cdc <xTaskRemoveFromEventList>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fa8:	4b3f      	ldr	r3, [pc, #252]	; (80060a8 <xQueueGenericSend+0x1f8>)
 8005faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	e00a      	b.n	8005fd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fc0:	4b39      	ldr	r3, [pc, #228]	; (80060a8 <xQueueGenericSend+0x1f8>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fd0:	f001 fbc0 	bl	8007754 <vPortExitCritical>
				return pdPASS;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e063      	b.n	80060a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fde:	f001 fbb9 	bl	8007754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e05c      	b.n	80060a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d106      	bne.n	8005ffa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fec:	f107 0314 	add.w	r3, r7, #20
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fed5 	bl	8006da0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ffa:	f001 fbab 	bl	8007754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ffe:	f000 fc8b 	bl	8006918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006002:	f001 fb77 	bl	80076f4 <vPortEnterCritical>
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800600c:	b25b      	sxtb	r3, r3
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d103      	bne.n	800601c <xQueueGenericSend+0x16c>
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006022:	b25b      	sxtb	r3, r3
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d103      	bne.n	8006032 <xQueueGenericSend+0x182>
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006032:	f001 fb8f 	bl	8007754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006036:	1d3a      	adds	r2, r7, #4
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	4611      	mov	r1, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fec4 	bl	8006dcc <xTaskCheckForTimeOut>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d124      	bne.n	8006094 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800604a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800604c:	f000 fa24 	bl	8006498 <prvIsQueueFull>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d018      	beq.n	8006088 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	3310      	adds	r3, #16
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4611      	mov	r1, r2
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fe18 	bl	8006c94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006066:	f000 f9af 	bl	80063c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800606a:	f000 fc63 	bl	8006934 <xTaskResumeAll>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	f47f af7c 	bne.w	8005f6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006076:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <xQueueGenericSend+0x1f8>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	e772      	b.n	8005f6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800608a:	f000 f99d 	bl	80063c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800608e:	f000 fc51 	bl	8006934 <xTaskResumeAll>
 8006092:	e76c      	b.n	8005f6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006096:	f000 f997 	bl	80063c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800609a:	f000 fc4b 	bl	8006934 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800609e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3738      	adds	r7, #56	; 0x38
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08e      	sub	sp, #56	; 0x38
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80060b6:	2300      	movs	r3, #0
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <xQueueSemaphoreTake+0x32>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	623b      	str	r3, [r7, #32]
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	61fb      	str	r3, [r7, #28]
}
 80060f8:	bf00      	nop
 80060fa:	e7fe      	b.n	80060fa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060fc:	f000 ffaa 	bl	8007054 <xTaskGetSchedulerState>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <xQueueSemaphoreTake+0x60>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <xQueueSemaphoreTake+0x64>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <xQueueSemaphoreTake+0x66>
 8006110:	2300      	movs	r3, #0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	61bb      	str	r3, [r7, #24]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800612c:	f001 fae2 	bl	80076f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	2b00      	cmp	r3, #0
 800613a:	d024      	beq.n	8006186 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	1e5a      	subs	r2, r3, #1
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d104      	bne.n	8006156 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800614c:	f001 f92a 	bl	80073a4 <pvTaskIncrementMutexHeldCount>
 8006150:	4602      	mov	r2, r0
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00f      	beq.n	800617e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	3310      	adds	r3, #16
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fdba 	bl	8006cdc <xTaskRemoveFromEventList>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800616e:	4b54      	ldr	r3, [pc, #336]	; (80062c0 <xQueueSemaphoreTake+0x214>)
 8006170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800617e:	f001 fae9 	bl	8007754 <vPortExitCritical>
				return pdPASS;
 8006182:	2301      	movs	r3, #1
 8006184:	e097      	b.n	80062b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d111      	bne.n	80061b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	617b      	str	r3, [r7, #20]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80061a8:	f001 fad4 	bl	8007754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061ac:	2300      	movs	r3, #0
 80061ae:	e082      	b.n	80062b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061b6:	f107 030c 	add.w	r3, r7, #12
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fdf0 	bl	8006da0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061c4:	f001 fac6 	bl	8007754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061c8:	f000 fba6 	bl	8006918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061cc:	f001 fa92 	bl	80076f4 <vPortEnterCritical>
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d6:	b25b      	sxtb	r3, r3
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d103      	bne.n	80061e6 <xQueueSemaphoreTake+0x13a>
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ec:	b25b      	sxtb	r3, r3
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d103      	bne.n	80061fc <xQueueSemaphoreTake+0x150>
 80061f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061fc:	f001 faaa 	bl	8007754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006200:	463a      	mov	r2, r7
 8006202:	f107 030c 	add.w	r3, r7, #12
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fddf 	bl	8006dcc <xTaskCheckForTimeOut>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d132      	bne.n	800627a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006216:	f000 f929 	bl	800646c <prvIsQueueEmpty>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d026      	beq.n	800626e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d109      	bne.n	800623c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006228:	f001 fa64 	bl	80076f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	4618      	mov	r0, r3
 8006232:	f000 ff2d 	bl	8007090 <xTaskPriorityInherit>
 8006236:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006238:	f001 fa8c 	bl	8007754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	3324      	adds	r3, #36	; 0x24
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fd25 	bl	8006c94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800624a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800624c:	f000 f8bc 	bl	80063c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006250:	f000 fb70 	bl	8006934 <xTaskResumeAll>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	f47f af68 	bne.w	800612c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800625c:	4b18      	ldr	r3, [pc, #96]	; (80062c0 <xQueueSemaphoreTake+0x214>)
 800625e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	e75e      	b.n	800612c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800626e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006270:	f000 f8aa 	bl	80063c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006274:	f000 fb5e 	bl	8006934 <xTaskResumeAll>
 8006278:	e758      	b.n	800612c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800627a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800627c:	f000 f8a4 	bl	80063c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006280:	f000 fb58 	bl	8006934 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006286:	f000 f8f1 	bl	800646c <prvIsQueueEmpty>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	f43f af4d 	beq.w	800612c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00d      	beq.n	80062b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006298:	f001 fa2c 	bl	80076f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800629c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800629e:	f000 f811 	bl	80062c4 <prvGetDisinheritPriorityAfterTimeout>
 80062a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 ffec 	bl	8007288 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80062b0:	f001 fa50 	bl	8007754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3738      	adds	r7, #56	; 0x38
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d006      	beq.n	80062e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f1c3 0307 	rsb	r3, r3, #7
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e001      	b.n	80062e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80062e6:	68fb      	ldr	r3, [r7, #12]
	}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10d      	bne.n	800632e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d14d      	bne.n	80063b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	4618      	mov	r0, r3
 8006320:	f000 ff2c 	bl	800717c <xTaskPriorityDisinherit>
 8006324:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	609a      	str	r2, [r3, #8]
 800632c:	e043      	b.n	80063b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d119      	bne.n	8006368 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6858      	ldr	r0, [r3, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	461a      	mov	r2, r3
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	f001 feac 	bl	800809c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	441a      	add	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	d32b      	bcc.n	80063b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	e026      	b.n	80063b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68d8      	ldr	r0, [r3, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	461a      	mov	r2, r3
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	f001 fe92 	bl	800809c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	425b      	negs	r3, r3
 8006382:	441a      	add	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d207      	bcs.n	80063a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	425b      	negs	r3, r3
 800639e:	441a      	add	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d105      	bne.n	80063b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80063be:	697b      	ldr	r3, [r7, #20]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063d0:	f001 f990 	bl	80076f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063dc:	e011      	b.n	8006402 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d012      	beq.n	800640c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3324      	adds	r3, #36	; 0x24
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fc76 	bl	8006cdc <xTaskRemoveFromEventList>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063f6:	f000 fd4b 	bl	8006e90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006406:	2b00      	cmp	r3, #0
 8006408:	dce9      	bgt.n	80063de <prvUnlockQueue+0x16>
 800640a:	e000      	b.n	800640e <prvUnlockQueue+0x46>
					break;
 800640c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	22ff      	movs	r2, #255	; 0xff
 8006412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006416:	f001 f99d 	bl	8007754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800641a:	f001 f96b 	bl	80076f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006424:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006426:	e011      	b.n	800644c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d012      	beq.n	8006456 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3310      	adds	r3, #16
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fc51 	bl	8006cdc <xTaskRemoveFromEventList>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006440:	f000 fd26 	bl	8006e90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	3b01      	subs	r3, #1
 8006448:	b2db      	uxtb	r3, r3
 800644a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800644c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006450:	2b00      	cmp	r3, #0
 8006452:	dce9      	bgt.n	8006428 <prvUnlockQueue+0x60>
 8006454:	e000      	b.n	8006458 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006456:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	22ff      	movs	r2, #255	; 0xff
 800645c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006460:	f001 f978 	bl	8007754 <vPortExitCritical>
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006474:	f001 f93e 	bl	80076f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006480:	2301      	movs	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e001      	b.n	800648a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800648a:	f001 f963 	bl	8007754 <vPortExitCritical>

	return xReturn;
 800648e:	68fb      	ldr	r3, [r7, #12]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064a0:	f001 f928 	bl	80076f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d102      	bne.n	80064b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e001      	b.n	80064ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064ba:	f001 f94b 	bl	8007754 <vPortExitCritical>

	return xReturn;
 80064be:	68fb      	ldr	r3, [r7, #12]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08e      	sub	sp, #56	; 0x38
 80064cc:	af04      	add	r7, sp, #16
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	623b      	str	r3, [r7, #32]
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <xTaskCreateStatic+0x46>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	61fb      	str	r3, [r7, #28]
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800650e:	2354      	movs	r3, #84	; 0x54
 8006510:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b54      	cmp	r3, #84	; 0x54
 8006516:	d00a      	beq.n	800652e <xTaskCreateStatic+0x66>
	__asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	61bb      	str	r3, [r7, #24]
}
 800652a:	bf00      	nop
 800652c:	e7fe      	b.n	800652c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800652e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01e      	beq.n	8006574 <xTaskCreateStatic+0xac>
 8006536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01b      	beq.n	8006574 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006544:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	2202      	movs	r2, #2
 800654a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800654e:	2300      	movs	r3, #0
 8006550:	9303      	str	r3, [sp, #12]
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	9302      	str	r3, [sp, #8]
 8006556:	f107 0314 	add.w	r3, r7, #20
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 f850 	bl	800660c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800656c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800656e:	f000 f8d5 	bl	800671c <prvAddNewTaskToReadyList>
 8006572:	e001      	b.n	8006578 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006578:	697b      	ldr	r3, [r7, #20]
	}
 800657a:	4618      	mov	r0, r3
 800657c:	3728      	adds	r7, #40	; 0x28
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006582:	b580      	push	{r7, lr}
 8006584:	b08c      	sub	sp, #48	; 0x30
 8006586:	af04      	add	r7, sp, #16
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	603b      	str	r3, [r7, #0]
 800658e:	4613      	mov	r3, r2
 8006590:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006592:	88fb      	ldrh	r3, [r7, #6]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4618      	mov	r0, r3
 8006598:	f001 f98e 	bl	80078b8 <pvPortMalloc>
 800659c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00e      	beq.n	80065c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065a4:	2054      	movs	r0, #84	; 0x54
 80065a6:	f001 f987 	bl	80078b8 <pvPortMalloc>
 80065aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	631a      	str	r2, [r3, #48]	; 0x30
 80065b8:	e005      	b.n	80065c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065ba:	6978      	ldr	r0, [r7, #20]
 80065bc:	f001 fa48 	bl	8007a50 <vPortFree>
 80065c0:	e001      	b.n	80065c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d017      	beq.n	80065fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065d4:	88fa      	ldrh	r2, [r7, #6]
 80065d6:	2300      	movs	r3, #0
 80065d8:	9303      	str	r3, [sp, #12]
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	9302      	str	r3, [sp, #8]
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 f80e 	bl	800660c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065f0:	69f8      	ldr	r0, [r7, #28]
 80065f2:	f000 f893 	bl	800671c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065f6:	2301      	movs	r3, #1
 80065f8:	61bb      	str	r3, [r7, #24]
 80065fa:	e002      	b.n	8006602 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006600:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006602:	69bb      	ldr	r3, [r7, #24]
	}
 8006604:	4618      	mov	r0, r3
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006624:	3b01      	subs	r3, #1
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	f023 0307 	bic.w	r3, r3, #7
 8006632:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <prvInitialiseNewTask+0x48>
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	617b      	str	r3, [r7, #20]
}
 8006650:	bf00      	nop
 8006652:	e7fe      	b.n	8006652 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01f      	beq.n	800669a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800665a:	2300      	movs	r3, #0
 800665c:	61fb      	str	r3, [r7, #28]
 800665e:	e012      	b.n	8006686 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	7819      	ldrb	r1, [r3, #0]
 8006668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	3334      	adds	r3, #52	; 0x34
 8006670:	460a      	mov	r2, r1
 8006672:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d006      	beq.n	800668e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	3301      	adds	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	2b0f      	cmp	r3, #15
 800668a:	d9e9      	bls.n	8006660 <prvInitialiseNewTask+0x54>
 800668c:	e000      	b.n	8006690 <prvInitialiseNewTask+0x84>
			{
				break;
 800668e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006698:	e003      	b.n	80066a2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	2b06      	cmp	r3, #6
 80066a6:	d901      	bls.n	80066ac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066a8:	2306      	movs	r3, #6
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	2200      	movs	r2, #0
 80066bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	3304      	adds	r3, #4
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff fa6b 	bl	8005b9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	3318      	adds	r3, #24
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff fa66 	bl	8005b9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	f1c3 0207 	rsb	r2, r3, #7
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	2200      	movs	r2, #0
 80066ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	68f9      	ldr	r1, [r7, #12]
 80066fa:	69b8      	ldr	r0, [r7, #24]
 80066fc:	f000 fecc 	bl	8007498 <pxPortInitialiseStack>
 8006700:	4602      	mov	r2, r0
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006712:	bf00      	nop
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006724:	f000 ffe6 	bl	80076f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006728:	4b2a      	ldr	r3, [pc, #168]	; (80067d4 <prvAddNewTaskToReadyList+0xb8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3301      	adds	r3, #1
 800672e:	4a29      	ldr	r2, [pc, #164]	; (80067d4 <prvAddNewTaskToReadyList+0xb8>)
 8006730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006732:	4b29      	ldr	r3, [pc, #164]	; (80067d8 <prvAddNewTaskToReadyList+0xbc>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800673a:	4a27      	ldr	r2, [pc, #156]	; (80067d8 <prvAddNewTaskToReadyList+0xbc>)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006740:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <prvAddNewTaskToReadyList+0xb8>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d110      	bne.n	800676a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006748:	f000 fbc6 	bl	8006ed8 <prvInitialiseTaskLists>
 800674c:	e00d      	b.n	800676a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800674e:	4b23      	ldr	r3, [pc, #140]	; (80067dc <prvAddNewTaskToReadyList+0xc0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006756:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <prvAddNewTaskToReadyList+0xbc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	429a      	cmp	r2, r3
 8006762:	d802      	bhi.n	800676a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006764:	4a1c      	ldr	r2, [pc, #112]	; (80067d8 <prvAddNewTaskToReadyList+0xbc>)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800676a:	4b1d      	ldr	r3, [pc, #116]	; (80067e0 <prvAddNewTaskToReadyList+0xc4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3301      	adds	r3, #1
 8006770:	4a1b      	ldr	r2, [pc, #108]	; (80067e0 <prvAddNewTaskToReadyList+0xc4>)
 8006772:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	2201      	movs	r2, #1
 800677a:	409a      	lsls	r2, r3
 800677c:	4b19      	ldr	r3, [pc, #100]	; (80067e4 <prvAddNewTaskToReadyList+0xc8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4313      	orrs	r3, r2
 8006782:	4a18      	ldr	r2, [pc, #96]	; (80067e4 <prvAddNewTaskToReadyList+0xc8>)
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <prvAddNewTaskToReadyList+0xcc>)
 8006794:	441a      	add	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	4619      	mov	r1, r3
 800679c:	4610      	mov	r0, r2
 800679e:	f7ff fa0b 	bl	8005bb8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067a2:	f000 ffd7 	bl	8007754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <prvAddNewTaskToReadyList+0xc0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00e      	beq.n	80067cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067ae:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <prvAddNewTaskToReadyList+0xbc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d207      	bcs.n	80067cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067bc:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <prvAddNewTaskToReadyList+0xd0>)
 80067be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067cc:	bf00      	nop
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20002118 	.word	0x20002118
 80067d8:	20002018 	.word	0x20002018
 80067dc:	20002124 	.word	0x20002124
 80067e0:	20002134 	.word	0x20002134
 80067e4:	20002120 	.word	0x20002120
 80067e8:	2000201c 	.word	0x2000201c
 80067ec:	e000ed04 	.word	0xe000ed04

080067f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d017      	beq.n	8006832 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006802:	4b13      	ldr	r3, [pc, #76]	; (8006850 <vTaskDelay+0x60>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <vTaskDelay+0x30>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	60bb      	str	r3, [r7, #8]
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006820:	f000 f87a 	bl	8006918 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006824:	2100      	movs	r1, #0
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fdd0 	bl	80073cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800682c:	f000 f882 	bl	8006934 <xTaskResumeAll>
 8006830:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d107      	bne.n	8006848 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006838:	4b06      	ldr	r3, [pc, #24]	; (8006854 <vTaskDelay+0x64>)
 800683a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20002140 	.word	0x20002140
 8006854:	e000ed04 	.word	0xe000ed04

08006858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08a      	sub	sp, #40	; 0x28
 800685c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800685e:	2300      	movs	r3, #0
 8006860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006862:	2300      	movs	r3, #0
 8006864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006866:	463a      	mov	r2, r7
 8006868:	1d39      	adds	r1, r7, #4
 800686a:	f107 0308 	add.w	r3, r7, #8
 800686e:	4618      	mov	r0, r3
 8006870:	f7fb fc3e 	bl	80020f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	9202      	str	r2, [sp, #8]
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	2300      	movs	r3, #0
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	2300      	movs	r3, #0
 8006884:	460a      	mov	r2, r1
 8006886:	491e      	ldr	r1, [pc, #120]	; (8006900 <vTaskStartScheduler+0xa8>)
 8006888:	481e      	ldr	r0, [pc, #120]	; (8006904 <vTaskStartScheduler+0xac>)
 800688a:	f7ff fe1d 	bl	80064c8 <xTaskCreateStatic>
 800688e:	4603      	mov	r3, r0
 8006890:	4a1d      	ldr	r2, [pc, #116]	; (8006908 <vTaskStartScheduler+0xb0>)
 8006892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006894:	4b1c      	ldr	r3, [pc, #112]	; (8006908 <vTaskStartScheduler+0xb0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800689c:	2301      	movs	r3, #1
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	e001      	b.n	80068a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d116      	bne.n	80068da <vTaskStartScheduler+0x82>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	613b      	str	r3, [r7, #16]
}
 80068be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068c0:	4b12      	ldr	r3, [pc, #72]	; (800690c <vTaskStartScheduler+0xb4>)
 80068c2:	f04f 32ff 	mov.w	r2, #4294967295
 80068c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068c8:	4b11      	ldr	r3, [pc, #68]	; (8006910 <vTaskStartScheduler+0xb8>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068ce:	4b11      	ldr	r3, [pc, #68]	; (8006914 <vTaskStartScheduler+0xbc>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068d4:	f000 fe6c 	bl	80075b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068d8:	e00e      	b.n	80068f8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e0:	d10a      	bne.n	80068f8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	60fb      	str	r3, [r7, #12]
}
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <vTaskStartScheduler+0x9e>
}
 80068f8:	bf00      	nop
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	0800b1f0 	.word	0x0800b1f0
 8006904:	08006ea9 	.word	0x08006ea9
 8006908:	2000213c 	.word	0x2000213c
 800690c:	20002138 	.word	0x20002138
 8006910:	20002124 	.word	0x20002124
 8006914:	2000211c 	.word	0x2000211c

08006918 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800691c:	4b04      	ldr	r3, [pc, #16]	; (8006930 <vTaskSuspendAll+0x18>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	4a03      	ldr	r2, [pc, #12]	; (8006930 <vTaskSuspendAll+0x18>)
 8006924:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006926:	bf00      	nop
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	20002140 	.word	0x20002140

08006934 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006942:	4b41      	ldr	r3, [pc, #260]	; (8006a48 <xTaskResumeAll+0x114>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <xTaskResumeAll+0x2c>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	603b      	str	r3, [r7, #0]
}
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006960:	f000 fec8 	bl	80076f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006964:	4b38      	ldr	r3, [pc, #224]	; (8006a48 <xTaskResumeAll+0x114>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3b01      	subs	r3, #1
 800696a:	4a37      	ldr	r2, [pc, #220]	; (8006a48 <xTaskResumeAll+0x114>)
 800696c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800696e:	4b36      	ldr	r3, [pc, #216]	; (8006a48 <xTaskResumeAll+0x114>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d161      	bne.n	8006a3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006976:	4b35      	ldr	r3, [pc, #212]	; (8006a4c <xTaskResumeAll+0x118>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d05d      	beq.n	8006a3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800697e:	e02e      	b.n	80069de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006980:	4b33      	ldr	r3, [pc, #204]	; (8006a50 <xTaskResumeAll+0x11c>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3318      	adds	r3, #24
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff f970 	bl	8005c72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3304      	adds	r3, #4
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff f96b 	bl	8005c72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	2201      	movs	r2, #1
 80069a2:	409a      	lsls	r2, r3
 80069a4:	4b2b      	ldr	r3, [pc, #172]	; (8006a54 <xTaskResumeAll+0x120>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	4a2a      	ldr	r2, [pc, #168]	; (8006a54 <xTaskResumeAll+0x120>)
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4a27      	ldr	r2, [pc, #156]	; (8006a58 <xTaskResumeAll+0x124>)
 80069bc:	441a      	add	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3304      	adds	r3, #4
 80069c2:	4619      	mov	r1, r3
 80069c4:	4610      	mov	r0, r2
 80069c6:	f7ff f8f7 	bl	8005bb8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ce:	4b23      	ldr	r3, [pc, #140]	; (8006a5c <xTaskResumeAll+0x128>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d302      	bcc.n	80069de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80069d8:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <xTaskResumeAll+0x12c>)
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069de:	4b1c      	ldr	r3, [pc, #112]	; (8006a50 <xTaskResumeAll+0x11c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1cc      	bne.n	8006980 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069ec:	f000 fb12 	bl	8007014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069f0:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <xTaskResumeAll+0x130>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d010      	beq.n	8006a1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069fc:	f000 f836 	bl	8006a6c <xTaskIncrementTick>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a06:	4b16      	ldr	r3, [pc, #88]	; (8006a60 <xTaskResumeAll+0x12c>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1f1      	bne.n	80069fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006a18:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <xTaskResumeAll+0x130>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a1e:	4b10      	ldr	r3, [pc, #64]	; (8006a60 <xTaskResumeAll+0x12c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a26:	2301      	movs	r3, #1
 8006a28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <xTaskResumeAll+0x134>)
 8006a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a3a:	f000 fe8b 	bl	8007754 <vPortExitCritical>

	return xAlreadyYielded;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20002140 	.word	0x20002140
 8006a4c:	20002118 	.word	0x20002118
 8006a50:	200020d8 	.word	0x200020d8
 8006a54:	20002120 	.word	0x20002120
 8006a58:	2000201c 	.word	0x2000201c
 8006a5c:	20002018 	.word	0x20002018
 8006a60:	2000212c 	.word	0x2000212c
 8006a64:	20002128 	.word	0x20002128
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a76:	4b4e      	ldr	r3, [pc, #312]	; (8006bb0 <xTaskIncrementTick+0x144>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 808e 	bne.w	8006b9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a80:	4b4c      	ldr	r3, [pc, #304]	; (8006bb4 <xTaskIncrementTick+0x148>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3301      	adds	r3, #1
 8006a86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a88:	4a4a      	ldr	r2, [pc, #296]	; (8006bb4 <xTaskIncrementTick+0x148>)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d120      	bne.n	8006ad6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a94:	4b48      	ldr	r3, [pc, #288]	; (8006bb8 <xTaskIncrementTick+0x14c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	603b      	str	r3, [r7, #0]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <xTaskIncrementTick+0x46>
 8006ab4:	4b40      	ldr	r3, [pc, #256]	; (8006bb8 <xTaskIncrementTick+0x14c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	4b40      	ldr	r3, [pc, #256]	; (8006bbc <xTaskIncrementTick+0x150>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a3e      	ldr	r2, [pc, #248]	; (8006bb8 <xTaskIncrementTick+0x14c>)
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	4a3e      	ldr	r2, [pc, #248]	; (8006bbc <xTaskIncrementTick+0x150>)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	4b3d      	ldr	r3, [pc, #244]	; (8006bc0 <xTaskIncrementTick+0x154>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	4a3c      	ldr	r2, [pc, #240]	; (8006bc0 <xTaskIncrementTick+0x154>)
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	f000 fa9f 	bl	8007014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ad6:	4b3b      	ldr	r3, [pc, #236]	; (8006bc4 <xTaskIncrementTick+0x158>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d348      	bcc.n	8006b72 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ae0:	4b35      	ldr	r3, [pc, #212]	; (8006bb8 <xTaskIncrementTick+0x14c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aea:	4b36      	ldr	r3, [pc, #216]	; (8006bc4 <xTaskIncrementTick+0x158>)
 8006aec:	f04f 32ff 	mov.w	r2, #4294967295
 8006af0:	601a      	str	r2, [r3, #0]
					break;
 8006af2:	e03e      	b.n	8006b72 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af4:	4b30      	ldr	r3, [pc, #192]	; (8006bb8 <xTaskIncrementTick+0x14c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d203      	bcs.n	8006b14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b0c:	4a2d      	ldr	r2, [pc, #180]	; (8006bc4 <xTaskIncrementTick+0x158>)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b12:	e02e      	b.n	8006b72 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff f8aa 	bl	8005c72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	3318      	adds	r3, #24
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff f8a1 	bl	8005c72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b34:	2201      	movs	r2, #1
 8006b36:	409a      	lsls	r2, r3
 8006b38:	4b23      	ldr	r3, [pc, #140]	; (8006bc8 <xTaskIncrementTick+0x15c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	4a22      	ldr	r2, [pc, #136]	; (8006bc8 <xTaskIncrementTick+0x15c>)
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4a1f      	ldr	r2, [pc, #124]	; (8006bcc <xTaskIncrementTick+0x160>)
 8006b50:	441a      	add	r2, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f7ff f82d 	bl	8005bb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b62:	4b1b      	ldr	r3, [pc, #108]	; (8006bd0 <xTaskIncrementTick+0x164>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d3b9      	bcc.n	8006ae0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b70:	e7b6      	b.n	8006ae0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b72:	4b17      	ldr	r3, [pc, #92]	; (8006bd0 <xTaskIncrementTick+0x164>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	4914      	ldr	r1, [pc, #80]	; (8006bcc <xTaskIncrementTick+0x160>)
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d901      	bls.n	8006b8e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b8e:	4b11      	ldr	r3, [pc, #68]	; (8006bd4 <xTaskIncrementTick+0x168>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006b96:	2301      	movs	r3, #1
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	e004      	b.n	8006ba6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b9c:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <xTaskIncrementTick+0x16c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	4a0d      	ldr	r2, [pc, #52]	; (8006bd8 <xTaskIncrementTick+0x16c>)
 8006ba4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ba6:	697b      	ldr	r3, [r7, #20]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20002140 	.word	0x20002140
 8006bb4:	2000211c 	.word	0x2000211c
 8006bb8:	200020d0 	.word	0x200020d0
 8006bbc:	200020d4 	.word	0x200020d4
 8006bc0:	20002130 	.word	0x20002130
 8006bc4:	20002138 	.word	0x20002138
 8006bc8:	20002120 	.word	0x20002120
 8006bcc:	2000201c 	.word	0x2000201c
 8006bd0:	20002018 	.word	0x20002018
 8006bd4:	2000212c 	.word	0x2000212c
 8006bd8:	20002128 	.word	0x20002128

08006bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006be2:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <vTaskSwitchContext+0xa4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bea:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <vTaskSwitchContext+0xa8>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bf0:	e03f      	b.n	8006c72 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006bf2:	4b24      	ldr	r3, [pc, #144]	; (8006c84 <vTaskSwitchContext+0xa8>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf8:	4b23      	ldr	r3, [pc, #140]	; (8006c88 <vTaskSwitchContext+0xac>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	fab3 f383 	clz	r3, r3
 8006c04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	f1c3 031f 	rsb	r3, r3, #31
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	491f      	ldr	r1, [pc, #124]	; (8006c8c <vTaskSwitchContext+0xb0>)
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	607b      	str	r3, [r7, #4]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <vTaskSwitchContext+0x5a>
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4a12      	ldr	r2, [pc, #72]	; (8006c8c <vTaskSwitchContext+0xb0>)
 8006c44:	4413      	add	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d104      	bne.n	8006c68 <vTaskSwitchContext+0x8c>
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	4a08      	ldr	r2, [pc, #32]	; (8006c90 <vTaskSwitchContext+0xb4>)
 8006c70:	6013      	str	r3, [r2, #0]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	20002140 	.word	0x20002140
 8006c84:	2000212c 	.word	0x2000212c
 8006c88:	20002120 	.word	0x20002120
 8006c8c:	2000201c 	.word	0x2000201c
 8006c90:	20002018 	.word	0x20002018

08006c94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	60fb      	str	r3, [r7, #12]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cba:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <vTaskPlaceOnEventList+0x44>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3318      	adds	r3, #24
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7fe ff9c 	bl	8005c00 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cc8:	2101      	movs	r1, #1
 8006cca:	6838      	ldr	r0, [r7, #0]
 8006ccc:	f000 fb7e 	bl	80073cc <prvAddCurrentTaskToDelayedList>
}
 8006cd0:	bf00      	nop
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20002018 	.word	0x20002018

08006cdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60fb      	str	r3, [r7, #12]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	3318      	adds	r3, #24
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fe ffb0 	bl	8005c72 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d12:	4b1d      	ldr	r3, [pc, #116]	; (8006d88 <xTaskRemoveFromEventList+0xac>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d11c      	bne.n	8006d54 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe ffa7 	bl	8005c72 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	2201      	movs	r2, #1
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	4b17      	ldr	r3, [pc, #92]	; (8006d8c <xTaskRemoveFromEventList+0xb0>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <xTaskRemoveFromEventList+0xb0>)
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <xTaskRemoveFromEventList+0xb4>)
 8006d44:	441a      	add	r2, r3
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f7fe ff33 	bl	8005bb8 <vListInsertEnd>
 8006d52:	e005      	b.n	8006d60 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	3318      	adds	r3, #24
 8006d58:	4619      	mov	r1, r3
 8006d5a:	480e      	ldr	r0, [pc, #56]	; (8006d94 <xTaskRemoveFromEventList+0xb8>)
 8006d5c:	f7fe ff2c 	bl	8005bb8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d64:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <xTaskRemoveFromEventList+0xbc>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d905      	bls.n	8006d7a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d72:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <xTaskRemoveFromEventList+0xc0>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	e001      	b.n	8006d7e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d7e:	697b      	ldr	r3, [r7, #20]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20002140 	.word	0x20002140
 8006d8c:	20002120 	.word	0x20002120
 8006d90:	2000201c 	.word	0x2000201c
 8006d94:	200020d8 	.word	0x200020d8
 8006d98:	20002018 	.word	0x20002018
 8006d9c:	2000212c 	.word	0x2000212c

08006da0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <vTaskInternalSetTimeOutState+0x24>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006db0:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <vTaskInternalSetTimeOutState+0x28>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	605a      	str	r2, [r3, #4]
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	20002130 	.word	0x20002130
 8006dc8:	2000211c 	.word	0x2000211c

08006dcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b088      	sub	sp, #32
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	613b      	str	r3, [r7, #16]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	60fb      	str	r3, [r7, #12]
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e0e:	f000 fc71 	bl	80076f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e12:	4b1d      	ldr	r3, [pc, #116]	; (8006e88 <xTaskCheckForTimeOut+0xbc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	d102      	bne.n	8006e32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	e023      	b.n	8006e7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b15      	ldr	r3, [pc, #84]	; (8006e8c <xTaskCheckForTimeOut+0xc0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d007      	beq.n	8006e4e <xTaskCheckForTimeOut+0x82>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d302      	bcc.n	8006e4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	e015      	b.n	8006e7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d20b      	bcs.n	8006e70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff ff9b 	bl	8006da0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
 8006e6e:	e004      	b.n	8006e7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e76:	2301      	movs	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e7a:	f000 fc6b 	bl	8007754 <vPortExitCritical>

	return xReturn;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	2000211c 	.word	0x2000211c
 8006e8c:	20002130 	.word	0x20002130

08006e90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e94:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <vTaskMissedYield+0x14>)
 8006e96:	2201      	movs	r2, #1
 8006e98:	601a      	str	r2, [r3, #0]
}
 8006e9a:	bf00      	nop
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	2000212c 	.word	0x2000212c

08006ea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006eb0:	f000 f852 	bl	8006f58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006eb4:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <prvIdleTask+0x28>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d9f9      	bls.n	8006eb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <prvIdleTask+0x2c>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ecc:	e7f0      	b.n	8006eb0 <prvIdleTask+0x8>
 8006ece:	bf00      	nop
 8006ed0:	2000201c 	.word	0x2000201c
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ede:	2300      	movs	r3, #0
 8006ee0:	607b      	str	r3, [r7, #4]
 8006ee2:	e00c      	b.n	8006efe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4a12      	ldr	r2, [pc, #72]	; (8006f38 <prvInitialiseTaskLists+0x60>)
 8006ef0:	4413      	add	r3, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe fe33 	bl	8005b5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3301      	adds	r3, #1
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b06      	cmp	r3, #6
 8006f02:	d9ef      	bls.n	8006ee4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f04:	480d      	ldr	r0, [pc, #52]	; (8006f3c <prvInitialiseTaskLists+0x64>)
 8006f06:	f7fe fe2a 	bl	8005b5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f0a:	480d      	ldr	r0, [pc, #52]	; (8006f40 <prvInitialiseTaskLists+0x68>)
 8006f0c:	f7fe fe27 	bl	8005b5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f10:	480c      	ldr	r0, [pc, #48]	; (8006f44 <prvInitialiseTaskLists+0x6c>)
 8006f12:	f7fe fe24 	bl	8005b5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f16:	480c      	ldr	r0, [pc, #48]	; (8006f48 <prvInitialiseTaskLists+0x70>)
 8006f18:	f7fe fe21 	bl	8005b5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f1c:	480b      	ldr	r0, [pc, #44]	; (8006f4c <prvInitialiseTaskLists+0x74>)
 8006f1e:	f7fe fe1e 	bl	8005b5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f22:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <prvInitialiseTaskLists+0x78>)
 8006f24:	4a05      	ldr	r2, [pc, #20]	; (8006f3c <prvInitialiseTaskLists+0x64>)
 8006f26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <prvInitialiseTaskLists+0x7c>)
 8006f2a:	4a05      	ldr	r2, [pc, #20]	; (8006f40 <prvInitialiseTaskLists+0x68>)
 8006f2c:	601a      	str	r2, [r3, #0]
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	2000201c 	.word	0x2000201c
 8006f3c:	200020a8 	.word	0x200020a8
 8006f40:	200020bc 	.word	0x200020bc
 8006f44:	200020d8 	.word	0x200020d8
 8006f48:	200020ec 	.word	0x200020ec
 8006f4c:	20002104 	.word	0x20002104
 8006f50:	200020d0 	.word	0x200020d0
 8006f54:	200020d4 	.word	0x200020d4

08006f58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f5e:	e019      	b.n	8006f94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f60:	f000 fbc8 	bl	80076f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f64:	4b10      	ldr	r3, [pc, #64]	; (8006fa8 <prvCheckTasksWaitingTermination+0x50>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fe7e 	bl	8005c72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f76:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <prvCheckTasksWaitingTermination+0x54>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	4a0b      	ldr	r2, [pc, #44]	; (8006fac <prvCheckTasksWaitingTermination+0x54>)
 8006f7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <prvCheckTasksWaitingTermination+0x58>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	4a0a      	ldr	r2, [pc, #40]	; (8006fb0 <prvCheckTasksWaitingTermination+0x58>)
 8006f88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f8a:	f000 fbe3 	bl	8007754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f810 	bl	8006fb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f94:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <prvCheckTasksWaitingTermination+0x58>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e1      	bne.n	8006f60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	200020ec 	.word	0x200020ec
 8006fac:	20002118 	.word	0x20002118
 8006fb0:	20002100 	.word	0x20002100

08006fb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d108      	bne.n	8006fd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fd40 	bl	8007a50 <vPortFree>
				vPortFree( pxTCB );
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fd3d 	bl	8007a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fd6:	e018      	b.n	800700a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d103      	bne.n	8006fea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fd34 	bl	8007a50 <vPortFree>
	}
 8006fe8:	e00f      	b.n	800700a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d00a      	beq.n	800700a <prvDeleteTCB+0x56>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	60fb      	str	r3, [r7, #12]
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <prvDeleteTCB+0x54>
	}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800701a:	4b0c      	ldr	r3, [pc, #48]	; (800704c <prvResetNextTaskUnblockTime+0x38>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007024:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <prvResetNextTaskUnblockTime+0x3c>)
 8007026:	f04f 32ff 	mov.w	r2, #4294967295
 800702a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800702c:	e008      	b.n	8007040 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800702e:	4b07      	ldr	r3, [pc, #28]	; (800704c <prvResetNextTaskUnblockTime+0x38>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	4a04      	ldr	r2, [pc, #16]	; (8007050 <prvResetNextTaskUnblockTime+0x3c>)
 800703e:	6013      	str	r3, [r2, #0]
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	200020d0 	.word	0x200020d0
 8007050:	20002138 	.word	0x20002138

08007054 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800705a:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <xTaskGetSchedulerState+0x34>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d102      	bne.n	8007068 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007062:	2301      	movs	r3, #1
 8007064:	607b      	str	r3, [r7, #4]
 8007066:	e008      	b.n	800707a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007068:	4b08      	ldr	r3, [pc, #32]	; (800708c <xTaskGetSchedulerState+0x38>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007070:	2302      	movs	r3, #2
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	e001      	b.n	800707a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007076:	2300      	movs	r3, #0
 8007078:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800707a:	687b      	ldr	r3, [r7, #4]
	}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	20002124 	.word	0x20002124
 800708c:	20002140 	.word	0x20002140

08007090 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d05e      	beq.n	8007164 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070aa:	4b31      	ldr	r3, [pc, #196]	; (8007170 <xTaskPriorityInherit+0xe0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d24e      	bcs.n	8007152 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	db06      	blt.n	80070ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070bc:	4b2c      	ldr	r3, [pc, #176]	; (8007170 <xTaskPriorityInherit+0xe0>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	f1c3 0207 	rsb	r2, r3, #7
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	6959      	ldr	r1, [r3, #20]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4a26      	ldr	r2, [pc, #152]	; (8007174 <xTaskPriorityInherit+0xe4>)
 80070dc:	4413      	add	r3, r2
 80070de:	4299      	cmp	r1, r3
 80070e0:	d12f      	bne.n	8007142 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	3304      	adds	r3, #4
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fdc3 	bl	8005c72 <uxListRemove>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	2201      	movs	r2, #1
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	43da      	mvns	r2, r3
 80070fe:	4b1e      	ldr	r3, [pc, #120]	; (8007178 <xTaskPriorityInherit+0xe8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4013      	ands	r3, r2
 8007104:	4a1c      	ldr	r2, [pc, #112]	; (8007178 <xTaskPriorityInherit+0xe8>)
 8007106:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007108:	4b19      	ldr	r3, [pc, #100]	; (8007170 <xTaskPriorityInherit+0xe0>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	2201      	movs	r2, #1
 8007118:	409a      	lsls	r2, r3
 800711a:	4b17      	ldr	r3, [pc, #92]	; (8007178 <xTaskPriorityInherit+0xe8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4313      	orrs	r3, r2
 8007120:	4a15      	ldr	r2, [pc, #84]	; (8007178 <xTaskPriorityInherit+0xe8>)
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4a10      	ldr	r2, [pc, #64]	; (8007174 <xTaskPriorityInherit+0xe4>)
 8007132:	441a      	add	r2, r3
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	3304      	adds	r3, #4
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f7fe fd3c 	bl	8005bb8 <vListInsertEnd>
 8007140:	e004      	b.n	800714c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007142:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <xTaskPriorityInherit+0xe0>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800714c:	2301      	movs	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e008      	b.n	8007164 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007156:	4b06      	ldr	r3, [pc, #24]	; (8007170 <xTaskPriorityInherit+0xe0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	429a      	cmp	r2, r3
 800715e:	d201      	bcs.n	8007164 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007160:	2301      	movs	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007164:	68fb      	ldr	r3, [r7, #12]
	}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20002018 	.word	0x20002018
 8007174:	2000201c 	.word	0x2000201c
 8007178:	20002120 	.word	0x20002120

0800717c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d06e      	beq.n	8007270 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007192:	4b3a      	ldr	r3, [pc, #232]	; (800727c <xTaskPriorityDisinherit+0x100>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	429a      	cmp	r2, r3
 800719a:	d00a      	beq.n	80071b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	60fb      	str	r3, [r7, #12]
}
 80071ae:	bf00      	nop
 80071b0:	e7fe      	b.n	80071b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10a      	bne.n	80071d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	60bb      	str	r3, [r7, #8]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d4:	1e5a      	subs	r2, r3, #1
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d044      	beq.n	8007270 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d140      	bne.n	8007270 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fd3d 	bl	8005c72 <uxListRemove>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d115      	bne.n	800722a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007202:	491f      	ldr	r1, [pc, #124]	; (8007280 <xTaskPriorityDisinherit+0x104>)
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	440b      	add	r3, r1
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <xTaskPriorityDisinherit+0xae>
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	2201      	movs	r2, #1
 800721a:	fa02 f303 	lsl.w	r3, r2, r3
 800721e:	43da      	mvns	r2, r3
 8007220:	4b18      	ldr	r3, [pc, #96]	; (8007284 <xTaskPriorityDisinherit+0x108>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4013      	ands	r3, r2
 8007226:	4a17      	ldr	r2, [pc, #92]	; (8007284 <xTaskPriorityDisinherit+0x108>)
 8007228:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007236:	f1c3 0207 	rsb	r2, r3, #7
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	2201      	movs	r2, #1
 8007244:	409a      	lsls	r2, r3
 8007246:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <xTaskPriorityDisinherit+0x108>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4313      	orrs	r3, r2
 800724c:	4a0d      	ldr	r2, [pc, #52]	; (8007284 <xTaskPriorityDisinherit+0x108>)
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4a08      	ldr	r2, [pc, #32]	; (8007280 <xTaskPriorityDisinherit+0x104>)
 800725e:	441a      	add	r2, r3
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	3304      	adds	r3, #4
 8007264:	4619      	mov	r1, r3
 8007266:	4610      	mov	r0, r2
 8007268:	f7fe fca6 	bl	8005bb8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800726c:	2301      	movs	r3, #1
 800726e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007270:	697b      	ldr	r3, [r7, #20]
	}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20002018 	.word	0x20002018
 8007280:	2000201c 	.word	0x2000201c
 8007284:	20002120 	.word	0x20002120

08007288 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007296:	2301      	movs	r3, #1
 8007298:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d077      	beq.n	8007390 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	60fb      	str	r3, [r7, #12]
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d902      	bls.n	80072ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	61fb      	str	r3, [r7, #28]
 80072cc:	e002      	b.n	80072d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d058      	beq.n	8007390 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d153      	bne.n	8007390 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80072e8:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d10a      	bne.n	8007308 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	60bb      	str	r3, [r7, #8]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	db04      	blt.n	8007326 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	f1c3 0207 	rsb	r2, r3, #7
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	6959      	ldr	r1, [r3, #20]
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4a19      	ldr	r2, [pc, #100]	; (800739c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007336:	4413      	add	r3, r2
 8007338:	4299      	cmp	r1, r3
 800733a:	d129      	bne.n	8007390 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	3304      	adds	r3, #4
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe fc96 	bl	8005c72 <uxListRemove>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	2201      	movs	r2, #1
 8007352:	fa02 f303 	lsl.w	r3, r2, r3
 8007356:	43da      	mvns	r2, r3
 8007358:	4b11      	ldr	r3, [pc, #68]	; (80073a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4013      	ands	r3, r2
 800735e:	4a10      	ldr	r2, [pc, #64]	; (80073a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007360:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	2201      	movs	r2, #1
 8007368:	409a      	lsls	r2, r3
 800736a:	4b0d      	ldr	r3, [pc, #52]	; (80073a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4313      	orrs	r3, r2
 8007370:	4a0b      	ldr	r2, [pc, #44]	; (80073a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4a06      	ldr	r2, [pc, #24]	; (800739c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007382:	441a      	add	r2, r3
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	3304      	adds	r3, #4
 8007388:	4619      	mov	r1, r3
 800738a:	4610      	mov	r0, r2
 800738c:	f7fe fc14 	bl	8005bb8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007390:	bf00      	nop
 8007392:	3720      	adds	r7, #32
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20002018 	.word	0x20002018
 800739c:	2000201c 	.word	0x2000201c
 80073a0:	20002120 	.word	0x20002120

080073a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80073a8:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073b6:	3201      	adds	r2, #1
 80073b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80073ba:	4b03      	ldr	r3, [pc, #12]	; (80073c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80073bc:	681b      	ldr	r3, [r3, #0]
	}
 80073be:	4618      	mov	r0, r3
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	20002018 	.word	0x20002018

080073cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073d6:	4b29      	ldr	r3, [pc, #164]	; (800747c <prvAddCurrentTaskToDelayedList+0xb0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073dc:	4b28      	ldr	r3, [pc, #160]	; (8007480 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3304      	adds	r3, #4
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fc45 	bl	8005c72 <uxListRemove>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10b      	bne.n	8007406 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80073ee:	4b24      	ldr	r3, [pc, #144]	; (8007480 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	2201      	movs	r2, #1
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	43da      	mvns	r2, r3
 80073fc:	4b21      	ldr	r3, [pc, #132]	; (8007484 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4013      	ands	r3, r2
 8007402:	4a20      	ldr	r2, [pc, #128]	; (8007484 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007404:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740c:	d10a      	bne.n	8007424 <prvAddCurrentTaskToDelayedList+0x58>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d007      	beq.n	8007424 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007414:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3304      	adds	r3, #4
 800741a:	4619      	mov	r1, r3
 800741c:	481a      	ldr	r0, [pc, #104]	; (8007488 <prvAddCurrentTaskToDelayedList+0xbc>)
 800741e:	f7fe fbcb 	bl	8005bb8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007422:	e026      	b.n	8007472 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4413      	add	r3, r2
 800742a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800742c:	4b14      	ldr	r3, [pc, #80]	; (8007480 <prvAddCurrentTaskToDelayedList+0xb4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	429a      	cmp	r2, r3
 800743a:	d209      	bcs.n	8007450 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800743c:	4b13      	ldr	r3, [pc, #76]	; (800748c <prvAddCurrentTaskToDelayedList+0xc0>)
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3304      	adds	r3, #4
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f7fe fbd9 	bl	8005c00 <vListInsert>
}
 800744e:	e010      	b.n	8007472 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007450:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3304      	adds	r3, #4
 800745a:	4619      	mov	r1, r3
 800745c:	4610      	mov	r0, r2
 800745e:	f7fe fbcf 	bl	8005c00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007462:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	429a      	cmp	r2, r3
 800746a:	d202      	bcs.n	8007472 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800746c:	4a09      	ldr	r2, [pc, #36]	; (8007494 <prvAddCurrentTaskToDelayedList+0xc8>)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6013      	str	r3, [r2, #0]
}
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	2000211c 	.word	0x2000211c
 8007480:	20002018 	.word	0x20002018
 8007484:	20002120 	.word	0x20002120
 8007488:	20002104 	.word	0x20002104
 800748c:	200020d4 	.word	0x200020d4
 8007490:	200020d0 	.word	0x200020d0
 8007494:	20002138 	.word	0x20002138

08007498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3b04      	subs	r3, #4
 80074a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3b04      	subs	r3, #4
 80074b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f023 0201 	bic.w	r2, r3, #1
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3b04      	subs	r3, #4
 80074c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074c8:	4a0c      	ldr	r2, [pc, #48]	; (80074fc <pxPortInitialiseStack+0x64>)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3b14      	subs	r3, #20
 80074d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3b04      	subs	r3, #4
 80074de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f06f 0202 	mvn.w	r2, #2
 80074e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3b20      	subs	r3, #32
 80074ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074ee:	68fb      	ldr	r3, [r7, #12]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	08007501 	.word	0x08007501

08007500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800750a:	4b12      	ldr	r3, [pc, #72]	; (8007554 <prvTaskExitError+0x54>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007512:	d00a      	beq.n	800752a <prvTaskExitError+0x2a>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	60fb      	str	r3, [r7, #12]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <prvTaskExitError+0x28>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	60bb      	str	r3, [r7, #8]
}
 800753c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800753e:	bf00      	nop
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0fc      	beq.n	8007540 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007546:	bf00      	nop
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	20000254 	.word	0x20000254
	...

08007560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007560:	4b07      	ldr	r3, [pc, #28]	; (8007580 <pxCurrentTCBConst2>)
 8007562:	6819      	ldr	r1, [r3, #0]
 8007564:	6808      	ldr	r0, [r1, #0]
 8007566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756a:	f380 8809 	msr	PSP, r0
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8811 	msr	BASEPRI, r0
 800757a:	4770      	bx	lr
 800757c:	f3af 8000 	nop.w

08007580 <pxCurrentTCBConst2>:
 8007580:	20002018 	.word	0x20002018
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop

08007588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007588:	4808      	ldr	r0, [pc, #32]	; (80075ac <prvPortStartFirstTask+0x24>)
 800758a:	6800      	ldr	r0, [r0, #0]
 800758c:	6800      	ldr	r0, [r0, #0]
 800758e:	f380 8808 	msr	MSP, r0
 8007592:	f04f 0000 	mov.w	r0, #0
 8007596:	f380 8814 	msr	CONTROL, r0
 800759a:	b662      	cpsie	i
 800759c:	b661      	cpsie	f
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	df00      	svc	0
 80075a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075aa:	bf00      	nop
 80075ac:	e000ed08 	.word	0xe000ed08

080075b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075b6:	4b46      	ldr	r3, [pc, #280]	; (80076d0 <xPortStartScheduler+0x120>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a46      	ldr	r2, [pc, #280]	; (80076d4 <xPortStartScheduler+0x124>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d10a      	bne.n	80075d6 <xPortStartScheduler+0x26>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	613b      	str	r3, [r7, #16]
}
 80075d2:	bf00      	nop
 80075d4:	e7fe      	b.n	80075d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075d6:	4b3e      	ldr	r3, [pc, #248]	; (80076d0 <xPortStartScheduler+0x120>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a3f      	ldr	r2, [pc, #252]	; (80076d8 <xPortStartScheduler+0x128>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10a      	bne.n	80075f6 <xPortStartScheduler+0x46>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	60fb      	str	r3, [r7, #12]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075f6:	4b39      	ldr	r3, [pc, #228]	; (80076dc <xPortStartScheduler+0x12c>)
 80075f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	22ff      	movs	r2, #255	; 0xff
 8007606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007618:	b2da      	uxtb	r2, r3
 800761a:	4b31      	ldr	r3, [pc, #196]	; (80076e0 <xPortStartScheduler+0x130>)
 800761c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800761e:	4b31      	ldr	r3, [pc, #196]	; (80076e4 <xPortStartScheduler+0x134>)
 8007620:	2207      	movs	r2, #7
 8007622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007624:	e009      	b.n	800763a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007626:	4b2f      	ldr	r3, [pc, #188]	; (80076e4 <xPortStartScheduler+0x134>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3b01      	subs	r3, #1
 800762c:	4a2d      	ldr	r2, [pc, #180]	; (80076e4 <xPortStartScheduler+0x134>)
 800762e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	b2db      	uxtb	r3, r3
 8007638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007642:	2b80      	cmp	r3, #128	; 0x80
 8007644:	d0ef      	beq.n	8007626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007646:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <xPortStartScheduler+0x134>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f1c3 0307 	rsb	r3, r3, #7
 800764e:	2b04      	cmp	r3, #4
 8007650:	d00a      	beq.n	8007668 <xPortStartScheduler+0xb8>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60bb      	str	r3, [r7, #8]
}
 8007664:	bf00      	nop
 8007666:	e7fe      	b.n	8007666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007668:	4b1e      	ldr	r3, [pc, #120]	; (80076e4 <xPortStartScheduler+0x134>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	4a1d      	ldr	r2, [pc, #116]	; (80076e4 <xPortStartScheduler+0x134>)
 8007670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007672:	4b1c      	ldr	r3, [pc, #112]	; (80076e4 <xPortStartScheduler+0x134>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800767a:	4a1a      	ldr	r2, [pc, #104]	; (80076e4 <xPortStartScheduler+0x134>)
 800767c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	b2da      	uxtb	r2, r3
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007686:	4b18      	ldr	r3, [pc, #96]	; (80076e8 <xPortStartScheduler+0x138>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <xPortStartScheduler+0x138>)
 800768c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <xPortStartScheduler+0x138>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <xPortStartScheduler+0x138>)
 8007698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800769c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800769e:	f000 f8dd 	bl	800785c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <xPortStartScheduler+0x13c>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076a8:	f000 f8fc 	bl	80078a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076ac:	4b10      	ldr	r3, [pc, #64]	; (80076f0 <xPortStartScheduler+0x140>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a0f      	ldr	r2, [pc, #60]	; (80076f0 <xPortStartScheduler+0x140>)
 80076b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076b8:	f7ff ff66 	bl	8007588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076bc:	f7ff fa8e 	bl	8006bdc <vTaskSwitchContext>
	prvTaskExitError();
 80076c0:	f7ff ff1e 	bl	8007500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	e000ed00 	.word	0xe000ed00
 80076d4:	410fc271 	.word	0x410fc271
 80076d8:	410fc270 	.word	0x410fc270
 80076dc:	e000e400 	.word	0xe000e400
 80076e0:	20002144 	.word	0x20002144
 80076e4:	20002148 	.word	0x20002148
 80076e8:	e000ed20 	.word	0xe000ed20
 80076ec:	20000254 	.word	0x20000254
 80076f0:	e000ef34 	.word	0xe000ef34

080076f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	607b      	str	r3, [r7, #4]
}
 800770c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800770e:	4b0f      	ldr	r3, [pc, #60]	; (800774c <vPortEnterCritical+0x58>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3301      	adds	r3, #1
 8007714:	4a0d      	ldr	r2, [pc, #52]	; (800774c <vPortEnterCritical+0x58>)
 8007716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007718:	4b0c      	ldr	r3, [pc, #48]	; (800774c <vPortEnterCritical+0x58>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d10f      	bne.n	8007740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007720:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <vPortEnterCritical+0x5c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <vPortEnterCritical+0x4c>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	603b      	str	r3, [r7, #0]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <vPortEnterCritical+0x4a>
	}
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	20000254 	.word	0x20000254
 8007750:	e000ed04 	.word	0xe000ed04

08007754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <vPortExitCritical+0x50>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <vPortExitCritical+0x24>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	607b      	str	r3, [r7, #4]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <vPortExitCritical+0x50>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3b01      	subs	r3, #1
 800777e:	4a09      	ldr	r2, [pc, #36]	; (80077a4 <vPortExitCritical+0x50>)
 8007780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007782:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <vPortExitCritical+0x50>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d105      	bne.n	8007796 <vPortExitCritical+0x42>
 800778a:	2300      	movs	r3, #0
 800778c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000254 	.word	0x20000254
	...

080077b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077b0:	f3ef 8009 	mrs	r0, PSP
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	4b15      	ldr	r3, [pc, #84]	; (8007810 <pxCurrentTCBConst>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	f01e 0f10 	tst.w	lr, #16
 80077c0:	bf08      	it	eq
 80077c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ca:	6010      	str	r0, [r2, #0]
 80077cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077d4:	f380 8811 	msr	BASEPRI, r0
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f7ff f9fc 	bl	8006bdc <vTaskSwitchContext>
 80077e4:	f04f 0000 	mov.w	r0, #0
 80077e8:	f380 8811 	msr	BASEPRI, r0
 80077ec:	bc09      	pop	{r0, r3}
 80077ee:	6819      	ldr	r1, [r3, #0]
 80077f0:	6808      	ldr	r0, [r1, #0]
 80077f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f6:	f01e 0f10 	tst.w	lr, #16
 80077fa:	bf08      	it	eq
 80077fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007800:	f380 8809 	msr	PSP, r0
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	f3af 8000 	nop.w

08007810 <pxCurrentTCBConst>:
 8007810:	20002018 	.word	0x20002018
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop

08007818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
}
 8007830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007832:	f7ff f91b 	bl	8006a6c <xTaskIncrementTick>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800783c:	4b06      	ldr	r3, [pc, #24]	; (8007858 <xPortSysTickHandler+0x40>)
 800783e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	2300      	movs	r3, #0
 8007846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f383 8811 	msr	BASEPRI, r3
}
 800784e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <vPortSetupTimerInterrupt+0x34>)
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007866:	4b0b      	ldr	r3, [pc, #44]	; (8007894 <vPortSetupTimerInterrupt+0x38>)
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800786c:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <vPortSetupTimerInterrupt+0x3c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a0a      	ldr	r2, [pc, #40]	; (800789c <vPortSetupTimerInterrupt+0x40>)
 8007872:	fba2 2303 	umull	r2, r3, r2, r3
 8007876:	099b      	lsrs	r3, r3, #6
 8007878:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <vPortSetupTimerInterrupt+0x44>)
 800787a:	3b01      	subs	r3, #1
 800787c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800787e:	4b04      	ldr	r3, [pc, #16]	; (8007890 <vPortSetupTimerInterrupt+0x34>)
 8007880:	2207      	movs	r2, #7
 8007882:	601a      	str	r2, [r3, #0]
}
 8007884:	bf00      	nop
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	e000e010 	.word	0xe000e010
 8007894:	e000e018 	.word	0xe000e018
 8007898:	2000000c 	.word	0x2000000c
 800789c:	10624dd3 	.word	0x10624dd3
 80078a0:	e000e014 	.word	0xe000e014

080078a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80078b4 <vPortEnableVFP+0x10>
 80078a8:	6801      	ldr	r1, [r0, #0]
 80078aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078ae:	6001      	str	r1, [r0, #0]
 80078b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078b2:	bf00      	nop
 80078b4:	e000ed88 	.word	0xe000ed88

080078b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	; 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078c4:	f7ff f828 	bl	8006918 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078c8:	4b5b      	ldr	r3, [pc, #364]	; (8007a38 <pvPortMalloc+0x180>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078d0:	f000 f920 	bl	8007b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078d4:	4b59      	ldr	r3, [pc, #356]	; (8007a3c <pvPortMalloc+0x184>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4013      	ands	r3, r2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 8093 	bne.w	8007a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01d      	beq.n	8007924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078e8:	2208      	movs	r2, #8
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d014      	beq.n	8007924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f023 0307 	bic.w	r3, r3, #7
 8007900:	3308      	adds	r3, #8
 8007902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <pvPortMalloc+0x6c>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	617b      	str	r3, [r7, #20]
}
 8007920:	bf00      	nop
 8007922:	e7fe      	b.n	8007922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d06e      	beq.n	8007a08 <pvPortMalloc+0x150>
 800792a:	4b45      	ldr	r3, [pc, #276]	; (8007a40 <pvPortMalloc+0x188>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	429a      	cmp	r2, r3
 8007932:	d869      	bhi.n	8007a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007934:	4b43      	ldr	r3, [pc, #268]	; (8007a44 <pvPortMalloc+0x18c>)
 8007936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007938:	4b42      	ldr	r3, [pc, #264]	; (8007a44 <pvPortMalloc+0x18c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800793e:	e004      	b.n	800794a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	429a      	cmp	r2, r3
 8007952:	d903      	bls.n	800795c <pvPortMalloc+0xa4>
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f1      	bne.n	8007940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800795c:	4b36      	ldr	r3, [pc, #216]	; (8007a38 <pvPortMalloc+0x180>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007962:	429a      	cmp	r2, r3
 8007964:	d050      	beq.n	8007a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2208      	movs	r2, #8
 800796c:	4413      	add	r3, r2
 800796e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	2308      	movs	r3, #8
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	429a      	cmp	r2, r3
 8007986:	d91f      	bls.n	80079c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4413      	add	r3, r2
 800798e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <pvPortMalloc+0xf8>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	613b      	str	r3, [r7, #16]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	1ad2      	subs	r2, r2, r3
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079c2:	69b8      	ldr	r0, [r7, #24]
 80079c4:	f000 f908 	bl	8007bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079c8:	4b1d      	ldr	r3, [pc, #116]	; (8007a40 <pvPortMalloc+0x188>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	4a1b      	ldr	r2, [pc, #108]	; (8007a40 <pvPortMalloc+0x188>)
 80079d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079d6:	4b1a      	ldr	r3, [pc, #104]	; (8007a40 <pvPortMalloc+0x188>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <pvPortMalloc+0x190>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d203      	bcs.n	80079ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079e2:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <pvPortMalloc+0x188>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a18      	ldr	r2, [pc, #96]	; (8007a48 <pvPortMalloc+0x190>)
 80079e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <pvPortMalloc+0x184>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079fe:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <pvPortMalloc+0x194>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3301      	adds	r3, #1
 8007a04:	4a11      	ldr	r2, [pc, #68]	; (8007a4c <pvPortMalloc+0x194>)
 8007a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a08:	f7fe ff94 	bl	8006934 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <pvPortMalloc+0x174>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	60fb      	str	r3, [r7, #12]
}
 8007a28:	bf00      	nop
 8007a2a:	e7fe      	b.n	8007a2a <pvPortMalloc+0x172>
	return pvReturn;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3728      	adds	r7, #40	; 0x28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20005d54 	.word	0x20005d54
 8007a3c:	20005d68 	.word	0x20005d68
 8007a40:	20005d58 	.word	0x20005d58
 8007a44:	20005d4c 	.word	0x20005d4c
 8007a48:	20005d5c 	.word	0x20005d5c
 8007a4c:	20005d60 	.word	0x20005d60

08007a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d04d      	beq.n	8007afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a62:	2308      	movs	r3, #8
 8007a64:	425b      	negs	r3, r3
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4413      	add	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	4b24      	ldr	r3, [pc, #144]	; (8007b08 <vPortFree+0xb8>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4013      	ands	r3, r2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10a      	bne.n	8007a94 <vPortFree+0x44>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	60fb      	str	r3, [r7, #12]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00a      	beq.n	8007ab2 <vPortFree+0x62>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	60bb      	str	r3, [r7, #8]
}
 8007aae:	bf00      	nop
 8007ab0:	e7fe      	b.n	8007ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	4b14      	ldr	r3, [pc, #80]	; (8007b08 <vPortFree+0xb8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01e      	beq.n	8007afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11a      	bne.n	8007afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	4b0e      	ldr	r3, [pc, #56]	; (8007b08 <vPortFree+0xb8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	401a      	ands	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ad8:	f7fe ff1e 	bl	8006918 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <vPortFree+0xbc>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	4a09      	ldr	r2, [pc, #36]	; (8007b0c <vPortFree+0xbc>)
 8007ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aea:	6938      	ldr	r0, [r7, #16]
 8007aec:	f000 f874 	bl	8007bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <vPortFree+0xc0>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	4a06      	ldr	r2, [pc, #24]	; (8007b10 <vPortFree+0xc0>)
 8007af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007afa:	f7fe ff1b 	bl	8006934 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007afe:	bf00      	nop
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20005d68 	.word	0x20005d68
 8007b0c:	20005d58 	.word	0x20005d58
 8007b10:	20005d64 	.word	0x20005d64

08007b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b20:	4b27      	ldr	r3, [pc, #156]	; (8007bc0 <prvHeapInit+0xac>)
 8007b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00c      	beq.n	8007b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3307      	adds	r3, #7
 8007b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0307 	bic.w	r3, r3, #7
 8007b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	4a1f      	ldr	r2, [pc, #124]	; (8007bc0 <prvHeapInit+0xac>)
 8007b44:	4413      	add	r3, r2
 8007b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b4c:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <prvHeapInit+0xb0>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b52:	4b1c      	ldr	r3, [pc, #112]	; (8007bc4 <prvHeapInit+0xb0>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b60:	2208      	movs	r2, #8
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	1a9b      	subs	r3, r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0307 	bic.w	r3, r3, #7
 8007b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b76:	4b14      	ldr	r3, [pc, #80]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b7e:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	1ad2      	subs	r2, r2, r3
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b94:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <prvHeapInit+0xb8>)
 8007ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	4a09      	ldr	r2, [pc, #36]	; (8007bd0 <prvHeapInit+0xbc>)
 8007baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <prvHeapInit+0xc0>)
 8007bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bb2:	601a      	str	r2, [r3, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	2000214c 	.word	0x2000214c
 8007bc4:	20005d4c 	.word	0x20005d4c
 8007bc8:	20005d54 	.word	0x20005d54
 8007bcc:	20005d5c 	.word	0x20005d5c
 8007bd0:	20005d58 	.word	0x20005d58
 8007bd4:	20005d68 	.word	0x20005d68

08007bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007be0:	4b28      	ldr	r3, [pc, #160]	; (8007c84 <prvInsertBlockIntoFreeList+0xac>)
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e002      	b.n	8007bec <prvInsertBlockIntoFreeList+0x14>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d8f7      	bhi.n	8007be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	4413      	add	r3, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d108      	bne.n	8007c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	441a      	add	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	441a      	add	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d118      	bne.n	8007c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <prvInsertBlockIntoFreeList+0xb0>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d00d      	beq.n	8007c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	e008      	b.n	8007c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <prvInsertBlockIntoFreeList+0xb0>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e003      	b.n	8007c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d002      	beq.n	8007c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c76:	bf00      	nop
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	20005d4c 	.word	0x20005d4c
 8007c88:	20005d54 	.word	0x20005d54

08007c8c <__errno>:
 8007c8c:	4b01      	ldr	r3, [pc, #4]	; (8007c94 <__errno+0x8>)
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	20000258 	.word	0x20000258

08007c98 <__sflush_r>:
 8007c98:	898a      	ldrh	r2, [r1, #12]
 8007c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	0710      	lsls	r0, r2, #28
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	d458      	bmi.n	8007d58 <__sflush_r+0xc0>
 8007ca6:	684b      	ldr	r3, [r1, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	dc05      	bgt.n	8007cb8 <__sflush_r+0x20>
 8007cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dc02      	bgt.n	8007cb8 <__sflush_r+0x20>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cba:	2e00      	cmp	r6, #0
 8007cbc:	d0f9      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cc4:	682f      	ldr	r7, [r5, #0]
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	d032      	beq.n	8007d30 <__sflush_r+0x98>
 8007cca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	075a      	lsls	r2, r3, #29
 8007cd0:	d505      	bpl.n	8007cde <__sflush_r+0x46>
 8007cd2:	6863      	ldr	r3, [r4, #4]
 8007cd4:	1ac0      	subs	r0, r0, r3
 8007cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cd8:	b10b      	cbz	r3, 8007cde <__sflush_r+0x46>
 8007cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cdc:	1ac0      	subs	r0, r0, r3
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ce4:	6a21      	ldr	r1, [r4, #32]
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	47b0      	blx	r6
 8007cea:	1c43      	adds	r3, r0, #1
 8007cec:	89a3      	ldrh	r3, [r4, #12]
 8007cee:	d106      	bne.n	8007cfe <__sflush_r+0x66>
 8007cf0:	6829      	ldr	r1, [r5, #0]
 8007cf2:	291d      	cmp	r1, #29
 8007cf4:	d82c      	bhi.n	8007d50 <__sflush_r+0xb8>
 8007cf6:	4a2a      	ldr	r2, [pc, #168]	; (8007da0 <__sflush_r+0x108>)
 8007cf8:	40ca      	lsrs	r2, r1
 8007cfa:	07d6      	lsls	r6, r2, #31
 8007cfc:	d528      	bpl.n	8007d50 <__sflush_r+0xb8>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	6062      	str	r2, [r4, #4]
 8007d02:	04d9      	lsls	r1, r3, #19
 8007d04:	6922      	ldr	r2, [r4, #16]
 8007d06:	6022      	str	r2, [r4, #0]
 8007d08:	d504      	bpl.n	8007d14 <__sflush_r+0x7c>
 8007d0a:	1c42      	adds	r2, r0, #1
 8007d0c:	d101      	bne.n	8007d12 <__sflush_r+0x7a>
 8007d0e:	682b      	ldr	r3, [r5, #0]
 8007d10:	b903      	cbnz	r3, 8007d14 <__sflush_r+0x7c>
 8007d12:	6560      	str	r0, [r4, #84]	; 0x54
 8007d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d16:	602f      	str	r7, [r5, #0]
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	d0ca      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d20:	4299      	cmp	r1, r3
 8007d22:	d002      	beq.n	8007d2a <__sflush_r+0x92>
 8007d24:	4628      	mov	r0, r5
 8007d26:	f000 f9cf 	bl	80080c8 <_free_r>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8007d2e:	e7c1      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d30:	6a21      	ldr	r1, [r4, #32]
 8007d32:	2301      	movs	r3, #1
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b0      	blx	r6
 8007d38:	1c41      	adds	r1, r0, #1
 8007d3a:	d1c7      	bne.n	8007ccc <__sflush_r+0x34>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0c4      	beq.n	8007ccc <__sflush_r+0x34>
 8007d42:	2b1d      	cmp	r3, #29
 8007d44:	d001      	beq.n	8007d4a <__sflush_r+0xb2>
 8007d46:	2b16      	cmp	r3, #22
 8007d48:	d101      	bne.n	8007d4e <__sflush_r+0xb6>
 8007d4a:	602f      	str	r7, [r5, #0]
 8007d4c:	e7b1      	b.n	8007cb2 <__sflush_r+0x1a>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	e7ad      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d58:	690f      	ldr	r7, [r1, #16]
 8007d5a:	2f00      	cmp	r7, #0
 8007d5c:	d0a9      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007d5e:	0793      	lsls	r3, r2, #30
 8007d60:	680e      	ldr	r6, [r1, #0]
 8007d62:	bf08      	it	eq
 8007d64:	694b      	ldreq	r3, [r1, #20]
 8007d66:	600f      	str	r7, [r1, #0]
 8007d68:	bf18      	it	ne
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	eba6 0807 	sub.w	r8, r6, r7
 8007d70:	608b      	str	r3, [r1, #8]
 8007d72:	f1b8 0f00 	cmp.w	r8, #0
 8007d76:	dd9c      	ble.n	8007cb2 <__sflush_r+0x1a>
 8007d78:	6a21      	ldr	r1, [r4, #32]
 8007d7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d7c:	4643      	mov	r3, r8
 8007d7e:	463a      	mov	r2, r7
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b0      	blx	r6
 8007d84:	2800      	cmp	r0, #0
 8007d86:	dc06      	bgt.n	8007d96 <__sflush_r+0xfe>
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	e78e      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d96:	4407      	add	r7, r0
 8007d98:	eba8 0800 	sub.w	r8, r8, r0
 8007d9c:	e7e9      	b.n	8007d72 <__sflush_r+0xda>
 8007d9e:	bf00      	nop
 8007da0:	20400001 	.word	0x20400001

08007da4 <_fflush_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	690b      	ldr	r3, [r1, #16]
 8007da8:	4605      	mov	r5, r0
 8007daa:	460c      	mov	r4, r1
 8007dac:	b913      	cbnz	r3, 8007db4 <_fflush_r+0x10>
 8007dae:	2500      	movs	r5, #0
 8007db0:	4628      	mov	r0, r5
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	b118      	cbz	r0, 8007dbe <_fflush_r+0x1a>
 8007db6:	6983      	ldr	r3, [r0, #24]
 8007db8:	b90b      	cbnz	r3, 8007dbe <_fflush_r+0x1a>
 8007dba:	f000 f899 	bl	8007ef0 <__sinit>
 8007dbe:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <_fflush_r+0x6c>)
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	d11b      	bne.n	8007dfc <_fflush_r+0x58>
 8007dc4:	686c      	ldr	r4, [r5, #4]
 8007dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0ef      	beq.n	8007dae <_fflush_r+0xa>
 8007dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dd0:	07d0      	lsls	r0, r2, #31
 8007dd2:	d404      	bmi.n	8007dde <_fflush_r+0x3a>
 8007dd4:	0599      	lsls	r1, r3, #22
 8007dd6:	d402      	bmi.n	8007dde <_fflush_r+0x3a>
 8007dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dda:	f000 f94c 	bl	8008076 <__retarget_lock_acquire_recursive>
 8007dde:	4628      	mov	r0, r5
 8007de0:	4621      	mov	r1, r4
 8007de2:	f7ff ff59 	bl	8007c98 <__sflush_r>
 8007de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de8:	07da      	lsls	r2, r3, #31
 8007dea:	4605      	mov	r5, r0
 8007dec:	d4e0      	bmi.n	8007db0 <_fflush_r+0xc>
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	059b      	lsls	r3, r3, #22
 8007df2:	d4dd      	bmi.n	8007db0 <_fflush_r+0xc>
 8007df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df6:	f000 f93f 	bl	8008078 <__retarget_lock_release_recursive>
 8007dfa:	e7d9      	b.n	8007db0 <_fflush_r+0xc>
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <_fflush_r+0x70>)
 8007dfe:	429c      	cmp	r4, r3
 8007e00:	d101      	bne.n	8007e06 <_fflush_r+0x62>
 8007e02:	68ac      	ldr	r4, [r5, #8]
 8007e04:	e7df      	b.n	8007dc6 <_fflush_r+0x22>
 8007e06:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <_fflush_r+0x74>)
 8007e08:	429c      	cmp	r4, r3
 8007e0a:	bf08      	it	eq
 8007e0c:	68ec      	ldreq	r4, [r5, #12]
 8007e0e:	e7da      	b.n	8007dc6 <_fflush_r+0x22>
 8007e10:	0800b33c 	.word	0x0800b33c
 8007e14:	0800b35c 	.word	0x0800b35c
 8007e18:	0800b31c 	.word	0x0800b31c

08007e1c <fflush>:
 8007e1c:	4601      	mov	r1, r0
 8007e1e:	b920      	cbnz	r0, 8007e2a <fflush+0xe>
 8007e20:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <fflush+0x18>)
 8007e22:	4905      	ldr	r1, [pc, #20]	; (8007e38 <fflush+0x1c>)
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	f000 b8e1 	b.w	8007fec <_fwalk_reent>
 8007e2a:	4b04      	ldr	r3, [pc, #16]	; (8007e3c <fflush+0x20>)
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	f7ff bfb9 	b.w	8007da4 <_fflush_r>
 8007e32:	bf00      	nop
 8007e34:	0800b37c 	.word	0x0800b37c
 8007e38:	08007da5 	.word	0x08007da5
 8007e3c:	20000258 	.word	0x20000258

08007e40 <std>:
 8007e40:	2300      	movs	r3, #0
 8007e42:	b510      	push	{r4, lr}
 8007e44:	4604      	mov	r4, r0
 8007e46:	e9c0 3300 	strd	r3, r3, [r0]
 8007e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e4e:	6083      	str	r3, [r0, #8]
 8007e50:	8181      	strh	r1, [r0, #12]
 8007e52:	6643      	str	r3, [r0, #100]	; 0x64
 8007e54:	81c2      	strh	r2, [r0, #14]
 8007e56:	6183      	str	r3, [r0, #24]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	305c      	adds	r0, #92	; 0x5c
 8007e5e:	f000 f92b 	bl	80080b8 <memset>
 8007e62:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <std+0x38>)
 8007e64:	6263      	str	r3, [r4, #36]	; 0x24
 8007e66:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <std+0x3c>)
 8007e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e6a:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <std+0x40>)
 8007e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e6e:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <std+0x44>)
 8007e70:	6224      	str	r4, [r4, #32]
 8007e72:	6323      	str	r3, [r4, #48]	; 0x30
 8007e74:	bd10      	pop	{r4, pc}
 8007e76:	bf00      	nop
 8007e78:	08008415 	.word	0x08008415
 8007e7c:	08008437 	.word	0x08008437
 8007e80:	0800846f 	.word	0x0800846f
 8007e84:	08008493 	.word	0x08008493

08007e88 <_cleanup_r>:
 8007e88:	4901      	ldr	r1, [pc, #4]	; (8007e90 <_cleanup_r+0x8>)
 8007e8a:	f000 b8af 	b.w	8007fec <_fwalk_reent>
 8007e8e:	bf00      	nop
 8007e90:	08007da5 	.word	0x08007da5

08007e94 <__sfmoreglue>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	2268      	movs	r2, #104	; 0x68
 8007e98:	1e4d      	subs	r5, r1, #1
 8007e9a:	4355      	muls	r5, r2
 8007e9c:	460e      	mov	r6, r1
 8007e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ea2:	f000 f97d 	bl	80081a0 <_malloc_r>
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	b140      	cbz	r0, 8007ebc <__sfmoreglue+0x28>
 8007eaa:	2100      	movs	r1, #0
 8007eac:	e9c0 1600 	strd	r1, r6, [r0]
 8007eb0:	300c      	adds	r0, #12
 8007eb2:	60a0      	str	r0, [r4, #8]
 8007eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007eb8:	f000 f8fe 	bl	80080b8 <memset>
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}

08007ec0 <__sfp_lock_acquire>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	; (8007ec8 <__sfp_lock_acquire+0x8>)
 8007ec2:	f000 b8d8 	b.w	8008076 <__retarget_lock_acquire_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	20005d6d 	.word	0x20005d6d

08007ecc <__sfp_lock_release>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	; (8007ed4 <__sfp_lock_release+0x8>)
 8007ece:	f000 b8d3 	b.w	8008078 <__retarget_lock_release_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	20005d6d 	.word	0x20005d6d

08007ed8 <__sinit_lock_acquire>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__sinit_lock_acquire+0x8>)
 8007eda:	f000 b8cc 	b.w	8008076 <__retarget_lock_acquire_recursive>
 8007ede:	bf00      	nop
 8007ee0:	20005d6e 	.word	0x20005d6e

08007ee4 <__sinit_lock_release>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	; (8007eec <__sinit_lock_release+0x8>)
 8007ee6:	f000 b8c7 	b.w	8008078 <__retarget_lock_release_recursive>
 8007eea:	bf00      	nop
 8007eec:	20005d6e 	.word	0x20005d6e

08007ef0 <__sinit>:
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	f7ff fff0 	bl	8007ed8 <__sinit_lock_acquire>
 8007ef8:	69a3      	ldr	r3, [r4, #24]
 8007efa:	b11b      	cbz	r3, 8007f04 <__sinit+0x14>
 8007efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f00:	f7ff bff0 	b.w	8007ee4 <__sinit_lock_release>
 8007f04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f08:	6523      	str	r3, [r4, #80]	; 0x50
 8007f0a:	4b13      	ldr	r3, [pc, #76]	; (8007f58 <__sinit+0x68>)
 8007f0c:	4a13      	ldr	r2, [pc, #76]	; (8007f5c <__sinit+0x6c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f12:	42a3      	cmp	r3, r4
 8007f14:	bf04      	itt	eq
 8007f16:	2301      	moveq	r3, #1
 8007f18:	61a3      	streq	r3, [r4, #24]
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 f820 	bl	8007f60 <__sfp>
 8007f20:	6060      	str	r0, [r4, #4]
 8007f22:	4620      	mov	r0, r4
 8007f24:	f000 f81c 	bl	8007f60 <__sfp>
 8007f28:	60a0      	str	r0, [r4, #8]
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f000 f818 	bl	8007f60 <__sfp>
 8007f30:	2200      	movs	r2, #0
 8007f32:	60e0      	str	r0, [r4, #12]
 8007f34:	2104      	movs	r1, #4
 8007f36:	6860      	ldr	r0, [r4, #4]
 8007f38:	f7ff ff82 	bl	8007e40 <std>
 8007f3c:	68a0      	ldr	r0, [r4, #8]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	2109      	movs	r1, #9
 8007f42:	f7ff ff7d 	bl	8007e40 <std>
 8007f46:	68e0      	ldr	r0, [r4, #12]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	2112      	movs	r1, #18
 8007f4c:	f7ff ff78 	bl	8007e40 <std>
 8007f50:	2301      	movs	r3, #1
 8007f52:	61a3      	str	r3, [r4, #24]
 8007f54:	e7d2      	b.n	8007efc <__sinit+0xc>
 8007f56:	bf00      	nop
 8007f58:	0800b37c 	.word	0x0800b37c
 8007f5c:	08007e89 	.word	0x08007e89

08007f60 <__sfp>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	4607      	mov	r7, r0
 8007f64:	f7ff ffac 	bl	8007ec0 <__sfp_lock_acquire>
 8007f68:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <__sfp+0x84>)
 8007f6a:	681e      	ldr	r6, [r3, #0]
 8007f6c:	69b3      	ldr	r3, [r6, #24]
 8007f6e:	b913      	cbnz	r3, 8007f76 <__sfp+0x16>
 8007f70:	4630      	mov	r0, r6
 8007f72:	f7ff ffbd 	bl	8007ef0 <__sinit>
 8007f76:	3648      	adds	r6, #72	; 0x48
 8007f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	d503      	bpl.n	8007f88 <__sfp+0x28>
 8007f80:	6833      	ldr	r3, [r6, #0]
 8007f82:	b30b      	cbz	r3, 8007fc8 <__sfp+0x68>
 8007f84:	6836      	ldr	r6, [r6, #0]
 8007f86:	e7f7      	b.n	8007f78 <__sfp+0x18>
 8007f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f8c:	b9d5      	cbnz	r5, 8007fc4 <__sfp+0x64>
 8007f8e:	4b16      	ldr	r3, [pc, #88]	; (8007fe8 <__sfp+0x88>)
 8007f90:	60e3      	str	r3, [r4, #12]
 8007f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f96:	6665      	str	r5, [r4, #100]	; 0x64
 8007f98:	f000 f86c 	bl	8008074 <__retarget_lock_init_recursive>
 8007f9c:	f7ff ff96 	bl	8007ecc <__sfp_lock_release>
 8007fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fa8:	6025      	str	r5, [r4, #0]
 8007faa:	61a5      	str	r5, [r4, #24]
 8007fac:	2208      	movs	r2, #8
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fb4:	f000 f880 	bl	80080b8 <memset>
 8007fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc4:	3468      	adds	r4, #104	; 0x68
 8007fc6:	e7d9      	b.n	8007f7c <__sfp+0x1c>
 8007fc8:	2104      	movs	r1, #4
 8007fca:	4638      	mov	r0, r7
 8007fcc:	f7ff ff62 	bl	8007e94 <__sfmoreglue>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	6030      	str	r0, [r6, #0]
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d1d5      	bne.n	8007f84 <__sfp+0x24>
 8007fd8:	f7ff ff78 	bl	8007ecc <__sfp_lock_release>
 8007fdc:	230c      	movs	r3, #12
 8007fde:	603b      	str	r3, [r7, #0]
 8007fe0:	e7ee      	b.n	8007fc0 <__sfp+0x60>
 8007fe2:	bf00      	nop
 8007fe4:	0800b37c 	.word	0x0800b37c
 8007fe8:	ffff0001 	.word	0xffff0001

08007fec <_fwalk_reent>:
 8007fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	4688      	mov	r8, r1
 8007ff4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ff8:	2700      	movs	r7, #0
 8007ffa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ffe:	f1b9 0901 	subs.w	r9, r9, #1
 8008002:	d505      	bpl.n	8008010 <_fwalk_reent+0x24>
 8008004:	6824      	ldr	r4, [r4, #0]
 8008006:	2c00      	cmp	r4, #0
 8008008:	d1f7      	bne.n	8007ffa <_fwalk_reent+0xe>
 800800a:	4638      	mov	r0, r7
 800800c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008010:	89ab      	ldrh	r3, [r5, #12]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d907      	bls.n	8008026 <_fwalk_reent+0x3a>
 8008016:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800801a:	3301      	adds	r3, #1
 800801c:	d003      	beq.n	8008026 <_fwalk_reent+0x3a>
 800801e:	4629      	mov	r1, r5
 8008020:	4630      	mov	r0, r6
 8008022:	47c0      	blx	r8
 8008024:	4307      	orrs	r7, r0
 8008026:	3568      	adds	r5, #104	; 0x68
 8008028:	e7e9      	b.n	8007ffe <_fwalk_reent+0x12>
	...

0800802c <__libc_init_array>:
 800802c:	b570      	push	{r4, r5, r6, lr}
 800802e:	4d0d      	ldr	r5, [pc, #52]	; (8008064 <__libc_init_array+0x38>)
 8008030:	4c0d      	ldr	r4, [pc, #52]	; (8008068 <__libc_init_array+0x3c>)
 8008032:	1b64      	subs	r4, r4, r5
 8008034:	10a4      	asrs	r4, r4, #2
 8008036:	2600      	movs	r6, #0
 8008038:	42a6      	cmp	r6, r4
 800803a:	d109      	bne.n	8008050 <__libc_init_array+0x24>
 800803c:	4d0b      	ldr	r5, [pc, #44]	; (800806c <__libc_init_array+0x40>)
 800803e:	4c0c      	ldr	r4, [pc, #48]	; (8008070 <__libc_init_array+0x44>)
 8008040:	f002 ff9c 	bl	800af7c <_init>
 8008044:	1b64      	subs	r4, r4, r5
 8008046:	10a4      	asrs	r4, r4, #2
 8008048:	2600      	movs	r6, #0
 800804a:	42a6      	cmp	r6, r4
 800804c:	d105      	bne.n	800805a <__libc_init_array+0x2e>
 800804e:	bd70      	pop	{r4, r5, r6, pc}
 8008050:	f855 3b04 	ldr.w	r3, [r5], #4
 8008054:	4798      	blx	r3
 8008056:	3601      	adds	r6, #1
 8008058:	e7ee      	b.n	8008038 <__libc_init_array+0xc>
 800805a:	f855 3b04 	ldr.w	r3, [r5], #4
 800805e:	4798      	blx	r3
 8008060:	3601      	adds	r6, #1
 8008062:	e7f2      	b.n	800804a <__libc_init_array+0x1e>
 8008064:	0800b654 	.word	0x0800b654
 8008068:	0800b654 	.word	0x0800b654
 800806c:	0800b654 	.word	0x0800b654
 8008070:	0800b658 	.word	0x0800b658

08008074 <__retarget_lock_init_recursive>:
 8008074:	4770      	bx	lr

08008076 <__retarget_lock_acquire_recursive>:
 8008076:	4770      	bx	lr

08008078 <__retarget_lock_release_recursive>:
 8008078:	4770      	bx	lr
	...

0800807c <malloc>:
 800807c:	4b02      	ldr	r3, [pc, #8]	; (8008088 <malloc+0xc>)
 800807e:	4601      	mov	r1, r0
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	f000 b88d 	b.w	80081a0 <_malloc_r>
 8008086:	bf00      	nop
 8008088:	20000258 	.word	0x20000258

0800808c <free>:
 800808c:	4b02      	ldr	r3, [pc, #8]	; (8008098 <free+0xc>)
 800808e:	4601      	mov	r1, r0
 8008090:	6818      	ldr	r0, [r3, #0]
 8008092:	f000 b819 	b.w	80080c8 <_free_r>
 8008096:	bf00      	nop
 8008098:	20000258 	.word	0x20000258

0800809c <memcpy>:
 800809c:	440a      	add	r2, r1
 800809e:	4291      	cmp	r1, r2
 80080a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a4:	d100      	bne.n	80080a8 <memcpy+0xc>
 80080a6:	4770      	bx	lr
 80080a8:	b510      	push	{r4, lr}
 80080aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b2:	4291      	cmp	r1, r2
 80080b4:	d1f9      	bne.n	80080aa <memcpy+0xe>
 80080b6:	bd10      	pop	{r4, pc}

080080b8 <memset>:
 80080b8:	4402      	add	r2, r0
 80080ba:	4603      	mov	r3, r0
 80080bc:	4293      	cmp	r3, r2
 80080be:	d100      	bne.n	80080c2 <memset+0xa>
 80080c0:	4770      	bx	lr
 80080c2:	f803 1b01 	strb.w	r1, [r3], #1
 80080c6:	e7f9      	b.n	80080bc <memset+0x4>

080080c8 <_free_r>:
 80080c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ca:	2900      	cmp	r1, #0
 80080cc:	d044      	beq.n	8008158 <_free_r+0x90>
 80080ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d2:	9001      	str	r0, [sp, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f1a1 0404 	sub.w	r4, r1, #4
 80080da:	bfb8      	it	lt
 80080dc:	18e4      	addlt	r4, r4, r3
 80080de:	f001 fd09 	bl	8009af4 <__malloc_lock>
 80080e2:	4a1e      	ldr	r2, [pc, #120]	; (800815c <_free_r+0x94>)
 80080e4:	9801      	ldr	r0, [sp, #4]
 80080e6:	6813      	ldr	r3, [r2, #0]
 80080e8:	b933      	cbnz	r3, 80080f8 <_free_r+0x30>
 80080ea:	6063      	str	r3, [r4, #4]
 80080ec:	6014      	str	r4, [r2, #0]
 80080ee:	b003      	add	sp, #12
 80080f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080f4:	f001 bd04 	b.w	8009b00 <__malloc_unlock>
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d908      	bls.n	800810e <_free_r+0x46>
 80080fc:	6825      	ldr	r5, [r4, #0]
 80080fe:	1961      	adds	r1, r4, r5
 8008100:	428b      	cmp	r3, r1
 8008102:	bf01      	itttt	eq
 8008104:	6819      	ldreq	r1, [r3, #0]
 8008106:	685b      	ldreq	r3, [r3, #4]
 8008108:	1949      	addeq	r1, r1, r5
 800810a:	6021      	streq	r1, [r4, #0]
 800810c:	e7ed      	b.n	80080ea <_free_r+0x22>
 800810e:	461a      	mov	r2, r3
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	b10b      	cbz	r3, 8008118 <_free_r+0x50>
 8008114:	42a3      	cmp	r3, r4
 8008116:	d9fa      	bls.n	800810e <_free_r+0x46>
 8008118:	6811      	ldr	r1, [r2, #0]
 800811a:	1855      	adds	r5, r2, r1
 800811c:	42a5      	cmp	r5, r4
 800811e:	d10b      	bne.n	8008138 <_free_r+0x70>
 8008120:	6824      	ldr	r4, [r4, #0]
 8008122:	4421      	add	r1, r4
 8008124:	1854      	adds	r4, r2, r1
 8008126:	42a3      	cmp	r3, r4
 8008128:	6011      	str	r1, [r2, #0]
 800812a:	d1e0      	bne.n	80080ee <_free_r+0x26>
 800812c:	681c      	ldr	r4, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	6053      	str	r3, [r2, #4]
 8008132:	4421      	add	r1, r4
 8008134:	6011      	str	r1, [r2, #0]
 8008136:	e7da      	b.n	80080ee <_free_r+0x26>
 8008138:	d902      	bls.n	8008140 <_free_r+0x78>
 800813a:	230c      	movs	r3, #12
 800813c:	6003      	str	r3, [r0, #0]
 800813e:	e7d6      	b.n	80080ee <_free_r+0x26>
 8008140:	6825      	ldr	r5, [r4, #0]
 8008142:	1961      	adds	r1, r4, r5
 8008144:	428b      	cmp	r3, r1
 8008146:	bf04      	itt	eq
 8008148:	6819      	ldreq	r1, [r3, #0]
 800814a:	685b      	ldreq	r3, [r3, #4]
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	bf04      	itt	eq
 8008150:	1949      	addeq	r1, r1, r5
 8008152:	6021      	streq	r1, [r4, #0]
 8008154:	6054      	str	r4, [r2, #4]
 8008156:	e7ca      	b.n	80080ee <_free_r+0x26>
 8008158:	b003      	add	sp, #12
 800815a:	bd30      	pop	{r4, r5, pc}
 800815c:	20005d70 	.word	0x20005d70

08008160 <sbrk_aligned>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	4e0e      	ldr	r6, [pc, #56]	; (800819c <sbrk_aligned+0x3c>)
 8008164:	460c      	mov	r4, r1
 8008166:	6831      	ldr	r1, [r6, #0]
 8008168:	4605      	mov	r5, r0
 800816a:	b911      	cbnz	r1, 8008172 <sbrk_aligned+0x12>
 800816c:	f000 f922 	bl	80083b4 <_sbrk_r>
 8008170:	6030      	str	r0, [r6, #0]
 8008172:	4621      	mov	r1, r4
 8008174:	4628      	mov	r0, r5
 8008176:	f000 f91d 	bl	80083b4 <_sbrk_r>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d00a      	beq.n	8008194 <sbrk_aligned+0x34>
 800817e:	1cc4      	adds	r4, r0, #3
 8008180:	f024 0403 	bic.w	r4, r4, #3
 8008184:	42a0      	cmp	r0, r4
 8008186:	d007      	beq.n	8008198 <sbrk_aligned+0x38>
 8008188:	1a21      	subs	r1, r4, r0
 800818a:	4628      	mov	r0, r5
 800818c:	f000 f912 	bl	80083b4 <_sbrk_r>
 8008190:	3001      	adds	r0, #1
 8008192:	d101      	bne.n	8008198 <sbrk_aligned+0x38>
 8008194:	f04f 34ff 	mov.w	r4, #4294967295
 8008198:	4620      	mov	r0, r4
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	20005d74 	.word	0x20005d74

080081a0 <_malloc_r>:
 80081a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a4:	1ccd      	adds	r5, r1, #3
 80081a6:	f025 0503 	bic.w	r5, r5, #3
 80081aa:	3508      	adds	r5, #8
 80081ac:	2d0c      	cmp	r5, #12
 80081ae:	bf38      	it	cc
 80081b0:	250c      	movcc	r5, #12
 80081b2:	2d00      	cmp	r5, #0
 80081b4:	4607      	mov	r7, r0
 80081b6:	db01      	blt.n	80081bc <_malloc_r+0x1c>
 80081b8:	42a9      	cmp	r1, r5
 80081ba:	d905      	bls.n	80081c8 <_malloc_r+0x28>
 80081bc:	230c      	movs	r3, #12
 80081be:	603b      	str	r3, [r7, #0]
 80081c0:	2600      	movs	r6, #0
 80081c2:	4630      	mov	r0, r6
 80081c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c8:	4e2e      	ldr	r6, [pc, #184]	; (8008284 <_malloc_r+0xe4>)
 80081ca:	f001 fc93 	bl	8009af4 <__malloc_lock>
 80081ce:	6833      	ldr	r3, [r6, #0]
 80081d0:	461c      	mov	r4, r3
 80081d2:	bb34      	cbnz	r4, 8008222 <_malloc_r+0x82>
 80081d4:	4629      	mov	r1, r5
 80081d6:	4638      	mov	r0, r7
 80081d8:	f7ff ffc2 	bl	8008160 <sbrk_aligned>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	4604      	mov	r4, r0
 80081e0:	d14d      	bne.n	800827e <_malloc_r+0xde>
 80081e2:	6834      	ldr	r4, [r6, #0]
 80081e4:	4626      	mov	r6, r4
 80081e6:	2e00      	cmp	r6, #0
 80081e8:	d140      	bne.n	800826c <_malloc_r+0xcc>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	4631      	mov	r1, r6
 80081ee:	4638      	mov	r0, r7
 80081f0:	eb04 0803 	add.w	r8, r4, r3
 80081f4:	f000 f8de 	bl	80083b4 <_sbrk_r>
 80081f8:	4580      	cmp	r8, r0
 80081fa:	d13a      	bne.n	8008272 <_malloc_r+0xd2>
 80081fc:	6821      	ldr	r1, [r4, #0]
 80081fe:	3503      	adds	r5, #3
 8008200:	1a6d      	subs	r5, r5, r1
 8008202:	f025 0503 	bic.w	r5, r5, #3
 8008206:	3508      	adds	r5, #8
 8008208:	2d0c      	cmp	r5, #12
 800820a:	bf38      	it	cc
 800820c:	250c      	movcc	r5, #12
 800820e:	4629      	mov	r1, r5
 8008210:	4638      	mov	r0, r7
 8008212:	f7ff ffa5 	bl	8008160 <sbrk_aligned>
 8008216:	3001      	adds	r0, #1
 8008218:	d02b      	beq.n	8008272 <_malloc_r+0xd2>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	442b      	add	r3, r5
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	e00e      	b.n	8008240 <_malloc_r+0xa0>
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	1b52      	subs	r2, r2, r5
 8008226:	d41e      	bmi.n	8008266 <_malloc_r+0xc6>
 8008228:	2a0b      	cmp	r2, #11
 800822a:	d916      	bls.n	800825a <_malloc_r+0xba>
 800822c:	1961      	adds	r1, r4, r5
 800822e:	42a3      	cmp	r3, r4
 8008230:	6025      	str	r5, [r4, #0]
 8008232:	bf18      	it	ne
 8008234:	6059      	strne	r1, [r3, #4]
 8008236:	6863      	ldr	r3, [r4, #4]
 8008238:	bf08      	it	eq
 800823a:	6031      	streq	r1, [r6, #0]
 800823c:	5162      	str	r2, [r4, r5]
 800823e:	604b      	str	r3, [r1, #4]
 8008240:	4638      	mov	r0, r7
 8008242:	f104 060b 	add.w	r6, r4, #11
 8008246:	f001 fc5b 	bl	8009b00 <__malloc_unlock>
 800824a:	f026 0607 	bic.w	r6, r6, #7
 800824e:	1d23      	adds	r3, r4, #4
 8008250:	1af2      	subs	r2, r6, r3
 8008252:	d0b6      	beq.n	80081c2 <_malloc_r+0x22>
 8008254:	1b9b      	subs	r3, r3, r6
 8008256:	50a3      	str	r3, [r4, r2]
 8008258:	e7b3      	b.n	80081c2 <_malloc_r+0x22>
 800825a:	6862      	ldr	r2, [r4, #4]
 800825c:	42a3      	cmp	r3, r4
 800825e:	bf0c      	ite	eq
 8008260:	6032      	streq	r2, [r6, #0]
 8008262:	605a      	strne	r2, [r3, #4]
 8008264:	e7ec      	b.n	8008240 <_malloc_r+0xa0>
 8008266:	4623      	mov	r3, r4
 8008268:	6864      	ldr	r4, [r4, #4]
 800826a:	e7b2      	b.n	80081d2 <_malloc_r+0x32>
 800826c:	4634      	mov	r4, r6
 800826e:	6876      	ldr	r6, [r6, #4]
 8008270:	e7b9      	b.n	80081e6 <_malloc_r+0x46>
 8008272:	230c      	movs	r3, #12
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	4638      	mov	r0, r7
 8008278:	f001 fc42 	bl	8009b00 <__malloc_unlock>
 800827c:	e7a1      	b.n	80081c2 <_malloc_r+0x22>
 800827e:	6025      	str	r5, [r4, #0]
 8008280:	e7de      	b.n	8008240 <_malloc_r+0xa0>
 8008282:	bf00      	nop
 8008284:	20005d70 	.word	0x20005d70

08008288 <iprintf>:
 8008288:	b40f      	push	{r0, r1, r2, r3}
 800828a:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <iprintf+0x2c>)
 800828c:	b513      	push	{r0, r1, r4, lr}
 800828e:	681c      	ldr	r4, [r3, #0]
 8008290:	b124      	cbz	r4, 800829c <iprintf+0x14>
 8008292:	69a3      	ldr	r3, [r4, #24]
 8008294:	b913      	cbnz	r3, 800829c <iprintf+0x14>
 8008296:	4620      	mov	r0, r4
 8008298:	f7ff fe2a 	bl	8007ef0 <__sinit>
 800829c:	ab05      	add	r3, sp, #20
 800829e:	9a04      	ldr	r2, [sp, #16]
 80082a0:	68a1      	ldr	r1, [r4, #8]
 80082a2:	9301      	str	r3, [sp, #4]
 80082a4:	4620      	mov	r0, r4
 80082a6:	f002 fabd 	bl	800a824 <_vfiprintf_r>
 80082aa:	b002      	add	sp, #8
 80082ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b0:	b004      	add	sp, #16
 80082b2:	4770      	bx	lr
 80082b4:	20000258 	.word	0x20000258

080082b8 <_puts_r>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	460e      	mov	r6, r1
 80082bc:	4605      	mov	r5, r0
 80082be:	b118      	cbz	r0, 80082c8 <_puts_r+0x10>
 80082c0:	6983      	ldr	r3, [r0, #24]
 80082c2:	b90b      	cbnz	r3, 80082c8 <_puts_r+0x10>
 80082c4:	f7ff fe14 	bl	8007ef0 <__sinit>
 80082c8:	69ab      	ldr	r3, [r5, #24]
 80082ca:	68ac      	ldr	r4, [r5, #8]
 80082cc:	b913      	cbnz	r3, 80082d4 <_puts_r+0x1c>
 80082ce:	4628      	mov	r0, r5
 80082d0:	f7ff fe0e 	bl	8007ef0 <__sinit>
 80082d4:	4b2c      	ldr	r3, [pc, #176]	; (8008388 <_puts_r+0xd0>)
 80082d6:	429c      	cmp	r4, r3
 80082d8:	d120      	bne.n	800831c <_puts_r+0x64>
 80082da:	686c      	ldr	r4, [r5, #4]
 80082dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082de:	07db      	lsls	r3, r3, #31
 80082e0:	d405      	bmi.n	80082ee <_puts_r+0x36>
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	0598      	lsls	r0, r3, #22
 80082e6:	d402      	bmi.n	80082ee <_puts_r+0x36>
 80082e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ea:	f7ff fec4 	bl	8008076 <__retarget_lock_acquire_recursive>
 80082ee:	89a3      	ldrh	r3, [r4, #12]
 80082f0:	0719      	lsls	r1, r3, #28
 80082f2:	d51d      	bpl.n	8008330 <_puts_r+0x78>
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	b1db      	cbz	r3, 8008330 <_puts_r+0x78>
 80082f8:	3e01      	subs	r6, #1
 80082fa:	68a3      	ldr	r3, [r4, #8]
 80082fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008300:	3b01      	subs	r3, #1
 8008302:	60a3      	str	r3, [r4, #8]
 8008304:	bb39      	cbnz	r1, 8008356 <_puts_r+0x9e>
 8008306:	2b00      	cmp	r3, #0
 8008308:	da38      	bge.n	800837c <_puts_r+0xc4>
 800830a:	4622      	mov	r2, r4
 800830c:	210a      	movs	r1, #10
 800830e:	4628      	mov	r0, r5
 8008310:	f000 ff14 	bl	800913c <__swbuf_r>
 8008314:	3001      	adds	r0, #1
 8008316:	d011      	beq.n	800833c <_puts_r+0x84>
 8008318:	250a      	movs	r5, #10
 800831a:	e011      	b.n	8008340 <_puts_r+0x88>
 800831c:	4b1b      	ldr	r3, [pc, #108]	; (800838c <_puts_r+0xd4>)
 800831e:	429c      	cmp	r4, r3
 8008320:	d101      	bne.n	8008326 <_puts_r+0x6e>
 8008322:	68ac      	ldr	r4, [r5, #8]
 8008324:	e7da      	b.n	80082dc <_puts_r+0x24>
 8008326:	4b1a      	ldr	r3, [pc, #104]	; (8008390 <_puts_r+0xd8>)
 8008328:	429c      	cmp	r4, r3
 800832a:	bf08      	it	eq
 800832c:	68ec      	ldreq	r4, [r5, #12]
 800832e:	e7d5      	b.n	80082dc <_puts_r+0x24>
 8008330:	4621      	mov	r1, r4
 8008332:	4628      	mov	r0, r5
 8008334:	f000 ff66 	bl	8009204 <__swsetup_r>
 8008338:	2800      	cmp	r0, #0
 800833a:	d0dd      	beq.n	80082f8 <_puts_r+0x40>
 800833c:	f04f 35ff 	mov.w	r5, #4294967295
 8008340:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008342:	07da      	lsls	r2, r3, #31
 8008344:	d405      	bmi.n	8008352 <_puts_r+0x9a>
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	059b      	lsls	r3, r3, #22
 800834a:	d402      	bmi.n	8008352 <_puts_r+0x9a>
 800834c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800834e:	f7ff fe93 	bl	8008078 <__retarget_lock_release_recursive>
 8008352:	4628      	mov	r0, r5
 8008354:	bd70      	pop	{r4, r5, r6, pc}
 8008356:	2b00      	cmp	r3, #0
 8008358:	da04      	bge.n	8008364 <_puts_r+0xac>
 800835a:	69a2      	ldr	r2, [r4, #24]
 800835c:	429a      	cmp	r2, r3
 800835e:	dc06      	bgt.n	800836e <_puts_r+0xb6>
 8008360:	290a      	cmp	r1, #10
 8008362:	d004      	beq.n	800836e <_puts_r+0xb6>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	6022      	str	r2, [r4, #0]
 800836a:	7019      	strb	r1, [r3, #0]
 800836c:	e7c5      	b.n	80082fa <_puts_r+0x42>
 800836e:	4622      	mov	r2, r4
 8008370:	4628      	mov	r0, r5
 8008372:	f000 fee3 	bl	800913c <__swbuf_r>
 8008376:	3001      	adds	r0, #1
 8008378:	d1bf      	bne.n	80082fa <_puts_r+0x42>
 800837a:	e7df      	b.n	800833c <_puts_r+0x84>
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	250a      	movs	r5, #10
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	6022      	str	r2, [r4, #0]
 8008384:	701d      	strb	r5, [r3, #0]
 8008386:	e7db      	b.n	8008340 <_puts_r+0x88>
 8008388:	0800b33c 	.word	0x0800b33c
 800838c:	0800b35c 	.word	0x0800b35c
 8008390:	0800b31c 	.word	0x0800b31c

08008394 <puts>:
 8008394:	4b02      	ldr	r3, [pc, #8]	; (80083a0 <puts+0xc>)
 8008396:	4601      	mov	r1, r0
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	f7ff bf8d 	b.w	80082b8 <_puts_r>
 800839e:	bf00      	nop
 80083a0:	20000258 	.word	0x20000258

080083a4 <realloc>:
 80083a4:	4b02      	ldr	r3, [pc, #8]	; (80083b0 <realloc+0xc>)
 80083a6:	460a      	mov	r2, r1
 80083a8:	4601      	mov	r1, r0
 80083aa:	6818      	ldr	r0, [r3, #0]
 80083ac:	f002 b885 	b.w	800a4ba <_realloc_r>
 80083b0:	20000258 	.word	0x20000258

080083b4 <_sbrk_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4d06      	ldr	r5, [pc, #24]	; (80083d0 <_sbrk_r+0x1c>)
 80083b8:	2300      	movs	r3, #0
 80083ba:	4604      	mov	r4, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	602b      	str	r3, [r5, #0]
 80083c0:	f7fa fa02 	bl	80027c8 <_sbrk>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_sbrk_r+0x1a>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_sbrk_r+0x1a>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	20005d78 	.word	0x20005d78

080083d4 <siprintf>:
 80083d4:	b40e      	push	{r1, r2, r3}
 80083d6:	b500      	push	{lr}
 80083d8:	b09c      	sub	sp, #112	; 0x70
 80083da:	ab1d      	add	r3, sp, #116	; 0x74
 80083dc:	9002      	str	r0, [sp, #8]
 80083de:	9006      	str	r0, [sp, #24]
 80083e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083e4:	4809      	ldr	r0, [pc, #36]	; (800840c <siprintf+0x38>)
 80083e6:	9107      	str	r1, [sp, #28]
 80083e8:	9104      	str	r1, [sp, #16]
 80083ea:	4909      	ldr	r1, [pc, #36]	; (8008410 <siprintf+0x3c>)
 80083ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f0:	9105      	str	r1, [sp, #20]
 80083f2:	6800      	ldr	r0, [r0, #0]
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	a902      	add	r1, sp, #8
 80083f8:	f002 f8ea 	bl	800a5d0 <_svfiprintf_r>
 80083fc:	9b02      	ldr	r3, [sp, #8]
 80083fe:	2200      	movs	r2, #0
 8008400:	701a      	strb	r2, [r3, #0]
 8008402:	b01c      	add	sp, #112	; 0x70
 8008404:	f85d eb04 	ldr.w	lr, [sp], #4
 8008408:	b003      	add	sp, #12
 800840a:	4770      	bx	lr
 800840c:	20000258 	.word	0x20000258
 8008410:	ffff0208 	.word	0xffff0208

08008414 <__sread>:
 8008414:	b510      	push	{r4, lr}
 8008416:	460c      	mov	r4, r1
 8008418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841c:	f002 fcc6 	bl	800adac <_read_r>
 8008420:	2800      	cmp	r0, #0
 8008422:	bfab      	itete	ge
 8008424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008426:	89a3      	ldrhlt	r3, [r4, #12]
 8008428:	181b      	addge	r3, r3, r0
 800842a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800842e:	bfac      	ite	ge
 8008430:	6563      	strge	r3, [r4, #84]	; 0x54
 8008432:	81a3      	strhlt	r3, [r4, #12]
 8008434:	bd10      	pop	{r4, pc}

08008436 <__swrite>:
 8008436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800843a:	461f      	mov	r7, r3
 800843c:	898b      	ldrh	r3, [r1, #12]
 800843e:	05db      	lsls	r3, r3, #23
 8008440:	4605      	mov	r5, r0
 8008442:	460c      	mov	r4, r1
 8008444:	4616      	mov	r6, r2
 8008446:	d505      	bpl.n	8008454 <__swrite+0x1e>
 8008448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800844c:	2302      	movs	r3, #2
 800844e:	2200      	movs	r2, #0
 8008450:	f001 fac6 	bl	80099e0 <_lseek_r>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800845a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	4632      	mov	r2, r6
 8008462:	463b      	mov	r3, r7
 8008464:	4628      	mov	r0, r5
 8008466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800846a:	f000 beb9 	b.w	80091e0 <_write_r>

0800846e <__sseek>:
 800846e:	b510      	push	{r4, lr}
 8008470:	460c      	mov	r4, r1
 8008472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008476:	f001 fab3 	bl	80099e0 <_lseek_r>
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	bf15      	itete	ne
 8008480:	6560      	strne	r0, [r4, #84]	; 0x54
 8008482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800848a:	81a3      	strheq	r3, [r4, #12]
 800848c:	bf18      	it	ne
 800848e:	81a3      	strhne	r3, [r4, #12]
 8008490:	bd10      	pop	{r4, pc}

08008492 <__sclose>:
 8008492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008496:	f000 bf23 	b.w	80092e0 <_close_r>

0800849a <strchr>:
 800849a:	b2c9      	uxtb	r1, r1
 800849c:	4603      	mov	r3, r0
 800849e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084a2:	b11a      	cbz	r2, 80084ac <strchr+0x12>
 80084a4:	428a      	cmp	r2, r1
 80084a6:	d1f9      	bne.n	800849c <strchr+0x2>
 80084a8:	4618      	mov	r0, r3
 80084aa:	4770      	bx	lr
 80084ac:	2900      	cmp	r1, #0
 80084ae:	bf18      	it	ne
 80084b0:	2300      	movne	r3, #0
 80084b2:	e7f9      	b.n	80084a8 <strchr+0xe>

080084b4 <strncmp>:
 80084b4:	b510      	push	{r4, lr}
 80084b6:	b17a      	cbz	r2, 80084d8 <strncmp+0x24>
 80084b8:	4603      	mov	r3, r0
 80084ba:	3901      	subs	r1, #1
 80084bc:	1884      	adds	r4, r0, r2
 80084be:	f813 0b01 	ldrb.w	r0, [r3], #1
 80084c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80084c6:	4290      	cmp	r0, r2
 80084c8:	d101      	bne.n	80084ce <strncmp+0x1a>
 80084ca:	42a3      	cmp	r3, r4
 80084cc:	d101      	bne.n	80084d2 <strncmp+0x1e>
 80084ce:	1a80      	subs	r0, r0, r2
 80084d0:	bd10      	pop	{r4, pc}
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d1f3      	bne.n	80084be <strncmp+0xa>
 80084d6:	e7fa      	b.n	80084ce <strncmp+0x1a>
 80084d8:	4610      	mov	r0, r2
 80084da:	e7f9      	b.n	80084d0 <strncmp+0x1c>

080084dc <sulp>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4604      	mov	r4, r0
 80084e0:	460d      	mov	r5, r1
 80084e2:	ec45 4b10 	vmov	d0, r4, r5
 80084e6:	4616      	mov	r6, r2
 80084e8:	f001 fe82 	bl	800a1f0 <__ulp>
 80084ec:	ec51 0b10 	vmov	r0, r1, d0
 80084f0:	b17e      	cbz	r6, 8008512 <sulp+0x36>
 80084f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80084f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dd09      	ble.n	8008512 <sulp+0x36>
 80084fe:	051b      	lsls	r3, r3, #20
 8008500:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008504:	2400      	movs	r4, #0
 8008506:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800850a:	4622      	mov	r2, r4
 800850c:	462b      	mov	r3, r5
 800850e:	f7f8 f88b 	bl	8000628 <__aeabi_dmul>
 8008512:	bd70      	pop	{r4, r5, r6, pc}
 8008514:	0000      	movs	r0, r0
	...

08008518 <_strtod_l>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	ed2d 8b02 	vpush	{d8}
 8008520:	b09d      	sub	sp, #116	; 0x74
 8008522:	461f      	mov	r7, r3
 8008524:	2300      	movs	r3, #0
 8008526:	9318      	str	r3, [sp, #96]	; 0x60
 8008528:	4ba2      	ldr	r3, [pc, #648]	; (80087b4 <_strtod_l+0x29c>)
 800852a:	9213      	str	r2, [sp, #76]	; 0x4c
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	9305      	str	r3, [sp, #20]
 8008530:	4604      	mov	r4, r0
 8008532:	4618      	mov	r0, r3
 8008534:	4688      	mov	r8, r1
 8008536:	f7f7 fe5d 	bl	80001f4 <strlen>
 800853a:	f04f 0a00 	mov.w	sl, #0
 800853e:	4605      	mov	r5, r0
 8008540:	f04f 0b00 	mov.w	fp, #0
 8008544:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	2a2b      	cmp	r2, #43	; 0x2b
 800854e:	d04e      	beq.n	80085ee <_strtod_l+0xd6>
 8008550:	d83b      	bhi.n	80085ca <_strtod_l+0xb2>
 8008552:	2a0d      	cmp	r2, #13
 8008554:	d834      	bhi.n	80085c0 <_strtod_l+0xa8>
 8008556:	2a08      	cmp	r2, #8
 8008558:	d834      	bhi.n	80085c4 <_strtod_l+0xac>
 800855a:	2a00      	cmp	r2, #0
 800855c:	d03e      	beq.n	80085dc <_strtod_l+0xc4>
 800855e:	2300      	movs	r3, #0
 8008560:	930a      	str	r3, [sp, #40]	; 0x28
 8008562:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008564:	7833      	ldrb	r3, [r6, #0]
 8008566:	2b30      	cmp	r3, #48	; 0x30
 8008568:	f040 80b0 	bne.w	80086cc <_strtod_l+0x1b4>
 800856c:	7873      	ldrb	r3, [r6, #1]
 800856e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008572:	2b58      	cmp	r3, #88	; 0x58
 8008574:	d168      	bne.n	8008648 <_strtod_l+0x130>
 8008576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	ab18      	add	r3, sp, #96	; 0x60
 800857c:	9702      	str	r7, [sp, #8]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4a8d      	ldr	r2, [pc, #564]	; (80087b8 <_strtod_l+0x2a0>)
 8008582:	ab19      	add	r3, sp, #100	; 0x64
 8008584:	a917      	add	r1, sp, #92	; 0x5c
 8008586:	4620      	mov	r0, r4
 8008588:	f000 ff22 	bl	80093d0 <__gethex>
 800858c:	f010 0707 	ands.w	r7, r0, #7
 8008590:	4605      	mov	r5, r0
 8008592:	d005      	beq.n	80085a0 <_strtod_l+0x88>
 8008594:	2f06      	cmp	r7, #6
 8008596:	d12c      	bne.n	80085f2 <_strtod_l+0xda>
 8008598:	3601      	adds	r6, #1
 800859a:	2300      	movs	r3, #0
 800859c:	9617      	str	r6, [sp, #92]	; 0x5c
 800859e:	930a      	str	r3, [sp, #40]	; 0x28
 80085a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f040 8590 	bne.w	80090c8 <_strtod_l+0xbb0>
 80085a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085aa:	b1eb      	cbz	r3, 80085e8 <_strtod_l+0xd0>
 80085ac:	4652      	mov	r2, sl
 80085ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085b2:	ec43 2b10 	vmov	d0, r2, r3
 80085b6:	b01d      	add	sp, #116	; 0x74
 80085b8:	ecbd 8b02 	vpop	{d8}
 80085bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c0:	2a20      	cmp	r2, #32
 80085c2:	d1cc      	bne.n	800855e <_strtod_l+0x46>
 80085c4:	3301      	adds	r3, #1
 80085c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80085c8:	e7be      	b.n	8008548 <_strtod_l+0x30>
 80085ca:	2a2d      	cmp	r2, #45	; 0x2d
 80085cc:	d1c7      	bne.n	800855e <_strtod_l+0x46>
 80085ce:	2201      	movs	r2, #1
 80085d0:	920a      	str	r2, [sp, #40]	; 0x28
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80085d6:	785b      	ldrb	r3, [r3, #1]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1c2      	bne.n	8008562 <_strtod_l+0x4a>
 80085dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f040 856e 	bne.w	80090c4 <_strtod_l+0xbac>
 80085e8:	4652      	mov	r2, sl
 80085ea:	465b      	mov	r3, fp
 80085ec:	e7e1      	b.n	80085b2 <_strtod_l+0x9a>
 80085ee:	2200      	movs	r2, #0
 80085f0:	e7ee      	b.n	80085d0 <_strtod_l+0xb8>
 80085f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80085f4:	b13a      	cbz	r2, 8008606 <_strtod_l+0xee>
 80085f6:	2135      	movs	r1, #53	; 0x35
 80085f8:	a81a      	add	r0, sp, #104	; 0x68
 80085fa:	f001 ff04 	bl	800a406 <__copybits>
 80085fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008600:	4620      	mov	r0, r4
 8008602:	f001 fac3 	bl	8009b8c <_Bfree>
 8008606:	3f01      	subs	r7, #1
 8008608:	2f04      	cmp	r7, #4
 800860a:	d806      	bhi.n	800861a <_strtod_l+0x102>
 800860c:	e8df f007 	tbb	[pc, r7]
 8008610:	1714030a 	.word	0x1714030a
 8008614:	0a          	.byte	0x0a
 8008615:	00          	.byte	0x00
 8008616:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800861a:	0728      	lsls	r0, r5, #28
 800861c:	d5c0      	bpl.n	80085a0 <_strtod_l+0x88>
 800861e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008622:	e7bd      	b.n	80085a0 <_strtod_l+0x88>
 8008624:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008628:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800862a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800862e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008632:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008636:	e7f0      	b.n	800861a <_strtod_l+0x102>
 8008638:	f8df b180 	ldr.w	fp, [pc, #384]	; 80087bc <_strtod_l+0x2a4>
 800863c:	e7ed      	b.n	800861a <_strtod_l+0x102>
 800863e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008642:	f04f 3aff 	mov.w	sl, #4294967295
 8008646:	e7e8      	b.n	800861a <_strtod_l+0x102>
 8008648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	9217      	str	r2, [sp, #92]	; 0x5c
 800864e:	785b      	ldrb	r3, [r3, #1]
 8008650:	2b30      	cmp	r3, #48	; 0x30
 8008652:	d0f9      	beq.n	8008648 <_strtod_l+0x130>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0a3      	beq.n	80085a0 <_strtod_l+0x88>
 8008658:	2301      	movs	r3, #1
 800865a:	f04f 0900 	mov.w	r9, #0
 800865e:	9304      	str	r3, [sp, #16]
 8008660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008662:	9308      	str	r3, [sp, #32]
 8008664:	f8cd 901c 	str.w	r9, [sp, #28]
 8008668:	464f      	mov	r7, r9
 800866a:	220a      	movs	r2, #10
 800866c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800866e:	7806      	ldrb	r6, [r0, #0]
 8008670:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008674:	b2d9      	uxtb	r1, r3
 8008676:	2909      	cmp	r1, #9
 8008678:	d92a      	bls.n	80086d0 <_strtod_l+0x1b8>
 800867a:	9905      	ldr	r1, [sp, #20]
 800867c:	462a      	mov	r2, r5
 800867e:	f7ff ff19 	bl	80084b4 <strncmp>
 8008682:	b398      	cbz	r0, 80086ec <_strtod_l+0x1d4>
 8008684:	2000      	movs	r0, #0
 8008686:	4632      	mov	r2, r6
 8008688:	463d      	mov	r5, r7
 800868a:	9005      	str	r0, [sp, #20]
 800868c:	4603      	mov	r3, r0
 800868e:	2a65      	cmp	r2, #101	; 0x65
 8008690:	d001      	beq.n	8008696 <_strtod_l+0x17e>
 8008692:	2a45      	cmp	r2, #69	; 0x45
 8008694:	d118      	bne.n	80086c8 <_strtod_l+0x1b0>
 8008696:	b91d      	cbnz	r5, 80086a0 <_strtod_l+0x188>
 8008698:	9a04      	ldr	r2, [sp, #16]
 800869a:	4302      	orrs	r2, r0
 800869c:	d09e      	beq.n	80085dc <_strtod_l+0xc4>
 800869e:	2500      	movs	r5, #0
 80086a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80086a4:	f108 0201 	add.w	r2, r8, #1
 80086a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80086aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80086ae:	2a2b      	cmp	r2, #43	; 0x2b
 80086b0:	d075      	beq.n	800879e <_strtod_l+0x286>
 80086b2:	2a2d      	cmp	r2, #45	; 0x2d
 80086b4:	d07b      	beq.n	80087ae <_strtod_l+0x296>
 80086b6:	f04f 0c00 	mov.w	ip, #0
 80086ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80086be:	2909      	cmp	r1, #9
 80086c0:	f240 8082 	bls.w	80087c8 <_strtod_l+0x2b0>
 80086c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80086c8:	2600      	movs	r6, #0
 80086ca:	e09d      	b.n	8008808 <_strtod_l+0x2f0>
 80086cc:	2300      	movs	r3, #0
 80086ce:	e7c4      	b.n	800865a <_strtod_l+0x142>
 80086d0:	2f08      	cmp	r7, #8
 80086d2:	bfd8      	it	le
 80086d4:	9907      	ldrle	r1, [sp, #28]
 80086d6:	f100 0001 	add.w	r0, r0, #1
 80086da:	bfda      	itte	le
 80086dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80086e0:	9307      	strle	r3, [sp, #28]
 80086e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80086e6:	3701      	adds	r7, #1
 80086e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80086ea:	e7bf      	b.n	800866c <_strtod_l+0x154>
 80086ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086ee:	195a      	adds	r2, r3, r5
 80086f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80086f2:	5d5a      	ldrb	r2, [r3, r5]
 80086f4:	2f00      	cmp	r7, #0
 80086f6:	d037      	beq.n	8008768 <_strtod_l+0x250>
 80086f8:	9005      	str	r0, [sp, #20]
 80086fa:	463d      	mov	r5, r7
 80086fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008700:	2b09      	cmp	r3, #9
 8008702:	d912      	bls.n	800872a <_strtod_l+0x212>
 8008704:	2301      	movs	r3, #1
 8008706:	e7c2      	b.n	800868e <_strtod_l+0x176>
 8008708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	9217      	str	r2, [sp, #92]	; 0x5c
 800870e:	785a      	ldrb	r2, [r3, #1]
 8008710:	3001      	adds	r0, #1
 8008712:	2a30      	cmp	r2, #48	; 0x30
 8008714:	d0f8      	beq.n	8008708 <_strtod_l+0x1f0>
 8008716:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800871a:	2b08      	cmp	r3, #8
 800871c:	f200 84d9 	bhi.w	80090d2 <_strtod_l+0xbba>
 8008720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008722:	9005      	str	r0, [sp, #20]
 8008724:	2000      	movs	r0, #0
 8008726:	9308      	str	r3, [sp, #32]
 8008728:	4605      	mov	r5, r0
 800872a:	3a30      	subs	r2, #48	; 0x30
 800872c:	f100 0301 	add.w	r3, r0, #1
 8008730:	d014      	beq.n	800875c <_strtod_l+0x244>
 8008732:	9905      	ldr	r1, [sp, #20]
 8008734:	4419      	add	r1, r3
 8008736:	9105      	str	r1, [sp, #20]
 8008738:	462b      	mov	r3, r5
 800873a:	eb00 0e05 	add.w	lr, r0, r5
 800873e:	210a      	movs	r1, #10
 8008740:	4573      	cmp	r3, lr
 8008742:	d113      	bne.n	800876c <_strtod_l+0x254>
 8008744:	182b      	adds	r3, r5, r0
 8008746:	2b08      	cmp	r3, #8
 8008748:	f105 0501 	add.w	r5, r5, #1
 800874c:	4405      	add	r5, r0
 800874e:	dc1c      	bgt.n	800878a <_strtod_l+0x272>
 8008750:	9907      	ldr	r1, [sp, #28]
 8008752:	230a      	movs	r3, #10
 8008754:	fb03 2301 	mla	r3, r3, r1, r2
 8008758:	9307      	str	r3, [sp, #28]
 800875a:	2300      	movs	r3, #0
 800875c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800875e:	1c51      	adds	r1, r2, #1
 8008760:	9117      	str	r1, [sp, #92]	; 0x5c
 8008762:	7852      	ldrb	r2, [r2, #1]
 8008764:	4618      	mov	r0, r3
 8008766:	e7c9      	b.n	80086fc <_strtod_l+0x1e4>
 8008768:	4638      	mov	r0, r7
 800876a:	e7d2      	b.n	8008712 <_strtod_l+0x1fa>
 800876c:	2b08      	cmp	r3, #8
 800876e:	dc04      	bgt.n	800877a <_strtod_l+0x262>
 8008770:	9e07      	ldr	r6, [sp, #28]
 8008772:	434e      	muls	r6, r1
 8008774:	9607      	str	r6, [sp, #28]
 8008776:	3301      	adds	r3, #1
 8008778:	e7e2      	b.n	8008740 <_strtod_l+0x228>
 800877a:	f103 0c01 	add.w	ip, r3, #1
 800877e:	f1bc 0f10 	cmp.w	ip, #16
 8008782:	bfd8      	it	le
 8008784:	fb01 f909 	mulle.w	r9, r1, r9
 8008788:	e7f5      	b.n	8008776 <_strtod_l+0x25e>
 800878a:	2d10      	cmp	r5, #16
 800878c:	bfdc      	itt	le
 800878e:	230a      	movle	r3, #10
 8008790:	fb03 2909 	mlale	r9, r3, r9, r2
 8008794:	e7e1      	b.n	800875a <_strtod_l+0x242>
 8008796:	2300      	movs	r3, #0
 8008798:	9305      	str	r3, [sp, #20]
 800879a:	2301      	movs	r3, #1
 800879c:	e77c      	b.n	8008698 <_strtod_l+0x180>
 800879e:	f04f 0c00 	mov.w	ip, #0
 80087a2:	f108 0202 	add.w	r2, r8, #2
 80087a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80087a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80087ac:	e785      	b.n	80086ba <_strtod_l+0x1a2>
 80087ae:	f04f 0c01 	mov.w	ip, #1
 80087b2:	e7f6      	b.n	80087a2 <_strtod_l+0x28a>
 80087b4:	0800b458 	.word	0x0800b458
 80087b8:	0800b38c 	.word	0x0800b38c
 80087bc:	7ff00000 	.word	0x7ff00000
 80087c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087c2:	1c51      	adds	r1, r2, #1
 80087c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80087c6:	7852      	ldrb	r2, [r2, #1]
 80087c8:	2a30      	cmp	r2, #48	; 0x30
 80087ca:	d0f9      	beq.n	80087c0 <_strtod_l+0x2a8>
 80087cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80087d0:	2908      	cmp	r1, #8
 80087d2:	f63f af79 	bhi.w	80086c8 <_strtod_l+0x1b0>
 80087d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80087da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087dc:	9206      	str	r2, [sp, #24]
 80087de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087e0:	1c51      	adds	r1, r2, #1
 80087e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80087e4:	7852      	ldrb	r2, [r2, #1]
 80087e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80087ea:	2e09      	cmp	r6, #9
 80087ec:	d937      	bls.n	800885e <_strtod_l+0x346>
 80087ee:	9e06      	ldr	r6, [sp, #24]
 80087f0:	1b89      	subs	r1, r1, r6
 80087f2:	2908      	cmp	r1, #8
 80087f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80087f8:	dc02      	bgt.n	8008800 <_strtod_l+0x2e8>
 80087fa:	4576      	cmp	r6, lr
 80087fc:	bfa8      	it	ge
 80087fe:	4676      	movge	r6, lr
 8008800:	f1bc 0f00 	cmp.w	ip, #0
 8008804:	d000      	beq.n	8008808 <_strtod_l+0x2f0>
 8008806:	4276      	negs	r6, r6
 8008808:	2d00      	cmp	r5, #0
 800880a:	d14d      	bne.n	80088a8 <_strtod_l+0x390>
 800880c:	9904      	ldr	r1, [sp, #16]
 800880e:	4301      	orrs	r1, r0
 8008810:	f47f aec6 	bne.w	80085a0 <_strtod_l+0x88>
 8008814:	2b00      	cmp	r3, #0
 8008816:	f47f aee1 	bne.w	80085dc <_strtod_l+0xc4>
 800881a:	2a69      	cmp	r2, #105	; 0x69
 800881c:	d027      	beq.n	800886e <_strtod_l+0x356>
 800881e:	dc24      	bgt.n	800886a <_strtod_l+0x352>
 8008820:	2a49      	cmp	r2, #73	; 0x49
 8008822:	d024      	beq.n	800886e <_strtod_l+0x356>
 8008824:	2a4e      	cmp	r2, #78	; 0x4e
 8008826:	f47f aed9 	bne.w	80085dc <_strtod_l+0xc4>
 800882a:	499f      	ldr	r1, [pc, #636]	; (8008aa8 <_strtod_l+0x590>)
 800882c:	a817      	add	r0, sp, #92	; 0x5c
 800882e:	f001 f827 	bl	8009880 <__match>
 8008832:	2800      	cmp	r0, #0
 8008834:	f43f aed2 	beq.w	80085dc <_strtod_l+0xc4>
 8008838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b28      	cmp	r3, #40	; 0x28
 800883e:	d12d      	bne.n	800889c <_strtod_l+0x384>
 8008840:	499a      	ldr	r1, [pc, #616]	; (8008aac <_strtod_l+0x594>)
 8008842:	aa1a      	add	r2, sp, #104	; 0x68
 8008844:	a817      	add	r0, sp, #92	; 0x5c
 8008846:	f001 f82f 	bl	80098a8 <__hexnan>
 800884a:	2805      	cmp	r0, #5
 800884c:	d126      	bne.n	800889c <_strtod_l+0x384>
 800884e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008850:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008854:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008858:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800885c:	e6a0      	b.n	80085a0 <_strtod_l+0x88>
 800885e:	210a      	movs	r1, #10
 8008860:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008864:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008868:	e7b9      	b.n	80087de <_strtod_l+0x2c6>
 800886a:	2a6e      	cmp	r2, #110	; 0x6e
 800886c:	e7db      	b.n	8008826 <_strtod_l+0x30e>
 800886e:	4990      	ldr	r1, [pc, #576]	; (8008ab0 <_strtod_l+0x598>)
 8008870:	a817      	add	r0, sp, #92	; 0x5c
 8008872:	f001 f805 	bl	8009880 <__match>
 8008876:	2800      	cmp	r0, #0
 8008878:	f43f aeb0 	beq.w	80085dc <_strtod_l+0xc4>
 800887c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800887e:	498d      	ldr	r1, [pc, #564]	; (8008ab4 <_strtod_l+0x59c>)
 8008880:	3b01      	subs	r3, #1
 8008882:	a817      	add	r0, sp, #92	; 0x5c
 8008884:	9317      	str	r3, [sp, #92]	; 0x5c
 8008886:	f000 fffb 	bl	8009880 <__match>
 800888a:	b910      	cbnz	r0, 8008892 <_strtod_l+0x37a>
 800888c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800888e:	3301      	adds	r3, #1
 8008890:	9317      	str	r3, [sp, #92]	; 0x5c
 8008892:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008ac4 <_strtod_l+0x5ac>
 8008896:	f04f 0a00 	mov.w	sl, #0
 800889a:	e681      	b.n	80085a0 <_strtod_l+0x88>
 800889c:	4886      	ldr	r0, [pc, #536]	; (8008ab8 <_strtod_l+0x5a0>)
 800889e:	f002 fa97 	bl	800add0 <nan>
 80088a2:	ec5b ab10 	vmov	sl, fp, d0
 80088a6:	e67b      	b.n	80085a0 <_strtod_l+0x88>
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	9807      	ldr	r0, [sp, #28]
 80088ac:	1af3      	subs	r3, r6, r3
 80088ae:	2f00      	cmp	r7, #0
 80088b0:	bf08      	it	eq
 80088b2:	462f      	moveq	r7, r5
 80088b4:	2d10      	cmp	r5, #16
 80088b6:	9306      	str	r3, [sp, #24]
 80088b8:	46a8      	mov	r8, r5
 80088ba:	bfa8      	it	ge
 80088bc:	f04f 0810 	movge.w	r8, #16
 80088c0:	f7f7 fe38 	bl	8000534 <__aeabi_ui2d>
 80088c4:	2d09      	cmp	r5, #9
 80088c6:	4682      	mov	sl, r0
 80088c8:	468b      	mov	fp, r1
 80088ca:	dd13      	ble.n	80088f4 <_strtod_l+0x3dc>
 80088cc:	4b7b      	ldr	r3, [pc, #492]	; (8008abc <_strtod_l+0x5a4>)
 80088ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80088d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80088d6:	f7f7 fea7 	bl	8000628 <__aeabi_dmul>
 80088da:	4682      	mov	sl, r0
 80088dc:	4648      	mov	r0, r9
 80088de:	468b      	mov	fp, r1
 80088e0:	f7f7 fe28 	bl	8000534 <__aeabi_ui2d>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4650      	mov	r0, sl
 80088ea:	4659      	mov	r1, fp
 80088ec:	f7f7 fce6 	bl	80002bc <__adddf3>
 80088f0:	4682      	mov	sl, r0
 80088f2:	468b      	mov	fp, r1
 80088f4:	2d0f      	cmp	r5, #15
 80088f6:	dc38      	bgt.n	800896a <_strtod_l+0x452>
 80088f8:	9b06      	ldr	r3, [sp, #24]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f43f ae50 	beq.w	80085a0 <_strtod_l+0x88>
 8008900:	dd24      	ble.n	800894c <_strtod_l+0x434>
 8008902:	2b16      	cmp	r3, #22
 8008904:	dc0b      	bgt.n	800891e <_strtod_l+0x406>
 8008906:	496d      	ldr	r1, [pc, #436]	; (8008abc <_strtod_l+0x5a4>)
 8008908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800890c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008910:	4652      	mov	r2, sl
 8008912:	465b      	mov	r3, fp
 8008914:	f7f7 fe88 	bl	8000628 <__aeabi_dmul>
 8008918:	4682      	mov	sl, r0
 800891a:	468b      	mov	fp, r1
 800891c:	e640      	b.n	80085a0 <_strtod_l+0x88>
 800891e:	9a06      	ldr	r2, [sp, #24]
 8008920:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008924:	4293      	cmp	r3, r2
 8008926:	db20      	blt.n	800896a <_strtod_l+0x452>
 8008928:	4c64      	ldr	r4, [pc, #400]	; (8008abc <_strtod_l+0x5a4>)
 800892a:	f1c5 050f 	rsb	r5, r5, #15
 800892e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008932:	4652      	mov	r2, sl
 8008934:	465b      	mov	r3, fp
 8008936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800893a:	f7f7 fe75 	bl	8000628 <__aeabi_dmul>
 800893e:	9b06      	ldr	r3, [sp, #24]
 8008940:	1b5d      	subs	r5, r3, r5
 8008942:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008946:	e9d4 2300 	ldrd	r2, r3, [r4]
 800894a:	e7e3      	b.n	8008914 <_strtod_l+0x3fc>
 800894c:	9b06      	ldr	r3, [sp, #24]
 800894e:	3316      	adds	r3, #22
 8008950:	db0b      	blt.n	800896a <_strtod_l+0x452>
 8008952:	9b05      	ldr	r3, [sp, #20]
 8008954:	1b9e      	subs	r6, r3, r6
 8008956:	4b59      	ldr	r3, [pc, #356]	; (8008abc <_strtod_l+0x5a4>)
 8008958:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800895c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008960:	4650      	mov	r0, sl
 8008962:	4659      	mov	r1, fp
 8008964:	f7f7 ff8a 	bl	800087c <__aeabi_ddiv>
 8008968:	e7d6      	b.n	8008918 <_strtod_l+0x400>
 800896a:	9b06      	ldr	r3, [sp, #24]
 800896c:	eba5 0808 	sub.w	r8, r5, r8
 8008970:	4498      	add	r8, r3
 8008972:	f1b8 0f00 	cmp.w	r8, #0
 8008976:	dd74      	ble.n	8008a62 <_strtod_l+0x54a>
 8008978:	f018 030f 	ands.w	r3, r8, #15
 800897c:	d00a      	beq.n	8008994 <_strtod_l+0x47c>
 800897e:	494f      	ldr	r1, [pc, #316]	; (8008abc <_strtod_l+0x5a4>)
 8008980:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008984:	4652      	mov	r2, sl
 8008986:	465b      	mov	r3, fp
 8008988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800898c:	f7f7 fe4c 	bl	8000628 <__aeabi_dmul>
 8008990:	4682      	mov	sl, r0
 8008992:	468b      	mov	fp, r1
 8008994:	f038 080f 	bics.w	r8, r8, #15
 8008998:	d04f      	beq.n	8008a3a <_strtod_l+0x522>
 800899a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800899e:	dd22      	ble.n	80089e6 <_strtod_l+0x4ce>
 80089a0:	2500      	movs	r5, #0
 80089a2:	462e      	mov	r6, r5
 80089a4:	9507      	str	r5, [sp, #28]
 80089a6:	9505      	str	r5, [sp, #20]
 80089a8:	2322      	movs	r3, #34	; 0x22
 80089aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008ac4 <_strtod_l+0x5ac>
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	f04f 0a00 	mov.w	sl, #0
 80089b4:	9b07      	ldr	r3, [sp, #28]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f43f adf2 	beq.w	80085a0 <_strtod_l+0x88>
 80089bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089be:	4620      	mov	r0, r4
 80089c0:	f001 f8e4 	bl	8009b8c <_Bfree>
 80089c4:	9905      	ldr	r1, [sp, #20]
 80089c6:	4620      	mov	r0, r4
 80089c8:	f001 f8e0 	bl	8009b8c <_Bfree>
 80089cc:	4631      	mov	r1, r6
 80089ce:	4620      	mov	r0, r4
 80089d0:	f001 f8dc 	bl	8009b8c <_Bfree>
 80089d4:	9907      	ldr	r1, [sp, #28]
 80089d6:	4620      	mov	r0, r4
 80089d8:	f001 f8d8 	bl	8009b8c <_Bfree>
 80089dc:	4629      	mov	r1, r5
 80089de:	4620      	mov	r0, r4
 80089e0:	f001 f8d4 	bl	8009b8c <_Bfree>
 80089e4:	e5dc      	b.n	80085a0 <_strtod_l+0x88>
 80089e6:	4b36      	ldr	r3, [pc, #216]	; (8008ac0 <_strtod_l+0x5a8>)
 80089e8:	9304      	str	r3, [sp, #16]
 80089ea:	2300      	movs	r3, #0
 80089ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80089f0:	4650      	mov	r0, sl
 80089f2:	4659      	mov	r1, fp
 80089f4:	4699      	mov	r9, r3
 80089f6:	f1b8 0f01 	cmp.w	r8, #1
 80089fa:	dc21      	bgt.n	8008a40 <_strtod_l+0x528>
 80089fc:	b10b      	cbz	r3, 8008a02 <_strtod_l+0x4ea>
 80089fe:	4682      	mov	sl, r0
 8008a00:	468b      	mov	fp, r1
 8008a02:	4b2f      	ldr	r3, [pc, #188]	; (8008ac0 <_strtod_l+0x5a8>)
 8008a04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008a08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008a0c:	4652      	mov	r2, sl
 8008a0e:	465b      	mov	r3, fp
 8008a10:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008a14:	f7f7 fe08 	bl	8000628 <__aeabi_dmul>
 8008a18:	4b2a      	ldr	r3, [pc, #168]	; (8008ac4 <_strtod_l+0x5ac>)
 8008a1a:	460a      	mov	r2, r1
 8008a1c:	400b      	ands	r3, r1
 8008a1e:	492a      	ldr	r1, [pc, #168]	; (8008ac8 <_strtod_l+0x5b0>)
 8008a20:	428b      	cmp	r3, r1
 8008a22:	4682      	mov	sl, r0
 8008a24:	d8bc      	bhi.n	80089a0 <_strtod_l+0x488>
 8008a26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008a2a:	428b      	cmp	r3, r1
 8008a2c:	bf86      	itte	hi
 8008a2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008acc <_strtod_l+0x5b4>
 8008a32:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	e084      	b.n	8008b4a <_strtod_l+0x632>
 8008a40:	f018 0f01 	tst.w	r8, #1
 8008a44:	d005      	beq.n	8008a52 <_strtod_l+0x53a>
 8008a46:	9b04      	ldr	r3, [sp, #16]
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f7f7 fdec 	bl	8000628 <__aeabi_dmul>
 8008a50:	2301      	movs	r3, #1
 8008a52:	9a04      	ldr	r2, [sp, #16]
 8008a54:	3208      	adds	r2, #8
 8008a56:	f109 0901 	add.w	r9, r9, #1
 8008a5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a5e:	9204      	str	r2, [sp, #16]
 8008a60:	e7c9      	b.n	80089f6 <_strtod_l+0x4de>
 8008a62:	d0ea      	beq.n	8008a3a <_strtod_l+0x522>
 8008a64:	f1c8 0800 	rsb	r8, r8, #0
 8008a68:	f018 020f 	ands.w	r2, r8, #15
 8008a6c:	d00a      	beq.n	8008a84 <_strtod_l+0x56c>
 8008a6e:	4b13      	ldr	r3, [pc, #76]	; (8008abc <_strtod_l+0x5a4>)
 8008a70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a74:	4650      	mov	r0, sl
 8008a76:	4659      	mov	r1, fp
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	f7f7 fefe 	bl	800087c <__aeabi_ddiv>
 8008a80:	4682      	mov	sl, r0
 8008a82:	468b      	mov	fp, r1
 8008a84:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008a88:	d0d7      	beq.n	8008a3a <_strtod_l+0x522>
 8008a8a:	f1b8 0f1f 	cmp.w	r8, #31
 8008a8e:	dd1f      	ble.n	8008ad0 <_strtod_l+0x5b8>
 8008a90:	2500      	movs	r5, #0
 8008a92:	462e      	mov	r6, r5
 8008a94:	9507      	str	r5, [sp, #28]
 8008a96:	9505      	str	r5, [sp, #20]
 8008a98:	2322      	movs	r3, #34	; 0x22
 8008a9a:	f04f 0a00 	mov.w	sl, #0
 8008a9e:	f04f 0b00 	mov.w	fp, #0
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	e786      	b.n	80089b4 <_strtod_l+0x49c>
 8008aa6:	bf00      	nop
 8008aa8:	0800b389 	.word	0x0800b389
 8008aac:	0800b3a0 	.word	0x0800b3a0
 8008ab0:	0800b380 	.word	0x0800b380
 8008ab4:	0800b383 	.word	0x0800b383
 8008ab8:	0800b64a 	.word	0x0800b64a
 8008abc:	0800b508 	.word	0x0800b508
 8008ac0:	0800b4e0 	.word	0x0800b4e0
 8008ac4:	7ff00000 	.word	0x7ff00000
 8008ac8:	7ca00000 	.word	0x7ca00000
 8008acc:	7fefffff 	.word	0x7fefffff
 8008ad0:	f018 0310 	ands.w	r3, r8, #16
 8008ad4:	bf18      	it	ne
 8008ad6:	236a      	movne	r3, #106	; 0x6a
 8008ad8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008e88 <_strtod_l+0x970>
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	4650      	mov	r0, sl
 8008ae0:	4659      	mov	r1, fp
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f018 0f01 	tst.w	r8, #1
 8008ae8:	d004      	beq.n	8008af4 <_strtod_l+0x5dc>
 8008aea:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008aee:	f7f7 fd9b 	bl	8000628 <__aeabi_dmul>
 8008af2:	2301      	movs	r3, #1
 8008af4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008af8:	f109 0908 	add.w	r9, r9, #8
 8008afc:	d1f2      	bne.n	8008ae4 <_strtod_l+0x5cc>
 8008afe:	b10b      	cbz	r3, 8008b04 <_strtod_l+0x5ec>
 8008b00:	4682      	mov	sl, r0
 8008b02:	468b      	mov	fp, r1
 8008b04:	9b04      	ldr	r3, [sp, #16]
 8008b06:	b1c3      	cbz	r3, 8008b3a <_strtod_l+0x622>
 8008b08:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	4659      	mov	r1, fp
 8008b14:	dd11      	ble.n	8008b3a <_strtod_l+0x622>
 8008b16:	2b1f      	cmp	r3, #31
 8008b18:	f340 8124 	ble.w	8008d64 <_strtod_l+0x84c>
 8008b1c:	2b34      	cmp	r3, #52	; 0x34
 8008b1e:	bfde      	ittt	le
 8008b20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008b24:	f04f 33ff 	movle.w	r3, #4294967295
 8008b28:	fa03 f202 	lslle.w	r2, r3, r2
 8008b2c:	f04f 0a00 	mov.w	sl, #0
 8008b30:	bfcc      	ite	gt
 8008b32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008b36:	ea02 0b01 	andle.w	fp, r2, r1
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	4650      	mov	r0, sl
 8008b40:	4659      	mov	r1, fp
 8008b42:	f7f7 ffd9 	bl	8000af8 <__aeabi_dcmpeq>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d1a2      	bne.n	8008a90 <_strtod_l+0x578>
 8008b4a:	9b07      	ldr	r3, [sp, #28]
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	9908      	ldr	r1, [sp, #32]
 8008b50:	462b      	mov	r3, r5
 8008b52:	463a      	mov	r2, r7
 8008b54:	4620      	mov	r0, r4
 8008b56:	f001 f881 	bl	8009c5c <__s2b>
 8008b5a:	9007      	str	r0, [sp, #28]
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	f43f af1f 	beq.w	80089a0 <_strtod_l+0x488>
 8008b62:	9b05      	ldr	r3, [sp, #20]
 8008b64:	1b9e      	subs	r6, r3, r6
 8008b66:	9b06      	ldr	r3, [sp, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	bfb4      	ite	lt
 8008b6c:	4633      	movlt	r3, r6
 8008b6e:	2300      	movge	r3, #0
 8008b70:	930c      	str	r3, [sp, #48]	; 0x30
 8008b72:	9b06      	ldr	r3, [sp, #24]
 8008b74:	2500      	movs	r5, #0
 8008b76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008b7a:	9312      	str	r3, [sp, #72]	; 0x48
 8008b7c:	462e      	mov	r6, r5
 8008b7e:	9b07      	ldr	r3, [sp, #28]
 8008b80:	4620      	mov	r0, r4
 8008b82:	6859      	ldr	r1, [r3, #4]
 8008b84:	f000 ffc2 	bl	8009b0c <_Balloc>
 8008b88:	9005      	str	r0, [sp, #20]
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	f43f af0c 	beq.w	80089a8 <_strtod_l+0x490>
 8008b90:	9b07      	ldr	r3, [sp, #28]
 8008b92:	691a      	ldr	r2, [r3, #16]
 8008b94:	3202      	adds	r2, #2
 8008b96:	f103 010c 	add.w	r1, r3, #12
 8008b9a:	0092      	lsls	r2, r2, #2
 8008b9c:	300c      	adds	r0, #12
 8008b9e:	f7ff fa7d 	bl	800809c <memcpy>
 8008ba2:	ec4b ab10 	vmov	d0, sl, fp
 8008ba6:	aa1a      	add	r2, sp, #104	; 0x68
 8008ba8:	a919      	add	r1, sp, #100	; 0x64
 8008baa:	4620      	mov	r0, r4
 8008bac:	f001 fb9c 	bl	800a2e8 <__d2b>
 8008bb0:	ec4b ab18 	vmov	d8, sl, fp
 8008bb4:	9018      	str	r0, [sp, #96]	; 0x60
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f43f aef6 	beq.w	80089a8 <_strtod_l+0x490>
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f001 f8e6 	bl	8009d90 <__i2b>
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f43f aeee 	beq.w	80089a8 <_strtod_l+0x490>
 8008bcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bce:	9904      	ldr	r1, [sp, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	bfab      	itete	ge
 8008bd4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008bd6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008bd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008bda:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008bde:	bfac      	ite	ge
 8008be0:	eb03 0902 	addge.w	r9, r3, r2
 8008be4:	1ad7      	sublt	r7, r2, r3
 8008be6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008be8:	eba3 0801 	sub.w	r8, r3, r1
 8008bec:	4490      	add	r8, r2
 8008bee:	4ba1      	ldr	r3, [pc, #644]	; (8008e74 <_strtod_l+0x95c>)
 8008bf0:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bf4:	4598      	cmp	r8, r3
 8008bf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008bfa:	f280 80c7 	bge.w	8008d8c <_strtod_l+0x874>
 8008bfe:	eba3 0308 	sub.w	r3, r3, r8
 8008c02:	2b1f      	cmp	r3, #31
 8008c04:	eba2 0203 	sub.w	r2, r2, r3
 8008c08:	f04f 0101 	mov.w	r1, #1
 8008c0c:	f300 80b1 	bgt.w	8008d72 <_strtod_l+0x85a>
 8008c10:	fa01 f303 	lsl.w	r3, r1, r3
 8008c14:	930d      	str	r3, [sp, #52]	; 0x34
 8008c16:	2300      	movs	r3, #0
 8008c18:	9308      	str	r3, [sp, #32]
 8008c1a:	eb09 0802 	add.w	r8, r9, r2
 8008c1e:	9b04      	ldr	r3, [sp, #16]
 8008c20:	45c1      	cmp	r9, r8
 8008c22:	4417      	add	r7, r2
 8008c24:	441f      	add	r7, r3
 8008c26:	464b      	mov	r3, r9
 8008c28:	bfa8      	it	ge
 8008c2a:	4643      	movge	r3, r8
 8008c2c:	42bb      	cmp	r3, r7
 8008c2e:	bfa8      	it	ge
 8008c30:	463b      	movge	r3, r7
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	bfc2      	ittt	gt
 8008c36:	eba8 0803 	subgt.w	r8, r8, r3
 8008c3a:	1aff      	subgt	r7, r7, r3
 8008c3c:	eba9 0903 	subgt.w	r9, r9, r3
 8008c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dd17      	ble.n	8008c76 <_strtod_l+0x75e>
 8008c46:	4631      	mov	r1, r6
 8008c48:	461a      	mov	r2, r3
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f001 f960 	bl	8009f10 <__pow5mult>
 8008c50:	4606      	mov	r6, r0
 8008c52:	2800      	cmp	r0, #0
 8008c54:	f43f aea8 	beq.w	80089a8 <_strtod_l+0x490>
 8008c58:	4601      	mov	r1, r0
 8008c5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f001 f8ad 	bl	8009dbc <__multiply>
 8008c62:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c64:	2800      	cmp	r0, #0
 8008c66:	f43f ae9f 	beq.w	80089a8 <_strtod_l+0x490>
 8008c6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 ff8d 	bl	8009b8c <_Bfree>
 8008c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c74:	9318      	str	r3, [sp, #96]	; 0x60
 8008c76:	f1b8 0f00 	cmp.w	r8, #0
 8008c7a:	f300 808c 	bgt.w	8008d96 <_strtod_l+0x87e>
 8008c7e:	9b06      	ldr	r3, [sp, #24]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	dd08      	ble.n	8008c96 <_strtod_l+0x77e>
 8008c84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c86:	9905      	ldr	r1, [sp, #20]
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f001 f941 	bl	8009f10 <__pow5mult>
 8008c8e:	9005      	str	r0, [sp, #20]
 8008c90:	2800      	cmp	r0, #0
 8008c92:	f43f ae89 	beq.w	80089a8 <_strtod_l+0x490>
 8008c96:	2f00      	cmp	r7, #0
 8008c98:	dd08      	ble.n	8008cac <_strtod_l+0x794>
 8008c9a:	9905      	ldr	r1, [sp, #20]
 8008c9c:	463a      	mov	r2, r7
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f001 f990 	bl	8009fc4 <__lshift>
 8008ca4:	9005      	str	r0, [sp, #20]
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	f43f ae7e 	beq.w	80089a8 <_strtod_l+0x490>
 8008cac:	f1b9 0f00 	cmp.w	r9, #0
 8008cb0:	dd08      	ble.n	8008cc4 <_strtod_l+0x7ac>
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	464a      	mov	r2, r9
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f001 f984 	bl	8009fc4 <__lshift>
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f43f ae72 	beq.w	80089a8 <_strtod_l+0x490>
 8008cc4:	9a05      	ldr	r2, [sp, #20]
 8008cc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f001 fa07 	bl	800a0dc <__mdiff>
 8008cce:	4605      	mov	r5, r0
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	f43f ae69 	beq.w	80089a8 <_strtod_l+0x490>
 8008cd6:	68c3      	ldr	r3, [r0, #12]
 8008cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60c3      	str	r3, [r0, #12]
 8008cde:	4631      	mov	r1, r6
 8008ce0:	f001 f9e0 	bl	800a0a4 <__mcmp>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	da60      	bge.n	8008daa <_strtod_l+0x892>
 8008ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cea:	ea53 030a 	orrs.w	r3, r3, sl
 8008cee:	f040 8082 	bne.w	8008df6 <_strtod_l+0x8de>
 8008cf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d17d      	bne.n	8008df6 <_strtod_l+0x8de>
 8008cfa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008cfe:	0d1b      	lsrs	r3, r3, #20
 8008d00:	051b      	lsls	r3, r3, #20
 8008d02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008d06:	d976      	bls.n	8008df6 <_strtod_l+0x8de>
 8008d08:	696b      	ldr	r3, [r5, #20]
 8008d0a:	b913      	cbnz	r3, 8008d12 <_strtod_l+0x7fa>
 8008d0c:	692b      	ldr	r3, [r5, #16]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	dd71      	ble.n	8008df6 <_strtod_l+0x8de>
 8008d12:	4629      	mov	r1, r5
 8008d14:	2201      	movs	r2, #1
 8008d16:	4620      	mov	r0, r4
 8008d18:	f001 f954 	bl	8009fc4 <__lshift>
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4605      	mov	r5, r0
 8008d20:	f001 f9c0 	bl	800a0a4 <__mcmp>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	dd66      	ble.n	8008df6 <_strtod_l+0x8de>
 8008d28:	9904      	ldr	r1, [sp, #16]
 8008d2a:	4a53      	ldr	r2, [pc, #332]	; (8008e78 <_strtod_l+0x960>)
 8008d2c:	465b      	mov	r3, fp
 8008d2e:	2900      	cmp	r1, #0
 8008d30:	f000 8081 	beq.w	8008e36 <_strtod_l+0x91e>
 8008d34:	ea02 010b 	and.w	r1, r2, fp
 8008d38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008d3c:	dc7b      	bgt.n	8008e36 <_strtod_l+0x91e>
 8008d3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008d42:	f77f aea9 	ble.w	8008a98 <_strtod_l+0x580>
 8008d46:	4b4d      	ldr	r3, [pc, #308]	; (8008e7c <_strtod_l+0x964>)
 8008d48:	4650      	mov	r0, sl
 8008d4a:	4659      	mov	r1, fp
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f7f7 fc6b 	bl	8000628 <__aeabi_dmul>
 8008d52:	460b      	mov	r3, r1
 8008d54:	4303      	orrs	r3, r0
 8008d56:	bf08      	it	eq
 8008d58:	2322      	moveq	r3, #34	; 0x22
 8008d5a:	4682      	mov	sl, r0
 8008d5c:	468b      	mov	fp, r1
 8008d5e:	bf08      	it	eq
 8008d60:	6023      	streq	r3, [r4, #0]
 8008d62:	e62b      	b.n	80089bc <_strtod_l+0x4a4>
 8008d64:	f04f 32ff 	mov.w	r2, #4294967295
 8008d68:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6c:	ea03 0a0a 	and.w	sl, r3, sl
 8008d70:	e6e3      	b.n	8008b3a <_strtod_l+0x622>
 8008d72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008d76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008d7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008d7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008d82:	fa01 f308 	lsl.w	r3, r1, r8
 8008d86:	9308      	str	r3, [sp, #32]
 8008d88:	910d      	str	r1, [sp, #52]	; 0x34
 8008d8a:	e746      	b.n	8008c1a <_strtod_l+0x702>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	9308      	str	r3, [sp, #32]
 8008d90:	2301      	movs	r3, #1
 8008d92:	930d      	str	r3, [sp, #52]	; 0x34
 8008d94:	e741      	b.n	8008c1a <_strtod_l+0x702>
 8008d96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d98:	4642      	mov	r2, r8
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f001 f912 	bl	8009fc4 <__lshift>
 8008da0:	9018      	str	r0, [sp, #96]	; 0x60
 8008da2:	2800      	cmp	r0, #0
 8008da4:	f47f af6b 	bne.w	8008c7e <_strtod_l+0x766>
 8008da8:	e5fe      	b.n	80089a8 <_strtod_l+0x490>
 8008daa:	465f      	mov	r7, fp
 8008dac:	d16e      	bne.n	8008e8c <_strtod_l+0x974>
 8008dae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008db0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008db4:	b342      	cbz	r2, 8008e08 <_strtod_l+0x8f0>
 8008db6:	4a32      	ldr	r2, [pc, #200]	; (8008e80 <_strtod_l+0x968>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d128      	bne.n	8008e0e <_strtod_l+0x8f6>
 8008dbc:	9b04      	ldr	r3, [sp, #16]
 8008dbe:	4651      	mov	r1, sl
 8008dc0:	b1eb      	cbz	r3, 8008dfe <_strtod_l+0x8e6>
 8008dc2:	4b2d      	ldr	r3, [pc, #180]	; (8008e78 <_strtod_l+0x960>)
 8008dc4:	403b      	ands	r3, r7
 8008dc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008dca:	f04f 32ff 	mov.w	r2, #4294967295
 8008dce:	d819      	bhi.n	8008e04 <_strtod_l+0x8ec>
 8008dd0:	0d1b      	lsrs	r3, r3, #20
 8008dd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	d117      	bne.n	8008e0e <_strtod_l+0x8f6>
 8008dde:	4b29      	ldr	r3, [pc, #164]	; (8008e84 <_strtod_l+0x96c>)
 8008de0:	429f      	cmp	r7, r3
 8008de2:	d102      	bne.n	8008dea <_strtod_l+0x8d2>
 8008de4:	3101      	adds	r1, #1
 8008de6:	f43f addf 	beq.w	80089a8 <_strtod_l+0x490>
 8008dea:	4b23      	ldr	r3, [pc, #140]	; (8008e78 <_strtod_l+0x960>)
 8008dec:	403b      	ands	r3, r7
 8008dee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008df2:	f04f 0a00 	mov.w	sl, #0
 8008df6:	9b04      	ldr	r3, [sp, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1a4      	bne.n	8008d46 <_strtod_l+0x82e>
 8008dfc:	e5de      	b.n	80089bc <_strtod_l+0x4a4>
 8008dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008e02:	e7ea      	b.n	8008dda <_strtod_l+0x8c2>
 8008e04:	4613      	mov	r3, r2
 8008e06:	e7e8      	b.n	8008dda <_strtod_l+0x8c2>
 8008e08:	ea53 030a 	orrs.w	r3, r3, sl
 8008e0c:	d08c      	beq.n	8008d28 <_strtod_l+0x810>
 8008e0e:	9b08      	ldr	r3, [sp, #32]
 8008e10:	b1db      	cbz	r3, 8008e4a <_strtod_l+0x932>
 8008e12:	423b      	tst	r3, r7
 8008e14:	d0ef      	beq.n	8008df6 <_strtod_l+0x8de>
 8008e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e18:	9a04      	ldr	r2, [sp, #16]
 8008e1a:	4650      	mov	r0, sl
 8008e1c:	4659      	mov	r1, fp
 8008e1e:	b1c3      	cbz	r3, 8008e52 <_strtod_l+0x93a>
 8008e20:	f7ff fb5c 	bl	80084dc <sulp>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	ec51 0b18 	vmov	r0, r1, d8
 8008e2c:	f7f7 fa46 	bl	80002bc <__adddf3>
 8008e30:	4682      	mov	sl, r0
 8008e32:	468b      	mov	fp, r1
 8008e34:	e7df      	b.n	8008df6 <_strtod_l+0x8de>
 8008e36:	4013      	ands	r3, r2
 8008e38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008e3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e44:	f04f 3aff 	mov.w	sl, #4294967295
 8008e48:	e7d5      	b.n	8008df6 <_strtod_l+0x8de>
 8008e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e4c:	ea13 0f0a 	tst.w	r3, sl
 8008e50:	e7e0      	b.n	8008e14 <_strtod_l+0x8fc>
 8008e52:	f7ff fb43 	bl	80084dc <sulp>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	ec51 0b18 	vmov	r0, r1, d8
 8008e5e:	f7f7 fa2b 	bl	80002b8 <__aeabi_dsub>
 8008e62:	2200      	movs	r2, #0
 8008e64:	2300      	movs	r3, #0
 8008e66:	4682      	mov	sl, r0
 8008e68:	468b      	mov	fp, r1
 8008e6a:	f7f7 fe45 	bl	8000af8 <__aeabi_dcmpeq>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d0c1      	beq.n	8008df6 <_strtod_l+0x8de>
 8008e72:	e611      	b.n	8008a98 <_strtod_l+0x580>
 8008e74:	fffffc02 	.word	0xfffffc02
 8008e78:	7ff00000 	.word	0x7ff00000
 8008e7c:	39500000 	.word	0x39500000
 8008e80:	000fffff 	.word	0x000fffff
 8008e84:	7fefffff 	.word	0x7fefffff
 8008e88:	0800b3b8 	.word	0x0800b3b8
 8008e8c:	4631      	mov	r1, r6
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f001 fa86 	bl	800a3a0 <__ratio>
 8008e94:	ec59 8b10 	vmov	r8, r9, d0
 8008e98:	ee10 0a10 	vmov	r0, s0
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	f7f7 fe3c 	bl	8000b20 <__aeabi_dcmple>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d07a      	beq.n	8008fa2 <_strtod_l+0xa8a>
 8008eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d04a      	beq.n	8008f48 <_strtod_l+0xa30>
 8008eb2:	4b95      	ldr	r3, [pc, #596]	; (8009108 <_strtod_l+0xbf0>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008eba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009108 <_strtod_l+0xbf0>
 8008ebe:	f04f 0800 	mov.w	r8, #0
 8008ec2:	4b92      	ldr	r3, [pc, #584]	; (800910c <_strtod_l+0xbf4>)
 8008ec4:	403b      	ands	r3, r7
 8008ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ec8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eca:	4b91      	ldr	r3, [pc, #580]	; (8009110 <_strtod_l+0xbf8>)
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	f040 80b0 	bne.w	8009032 <_strtod_l+0xb1a>
 8008ed2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ed6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008eda:	ec4b ab10 	vmov	d0, sl, fp
 8008ede:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ee2:	f001 f985 	bl	800a1f0 <__ulp>
 8008ee6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008eea:	ec53 2b10 	vmov	r2, r3, d0
 8008eee:	f7f7 fb9b 	bl	8000628 <__aeabi_dmul>
 8008ef2:	4652      	mov	r2, sl
 8008ef4:	465b      	mov	r3, fp
 8008ef6:	f7f7 f9e1 	bl	80002bc <__adddf3>
 8008efa:	460b      	mov	r3, r1
 8008efc:	4983      	ldr	r1, [pc, #524]	; (800910c <_strtod_l+0xbf4>)
 8008efe:	4a85      	ldr	r2, [pc, #532]	; (8009114 <_strtod_l+0xbfc>)
 8008f00:	4019      	ands	r1, r3
 8008f02:	4291      	cmp	r1, r2
 8008f04:	4682      	mov	sl, r0
 8008f06:	d960      	bls.n	8008fca <_strtod_l+0xab2>
 8008f08:	ee18 3a90 	vmov	r3, s17
 8008f0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d104      	bne.n	8008f1e <_strtod_l+0xa06>
 8008f14:	ee18 3a10 	vmov	r3, s16
 8008f18:	3301      	adds	r3, #1
 8008f1a:	f43f ad45 	beq.w	80089a8 <_strtod_l+0x490>
 8008f1e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009120 <_strtod_l+0xc08>
 8008f22:	f04f 3aff 	mov.w	sl, #4294967295
 8008f26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 fe2f 	bl	8009b8c <_Bfree>
 8008f2e:	9905      	ldr	r1, [sp, #20]
 8008f30:	4620      	mov	r0, r4
 8008f32:	f000 fe2b 	bl	8009b8c <_Bfree>
 8008f36:	4631      	mov	r1, r6
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 fe27 	bl	8009b8c <_Bfree>
 8008f3e:	4629      	mov	r1, r5
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 fe23 	bl	8009b8c <_Bfree>
 8008f46:	e61a      	b.n	8008b7e <_strtod_l+0x666>
 8008f48:	f1ba 0f00 	cmp.w	sl, #0
 8008f4c:	d11b      	bne.n	8008f86 <_strtod_l+0xa6e>
 8008f4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f52:	b9f3      	cbnz	r3, 8008f92 <_strtod_l+0xa7a>
 8008f54:	4b6c      	ldr	r3, [pc, #432]	; (8009108 <_strtod_l+0xbf0>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	4640      	mov	r0, r8
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	f7f7 fdd6 	bl	8000b0c <__aeabi_dcmplt>
 8008f60:	b9d0      	cbnz	r0, 8008f98 <_strtod_l+0xa80>
 8008f62:	4640      	mov	r0, r8
 8008f64:	4649      	mov	r1, r9
 8008f66:	4b6c      	ldr	r3, [pc, #432]	; (8009118 <_strtod_l+0xc00>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f7f7 fb5d 	bl	8000628 <__aeabi_dmul>
 8008f6e:	4680      	mov	r8, r0
 8008f70:	4689      	mov	r9, r1
 8008f72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008f76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008f7a:	9315      	str	r3, [sp, #84]	; 0x54
 8008f7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008f80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f84:	e79d      	b.n	8008ec2 <_strtod_l+0x9aa>
 8008f86:	f1ba 0f01 	cmp.w	sl, #1
 8008f8a:	d102      	bne.n	8008f92 <_strtod_l+0xa7a>
 8008f8c:	2f00      	cmp	r7, #0
 8008f8e:	f43f ad83 	beq.w	8008a98 <_strtod_l+0x580>
 8008f92:	4b62      	ldr	r3, [pc, #392]	; (800911c <_strtod_l+0xc04>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	e78e      	b.n	8008eb6 <_strtod_l+0x99e>
 8008f98:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009118 <_strtod_l+0xc00>
 8008f9c:	f04f 0800 	mov.w	r8, #0
 8008fa0:	e7e7      	b.n	8008f72 <_strtod_l+0xa5a>
 8008fa2:	4b5d      	ldr	r3, [pc, #372]	; (8009118 <_strtod_l+0xc00>)
 8008fa4:	4640      	mov	r0, r8
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f7f7 fb3d 	bl	8000628 <__aeabi_dmul>
 8008fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fb0:	4680      	mov	r8, r0
 8008fb2:	4689      	mov	r9, r1
 8008fb4:	b933      	cbnz	r3, 8008fc4 <_strtod_l+0xaac>
 8008fb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fba:	900e      	str	r0, [sp, #56]	; 0x38
 8008fbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008fc2:	e7dd      	b.n	8008f80 <_strtod_l+0xa68>
 8008fc4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008fc8:	e7f9      	b.n	8008fbe <_strtod_l+0xaa6>
 8008fca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008fce:	9b04      	ldr	r3, [sp, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1a8      	bne.n	8008f26 <_strtod_l+0xa0e>
 8008fd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fda:	0d1b      	lsrs	r3, r3, #20
 8008fdc:	051b      	lsls	r3, r3, #20
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d1a1      	bne.n	8008f26 <_strtod_l+0xa0e>
 8008fe2:	4640      	mov	r0, r8
 8008fe4:	4649      	mov	r1, r9
 8008fe6:	f7f7 fe19 	bl	8000c1c <__aeabi_d2lz>
 8008fea:	f7f7 faef 	bl	80005cc <__aeabi_l2d>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	f7f7 f95f 	bl	80002b8 <__aeabi_dsub>
 8008ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ffc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009000:	ea43 030a 	orr.w	r3, r3, sl
 8009004:	4313      	orrs	r3, r2
 8009006:	4680      	mov	r8, r0
 8009008:	4689      	mov	r9, r1
 800900a:	d055      	beq.n	80090b8 <_strtod_l+0xba0>
 800900c:	a336      	add	r3, pc, #216	; (adr r3, 80090e8 <_strtod_l+0xbd0>)
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f7f7 fd7b 	bl	8000b0c <__aeabi_dcmplt>
 8009016:	2800      	cmp	r0, #0
 8009018:	f47f acd0 	bne.w	80089bc <_strtod_l+0x4a4>
 800901c:	a334      	add	r3, pc, #208	; (adr r3, 80090f0 <_strtod_l+0xbd8>)
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	4640      	mov	r0, r8
 8009024:	4649      	mov	r1, r9
 8009026:	f7f7 fd8f 	bl	8000b48 <__aeabi_dcmpgt>
 800902a:	2800      	cmp	r0, #0
 800902c:	f43f af7b 	beq.w	8008f26 <_strtod_l+0xa0e>
 8009030:	e4c4      	b.n	80089bc <_strtod_l+0x4a4>
 8009032:	9b04      	ldr	r3, [sp, #16]
 8009034:	b333      	cbz	r3, 8009084 <_strtod_l+0xb6c>
 8009036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009038:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800903c:	d822      	bhi.n	8009084 <_strtod_l+0xb6c>
 800903e:	a32e      	add	r3, pc, #184	; (adr r3, 80090f8 <_strtod_l+0xbe0>)
 8009040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009044:	4640      	mov	r0, r8
 8009046:	4649      	mov	r1, r9
 8009048:	f7f7 fd6a 	bl	8000b20 <__aeabi_dcmple>
 800904c:	b1a0      	cbz	r0, 8009078 <_strtod_l+0xb60>
 800904e:	4649      	mov	r1, r9
 8009050:	4640      	mov	r0, r8
 8009052:	f7f7 fdab 	bl	8000bac <__aeabi_d2uiz>
 8009056:	2801      	cmp	r0, #1
 8009058:	bf38      	it	cc
 800905a:	2001      	movcc	r0, #1
 800905c:	f7f7 fa6a 	bl	8000534 <__aeabi_ui2d>
 8009060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009062:	4680      	mov	r8, r0
 8009064:	4689      	mov	r9, r1
 8009066:	bb23      	cbnz	r3, 80090b2 <_strtod_l+0xb9a>
 8009068:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800906c:	9010      	str	r0, [sp, #64]	; 0x40
 800906e:	9311      	str	r3, [sp, #68]	; 0x44
 8009070:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009074:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800907c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009080:	1a9b      	subs	r3, r3, r2
 8009082:	9309      	str	r3, [sp, #36]	; 0x24
 8009084:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009088:	eeb0 0a48 	vmov.f32	s0, s16
 800908c:	eef0 0a68 	vmov.f32	s1, s17
 8009090:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009094:	f001 f8ac 	bl	800a1f0 <__ulp>
 8009098:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800909c:	ec53 2b10 	vmov	r2, r3, d0
 80090a0:	f7f7 fac2 	bl	8000628 <__aeabi_dmul>
 80090a4:	ec53 2b18 	vmov	r2, r3, d8
 80090a8:	f7f7 f908 	bl	80002bc <__adddf3>
 80090ac:	4682      	mov	sl, r0
 80090ae:	468b      	mov	fp, r1
 80090b0:	e78d      	b.n	8008fce <_strtod_l+0xab6>
 80090b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80090b6:	e7db      	b.n	8009070 <_strtod_l+0xb58>
 80090b8:	a311      	add	r3, pc, #68	; (adr r3, 8009100 <_strtod_l+0xbe8>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f7f7 fd25 	bl	8000b0c <__aeabi_dcmplt>
 80090c2:	e7b2      	b.n	800902a <_strtod_l+0xb12>
 80090c4:	2300      	movs	r3, #0
 80090c6:	930a      	str	r3, [sp, #40]	; 0x28
 80090c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	f7ff ba6b 	b.w	80085a8 <_strtod_l+0x90>
 80090d2:	2a65      	cmp	r2, #101	; 0x65
 80090d4:	f43f ab5f 	beq.w	8008796 <_strtod_l+0x27e>
 80090d8:	2a45      	cmp	r2, #69	; 0x45
 80090da:	f43f ab5c 	beq.w	8008796 <_strtod_l+0x27e>
 80090de:	2301      	movs	r3, #1
 80090e0:	f7ff bb94 	b.w	800880c <_strtod_l+0x2f4>
 80090e4:	f3af 8000 	nop.w
 80090e8:	94a03595 	.word	0x94a03595
 80090ec:	3fdfffff 	.word	0x3fdfffff
 80090f0:	35afe535 	.word	0x35afe535
 80090f4:	3fe00000 	.word	0x3fe00000
 80090f8:	ffc00000 	.word	0xffc00000
 80090fc:	41dfffff 	.word	0x41dfffff
 8009100:	94a03595 	.word	0x94a03595
 8009104:	3fcfffff 	.word	0x3fcfffff
 8009108:	3ff00000 	.word	0x3ff00000
 800910c:	7ff00000 	.word	0x7ff00000
 8009110:	7fe00000 	.word	0x7fe00000
 8009114:	7c9fffff 	.word	0x7c9fffff
 8009118:	3fe00000 	.word	0x3fe00000
 800911c:	bff00000 	.word	0xbff00000
 8009120:	7fefffff 	.word	0x7fefffff

08009124 <strtod>:
 8009124:	460a      	mov	r2, r1
 8009126:	4601      	mov	r1, r0
 8009128:	4802      	ldr	r0, [pc, #8]	; (8009134 <strtod+0x10>)
 800912a:	4b03      	ldr	r3, [pc, #12]	; (8009138 <strtod+0x14>)
 800912c:	6800      	ldr	r0, [r0, #0]
 800912e:	f7ff b9f3 	b.w	8008518 <_strtod_l>
 8009132:	bf00      	nop
 8009134:	20000258 	.word	0x20000258
 8009138:	200002c0 	.word	0x200002c0

0800913c <__swbuf_r>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	460e      	mov	r6, r1
 8009140:	4614      	mov	r4, r2
 8009142:	4605      	mov	r5, r0
 8009144:	b118      	cbz	r0, 800914e <__swbuf_r+0x12>
 8009146:	6983      	ldr	r3, [r0, #24]
 8009148:	b90b      	cbnz	r3, 800914e <__swbuf_r+0x12>
 800914a:	f7fe fed1 	bl	8007ef0 <__sinit>
 800914e:	4b21      	ldr	r3, [pc, #132]	; (80091d4 <__swbuf_r+0x98>)
 8009150:	429c      	cmp	r4, r3
 8009152:	d12b      	bne.n	80091ac <__swbuf_r+0x70>
 8009154:	686c      	ldr	r4, [r5, #4]
 8009156:	69a3      	ldr	r3, [r4, #24]
 8009158:	60a3      	str	r3, [r4, #8]
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	071a      	lsls	r2, r3, #28
 800915e:	d52f      	bpl.n	80091c0 <__swbuf_r+0x84>
 8009160:	6923      	ldr	r3, [r4, #16]
 8009162:	b36b      	cbz	r3, 80091c0 <__swbuf_r+0x84>
 8009164:	6923      	ldr	r3, [r4, #16]
 8009166:	6820      	ldr	r0, [r4, #0]
 8009168:	1ac0      	subs	r0, r0, r3
 800916a:	6963      	ldr	r3, [r4, #20]
 800916c:	b2f6      	uxtb	r6, r6
 800916e:	4283      	cmp	r3, r0
 8009170:	4637      	mov	r7, r6
 8009172:	dc04      	bgt.n	800917e <__swbuf_r+0x42>
 8009174:	4621      	mov	r1, r4
 8009176:	4628      	mov	r0, r5
 8009178:	f7fe fe14 	bl	8007da4 <_fflush_r>
 800917c:	bb30      	cbnz	r0, 80091cc <__swbuf_r+0x90>
 800917e:	68a3      	ldr	r3, [r4, #8]
 8009180:	3b01      	subs	r3, #1
 8009182:	60a3      	str	r3, [r4, #8]
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	6022      	str	r2, [r4, #0]
 800918a:	701e      	strb	r6, [r3, #0]
 800918c:	6963      	ldr	r3, [r4, #20]
 800918e:	3001      	adds	r0, #1
 8009190:	4283      	cmp	r3, r0
 8009192:	d004      	beq.n	800919e <__swbuf_r+0x62>
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	07db      	lsls	r3, r3, #31
 8009198:	d506      	bpl.n	80091a8 <__swbuf_r+0x6c>
 800919a:	2e0a      	cmp	r6, #10
 800919c:	d104      	bne.n	80091a8 <__swbuf_r+0x6c>
 800919e:	4621      	mov	r1, r4
 80091a0:	4628      	mov	r0, r5
 80091a2:	f7fe fdff 	bl	8007da4 <_fflush_r>
 80091a6:	b988      	cbnz	r0, 80091cc <__swbuf_r+0x90>
 80091a8:	4638      	mov	r0, r7
 80091aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ac:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <__swbuf_r+0x9c>)
 80091ae:	429c      	cmp	r4, r3
 80091b0:	d101      	bne.n	80091b6 <__swbuf_r+0x7a>
 80091b2:	68ac      	ldr	r4, [r5, #8]
 80091b4:	e7cf      	b.n	8009156 <__swbuf_r+0x1a>
 80091b6:	4b09      	ldr	r3, [pc, #36]	; (80091dc <__swbuf_r+0xa0>)
 80091b8:	429c      	cmp	r4, r3
 80091ba:	bf08      	it	eq
 80091bc:	68ec      	ldreq	r4, [r5, #12]
 80091be:	e7ca      	b.n	8009156 <__swbuf_r+0x1a>
 80091c0:	4621      	mov	r1, r4
 80091c2:	4628      	mov	r0, r5
 80091c4:	f000 f81e 	bl	8009204 <__swsetup_r>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d0cb      	beq.n	8009164 <__swbuf_r+0x28>
 80091cc:	f04f 37ff 	mov.w	r7, #4294967295
 80091d0:	e7ea      	b.n	80091a8 <__swbuf_r+0x6c>
 80091d2:	bf00      	nop
 80091d4:	0800b33c 	.word	0x0800b33c
 80091d8:	0800b35c 	.word	0x0800b35c
 80091dc:	0800b31c 	.word	0x0800b31c

080091e0 <_write_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d07      	ldr	r5, [pc, #28]	; (8009200 <_write_r+0x20>)
 80091e4:	4604      	mov	r4, r0
 80091e6:	4608      	mov	r0, r1
 80091e8:	4611      	mov	r1, r2
 80091ea:	2200      	movs	r2, #0
 80091ec:	602a      	str	r2, [r5, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	f7fa f88c 	bl	800330c <_write>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	d102      	bne.n	80091fe <_write_r+0x1e>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	b103      	cbz	r3, 80091fe <_write_r+0x1e>
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	bd38      	pop	{r3, r4, r5, pc}
 8009200:	20005d78 	.word	0x20005d78

08009204 <__swsetup_r>:
 8009204:	4b32      	ldr	r3, [pc, #200]	; (80092d0 <__swsetup_r+0xcc>)
 8009206:	b570      	push	{r4, r5, r6, lr}
 8009208:	681d      	ldr	r5, [r3, #0]
 800920a:	4606      	mov	r6, r0
 800920c:	460c      	mov	r4, r1
 800920e:	b125      	cbz	r5, 800921a <__swsetup_r+0x16>
 8009210:	69ab      	ldr	r3, [r5, #24]
 8009212:	b913      	cbnz	r3, 800921a <__swsetup_r+0x16>
 8009214:	4628      	mov	r0, r5
 8009216:	f7fe fe6b 	bl	8007ef0 <__sinit>
 800921a:	4b2e      	ldr	r3, [pc, #184]	; (80092d4 <__swsetup_r+0xd0>)
 800921c:	429c      	cmp	r4, r3
 800921e:	d10f      	bne.n	8009240 <__swsetup_r+0x3c>
 8009220:	686c      	ldr	r4, [r5, #4]
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009228:	0719      	lsls	r1, r3, #28
 800922a:	d42c      	bmi.n	8009286 <__swsetup_r+0x82>
 800922c:	06dd      	lsls	r5, r3, #27
 800922e:	d411      	bmi.n	8009254 <__swsetup_r+0x50>
 8009230:	2309      	movs	r3, #9
 8009232:	6033      	str	r3, [r6, #0]
 8009234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	f04f 30ff 	mov.w	r0, #4294967295
 800923e:	e03e      	b.n	80092be <__swsetup_r+0xba>
 8009240:	4b25      	ldr	r3, [pc, #148]	; (80092d8 <__swsetup_r+0xd4>)
 8009242:	429c      	cmp	r4, r3
 8009244:	d101      	bne.n	800924a <__swsetup_r+0x46>
 8009246:	68ac      	ldr	r4, [r5, #8]
 8009248:	e7eb      	b.n	8009222 <__swsetup_r+0x1e>
 800924a:	4b24      	ldr	r3, [pc, #144]	; (80092dc <__swsetup_r+0xd8>)
 800924c:	429c      	cmp	r4, r3
 800924e:	bf08      	it	eq
 8009250:	68ec      	ldreq	r4, [r5, #12]
 8009252:	e7e6      	b.n	8009222 <__swsetup_r+0x1e>
 8009254:	0758      	lsls	r0, r3, #29
 8009256:	d512      	bpl.n	800927e <__swsetup_r+0x7a>
 8009258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800925a:	b141      	cbz	r1, 800926e <__swsetup_r+0x6a>
 800925c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009260:	4299      	cmp	r1, r3
 8009262:	d002      	beq.n	800926a <__swsetup_r+0x66>
 8009264:	4630      	mov	r0, r6
 8009266:	f7fe ff2f 	bl	80080c8 <_free_r>
 800926a:	2300      	movs	r3, #0
 800926c:	6363      	str	r3, [r4, #52]	; 0x34
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	2300      	movs	r3, #0
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f043 0308 	orr.w	r3, r3, #8
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	b94b      	cbnz	r3, 800929e <__swsetup_r+0x9a>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009294:	d003      	beq.n	800929e <__swsetup_r+0x9a>
 8009296:	4621      	mov	r1, r4
 8009298:	4630      	mov	r0, r6
 800929a:	f000 fbd9 	bl	8009a50 <__smakebuf_r>
 800929e:	89a0      	ldrh	r0, [r4, #12]
 80092a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092a4:	f010 0301 	ands.w	r3, r0, #1
 80092a8:	d00a      	beq.n	80092c0 <__swsetup_r+0xbc>
 80092aa:	2300      	movs	r3, #0
 80092ac:	60a3      	str	r3, [r4, #8]
 80092ae:	6963      	ldr	r3, [r4, #20]
 80092b0:	425b      	negs	r3, r3
 80092b2:	61a3      	str	r3, [r4, #24]
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	b943      	cbnz	r3, 80092ca <__swsetup_r+0xc6>
 80092b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092bc:	d1ba      	bne.n	8009234 <__swsetup_r+0x30>
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	0781      	lsls	r1, r0, #30
 80092c2:	bf58      	it	pl
 80092c4:	6963      	ldrpl	r3, [r4, #20]
 80092c6:	60a3      	str	r3, [r4, #8]
 80092c8:	e7f4      	b.n	80092b4 <__swsetup_r+0xb0>
 80092ca:	2000      	movs	r0, #0
 80092cc:	e7f7      	b.n	80092be <__swsetup_r+0xba>
 80092ce:	bf00      	nop
 80092d0:	20000258 	.word	0x20000258
 80092d4:	0800b33c 	.word	0x0800b33c
 80092d8:	0800b35c 	.word	0x0800b35c
 80092dc:	0800b31c 	.word	0x0800b31c

080092e0 <_close_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d06      	ldr	r5, [pc, #24]	; (80092fc <_close_r+0x1c>)
 80092e4:	2300      	movs	r3, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	4608      	mov	r0, r1
 80092ea:	602b      	str	r3, [r5, #0]
 80092ec:	f7f9 fa37 	bl	800275e <_close>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_close_r+0x1a>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_close_r+0x1a>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	20005d78 	.word	0x20005d78

08009300 <rshift>:
 8009300:	6903      	ldr	r3, [r0, #16]
 8009302:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009306:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800930a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800930e:	f100 0414 	add.w	r4, r0, #20
 8009312:	dd45      	ble.n	80093a0 <rshift+0xa0>
 8009314:	f011 011f 	ands.w	r1, r1, #31
 8009318:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800931c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009320:	d10c      	bne.n	800933c <rshift+0x3c>
 8009322:	f100 0710 	add.w	r7, r0, #16
 8009326:	4629      	mov	r1, r5
 8009328:	42b1      	cmp	r1, r6
 800932a:	d334      	bcc.n	8009396 <rshift+0x96>
 800932c:	1a9b      	subs	r3, r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	1eea      	subs	r2, r5, #3
 8009332:	4296      	cmp	r6, r2
 8009334:	bf38      	it	cc
 8009336:	2300      	movcc	r3, #0
 8009338:	4423      	add	r3, r4
 800933a:	e015      	b.n	8009368 <rshift+0x68>
 800933c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009340:	f1c1 0820 	rsb	r8, r1, #32
 8009344:	40cf      	lsrs	r7, r1
 8009346:	f105 0e04 	add.w	lr, r5, #4
 800934a:	46a1      	mov	r9, r4
 800934c:	4576      	cmp	r6, lr
 800934e:	46f4      	mov	ip, lr
 8009350:	d815      	bhi.n	800937e <rshift+0x7e>
 8009352:	1a9a      	subs	r2, r3, r2
 8009354:	0092      	lsls	r2, r2, #2
 8009356:	3a04      	subs	r2, #4
 8009358:	3501      	adds	r5, #1
 800935a:	42ae      	cmp	r6, r5
 800935c:	bf38      	it	cc
 800935e:	2200      	movcc	r2, #0
 8009360:	18a3      	adds	r3, r4, r2
 8009362:	50a7      	str	r7, [r4, r2]
 8009364:	b107      	cbz	r7, 8009368 <rshift+0x68>
 8009366:	3304      	adds	r3, #4
 8009368:	1b1a      	subs	r2, r3, r4
 800936a:	42a3      	cmp	r3, r4
 800936c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009370:	bf08      	it	eq
 8009372:	2300      	moveq	r3, #0
 8009374:	6102      	str	r2, [r0, #16]
 8009376:	bf08      	it	eq
 8009378:	6143      	streq	r3, [r0, #20]
 800937a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800937e:	f8dc c000 	ldr.w	ip, [ip]
 8009382:	fa0c fc08 	lsl.w	ip, ip, r8
 8009386:	ea4c 0707 	orr.w	r7, ip, r7
 800938a:	f849 7b04 	str.w	r7, [r9], #4
 800938e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009392:	40cf      	lsrs	r7, r1
 8009394:	e7da      	b.n	800934c <rshift+0x4c>
 8009396:	f851 cb04 	ldr.w	ip, [r1], #4
 800939a:	f847 cf04 	str.w	ip, [r7, #4]!
 800939e:	e7c3      	b.n	8009328 <rshift+0x28>
 80093a0:	4623      	mov	r3, r4
 80093a2:	e7e1      	b.n	8009368 <rshift+0x68>

080093a4 <__hexdig_fun>:
 80093a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80093a8:	2b09      	cmp	r3, #9
 80093aa:	d802      	bhi.n	80093b2 <__hexdig_fun+0xe>
 80093ac:	3820      	subs	r0, #32
 80093ae:	b2c0      	uxtb	r0, r0
 80093b0:	4770      	bx	lr
 80093b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80093b6:	2b05      	cmp	r3, #5
 80093b8:	d801      	bhi.n	80093be <__hexdig_fun+0x1a>
 80093ba:	3847      	subs	r0, #71	; 0x47
 80093bc:	e7f7      	b.n	80093ae <__hexdig_fun+0xa>
 80093be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80093c2:	2b05      	cmp	r3, #5
 80093c4:	d801      	bhi.n	80093ca <__hexdig_fun+0x26>
 80093c6:	3827      	subs	r0, #39	; 0x27
 80093c8:	e7f1      	b.n	80093ae <__hexdig_fun+0xa>
 80093ca:	2000      	movs	r0, #0
 80093cc:	4770      	bx	lr
	...

080093d0 <__gethex>:
 80093d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d4:	ed2d 8b02 	vpush	{d8}
 80093d8:	b089      	sub	sp, #36	; 0x24
 80093da:	ee08 0a10 	vmov	s16, r0
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	4bb4      	ldr	r3, [pc, #720]	; (80096b4 <__gethex+0x2e4>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	4618      	mov	r0, r3
 80093e8:	468b      	mov	fp, r1
 80093ea:	4690      	mov	r8, r2
 80093ec:	f7f6 ff02 	bl	80001f4 <strlen>
 80093f0:	9b01      	ldr	r3, [sp, #4]
 80093f2:	f8db 2000 	ldr.w	r2, [fp]
 80093f6:	4403      	add	r3, r0
 80093f8:	4682      	mov	sl, r0
 80093fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80093fe:	9305      	str	r3, [sp, #20]
 8009400:	1c93      	adds	r3, r2, #2
 8009402:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009406:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800940a:	32fe      	adds	r2, #254	; 0xfe
 800940c:	18d1      	adds	r1, r2, r3
 800940e:	461f      	mov	r7, r3
 8009410:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009414:	9100      	str	r1, [sp, #0]
 8009416:	2830      	cmp	r0, #48	; 0x30
 8009418:	d0f8      	beq.n	800940c <__gethex+0x3c>
 800941a:	f7ff ffc3 	bl	80093a4 <__hexdig_fun>
 800941e:	4604      	mov	r4, r0
 8009420:	2800      	cmp	r0, #0
 8009422:	d13a      	bne.n	800949a <__gethex+0xca>
 8009424:	9901      	ldr	r1, [sp, #4]
 8009426:	4652      	mov	r2, sl
 8009428:	4638      	mov	r0, r7
 800942a:	f7ff f843 	bl	80084b4 <strncmp>
 800942e:	4605      	mov	r5, r0
 8009430:	2800      	cmp	r0, #0
 8009432:	d168      	bne.n	8009506 <__gethex+0x136>
 8009434:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009438:	eb07 060a 	add.w	r6, r7, sl
 800943c:	f7ff ffb2 	bl	80093a4 <__hexdig_fun>
 8009440:	2800      	cmp	r0, #0
 8009442:	d062      	beq.n	800950a <__gethex+0x13a>
 8009444:	4633      	mov	r3, r6
 8009446:	7818      	ldrb	r0, [r3, #0]
 8009448:	2830      	cmp	r0, #48	; 0x30
 800944a:	461f      	mov	r7, r3
 800944c:	f103 0301 	add.w	r3, r3, #1
 8009450:	d0f9      	beq.n	8009446 <__gethex+0x76>
 8009452:	f7ff ffa7 	bl	80093a4 <__hexdig_fun>
 8009456:	2301      	movs	r3, #1
 8009458:	fab0 f480 	clz	r4, r0
 800945c:	0964      	lsrs	r4, r4, #5
 800945e:	4635      	mov	r5, r6
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	463a      	mov	r2, r7
 8009464:	4616      	mov	r6, r2
 8009466:	3201      	adds	r2, #1
 8009468:	7830      	ldrb	r0, [r6, #0]
 800946a:	f7ff ff9b 	bl	80093a4 <__hexdig_fun>
 800946e:	2800      	cmp	r0, #0
 8009470:	d1f8      	bne.n	8009464 <__gethex+0x94>
 8009472:	9901      	ldr	r1, [sp, #4]
 8009474:	4652      	mov	r2, sl
 8009476:	4630      	mov	r0, r6
 8009478:	f7ff f81c 	bl	80084b4 <strncmp>
 800947c:	b980      	cbnz	r0, 80094a0 <__gethex+0xd0>
 800947e:	b94d      	cbnz	r5, 8009494 <__gethex+0xc4>
 8009480:	eb06 050a 	add.w	r5, r6, sl
 8009484:	462a      	mov	r2, r5
 8009486:	4616      	mov	r6, r2
 8009488:	3201      	adds	r2, #1
 800948a:	7830      	ldrb	r0, [r6, #0]
 800948c:	f7ff ff8a 	bl	80093a4 <__hexdig_fun>
 8009490:	2800      	cmp	r0, #0
 8009492:	d1f8      	bne.n	8009486 <__gethex+0xb6>
 8009494:	1bad      	subs	r5, r5, r6
 8009496:	00ad      	lsls	r5, r5, #2
 8009498:	e004      	b.n	80094a4 <__gethex+0xd4>
 800949a:	2400      	movs	r4, #0
 800949c:	4625      	mov	r5, r4
 800949e:	e7e0      	b.n	8009462 <__gethex+0x92>
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	d1f7      	bne.n	8009494 <__gethex+0xc4>
 80094a4:	7833      	ldrb	r3, [r6, #0]
 80094a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094aa:	2b50      	cmp	r3, #80	; 0x50
 80094ac:	d13b      	bne.n	8009526 <__gethex+0x156>
 80094ae:	7873      	ldrb	r3, [r6, #1]
 80094b0:	2b2b      	cmp	r3, #43	; 0x2b
 80094b2:	d02c      	beq.n	800950e <__gethex+0x13e>
 80094b4:	2b2d      	cmp	r3, #45	; 0x2d
 80094b6:	d02e      	beq.n	8009516 <__gethex+0x146>
 80094b8:	1c71      	adds	r1, r6, #1
 80094ba:	f04f 0900 	mov.w	r9, #0
 80094be:	7808      	ldrb	r0, [r1, #0]
 80094c0:	f7ff ff70 	bl	80093a4 <__hexdig_fun>
 80094c4:	1e43      	subs	r3, r0, #1
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b18      	cmp	r3, #24
 80094ca:	d82c      	bhi.n	8009526 <__gethex+0x156>
 80094cc:	f1a0 0210 	sub.w	r2, r0, #16
 80094d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80094d4:	f7ff ff66 	bl	80093a4 <__hexdig_fun>
 80094d8:	1e43      	subs	r3, r0, #1
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b18      	cmp	r3, #24
 80094de:	d91d      	bls.n	800951c <__gethex+0x14c>
 80094e0:	f1b9 0f00 	cmp.w	r9, #0
 80094e4:	d000      	beq.n	80094e8 <__gethex+0x118>
 80094e6:	4252      	negs	r2, r2
 80094e8:	4415      	add	r5, r2
 80094ea:	f8cb 1000 	str.w	r1, [fp]
 80094ee:	b1e4      	cbz	r4, 800952a <__gethex+0x15a>
 80094f0:	9b00      	ldr	r3, [sp, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	bf14      	ite	ne
 80094f6:	2700      	movne	r7, #0
 80094f8:	2706      	moveq	r7, #6
 80094fa:	4638      	mov	r0, r7
 80094fc:	b009      	add	sp, #36	; 0x24
 80094fe:	ecbd 8b02 	vpop	{d8}
 8009502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009506:	463e      	mov	r6, r7
 8009508:	4625      	mov	r5, r4
 800950a:	2401      	movs	r4, #1
 800950c:	e7ca      	b.n	80094a4 <__gethex+0xd4>
 800950e:	f04f 0900 	mov.w	r9, #0
 8009512:	1cb1      	adds	r1, r6, #2
 8009514:	e7d3      	b.n	80094be <__gethex+0xee>
 8009516:	f04f 0901 	mov.w	r9, #1
 800951a:	e7fa      	b.n	8009512 <__gethex+0x142>
 800951c:	230a      	movs	r3, #10
 800951e:	fb03 0202 	mla	r2, r3, r2, r0
 8009522:	3a10      	subs	r2, #16
 8009524:	e7d4      	b.n	80094d0 <__gethex+0x100>
 8009526:	4631      	mov	r1, r6
 8009528:	e7df      	b.n	80094ea <__gethex+0x11a>
 800952a:	1bf3      	subs	r3, r6, r7
 800952c:	3b01      	subs	r3, #1
 800952e:	4621      	mov	r1, r4
 8009530:	2b07      	cmp	r3, #7
 8009532:	dc0b      	bgt.n	800954c <__gethex+0x17c>
 8009534:	ee18 0a10 	vmov	r0, s16
 8009538:	f000 fae8 	bl	8009b0c <_Balloc>
 800953c:	4604      	mov	r4, r0
 800953e:	b940      	cbnz	r0, 8009552 <__gethex+0x182>
 8009540:	4b5d      	ldr	r3, [pc, #372]	; (80096b8 <__gethex+0x2e8>)
 8009542:	4602      	mov	r2, r0
 8009544:	21de      	movs	r1, #222	; 0xde
 8009546:	485d      	ldr	r0, [pc, #372]	; (80096bc <__gethex+0x2ec>)
 8009548:	f001 fc58 	bl	800adfc <__assert_func>
 800954c:	3101      	adds	r1, #1
 800954e:	105b      	asrs	r3, r3, #1
 8009550:	e7ee      	b.n	8009530 <__gethex+0x160>
 8009552:	f100 0914 	add.w	r9, r0, #20
 8009556:	f04f 0b00 	mov.w	fp, #0
 800955a:	f1ca 0301 	rsb	r3, sl, #1
 800955e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009562:	f8cd b000 	str.w	fp, [sp]
 8009566:	9306      	str	r3, [sp, #24]
 8009568:	42b7      	cmp	r7, r6
 800956a:	d340      	bcc.n	80095ee <__gethex+0x21e>
 800956c:	9802      	ldr	r0, [sp, #8]
 800956e:	9b00      	ldr	r3, [sp, #0]
 8009570:	f840 3b04 	str.w	r3, [r0], #4
 8009574:	eba0 0009 	sub.w	r0, r0, r9
 8009578:	1080      	asrs	r0, r0, #2
 800957a:	0146      	lsls	r6, r0, #5
 800957c:	6120      	str	r0, [r4, #16]
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fbb6 	bl	8009cf0 <__hi0bits>
 8009584:	1a30      	subs	r0, r6, r0
 8009586:	f8d8 6000 	ldr.w	r6, [r8]
 800958a:	42b0      	cmp	r0, r6
 800958c:	dd63      	ble.n	8009656 <__gethex+0x286>
 800958e:	1b87      	subs	r7, r0, r6
 8009590:	4639      	mov	r1, r7
 8009592:	4620      	mov	r0, r4
 8009594:	f000 ff5a 	bl	800a44c <__any_on>
 8009598:	4682      	mov	sl, r0
 800959a:	b1a8      	cbz	r0, 80095c8 <__gethex+0x1f8>
 800959c:	1e7b      	subs	r3, r7, #1
 800959e:	1159      	asrs	r1, r3, #5
 80095a0:	f003 021f 	and.w	r2, r3, #31
 80095a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80095a8:	f04f 0a01 	mov.w	sl, #1
 80095ac:	fa0a f202 	lsl.w	r2, sl, r2
 80095b0:	420a      	tst	r2, r1
 80095b2:	d009      	beq.n	80095c8 <__gethex+0x1f8>
 80095b4:	4553      	cmp	r3, sl
 80095b6:	dd05      	ble.n	80095c4 <__gethex+0x1f4>
 80095b8:	1eb9      	subs	r1, r7, #2
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 ff46 	bl	800a44c <__any_on>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d145      	bne.n	8009650 <__gethex+0x280>
 80095c4:	f04f 0a02 	mov.w	sl, #2
 80095c8:	4639      	mov	r1, r7
 80095ca:	4620      	mov	r0, r4
 80095cc:	f7ff fe98 	bl	8009300 <rshift>
 80095d0:	443d      	add	r5, r7
 80095d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095d6:	42ab      	cmp	r3, r5
 80095d8:	da4c      	bge.n	8009674 <__gethex+0x2a4>
 80095da:	ee18 0a10 	vmov	r0, s16
 80095de:	4621      	mov	r1, r4
 80095e0:	f000 fad4 	bl	8009b8c <_Bfree>
 80095e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095e6:	2300      	movs	r3, #0
 80095e8:	6013      	str	r3, [r2, #0]
 80095ea:	27a3      	movs	r7, #163	; 0xa3
 80095ec:	e785      	b.n	80094fa <__gethex+0x12a>
 80095ee:	1e73      	subs	r3, r6, #1
 80095f0:	9a05      	ldr	r2, [sp, #20]
 80095f2:	9303      	str	r3, [sp, #12]
 80095f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d019      	beq.n	8009630 <__gethex+0x260>
 80095fc:	f1bb 0f20 	cmp.w	fp, #32
 8009600:	d107      	bne.n	8009612 <__gethex+0x242>
 8009602:	9b02      	ldr	r3, [sp, #8]
 8009604:	9a00      	ldr	r2, [sp, #0]
 8009606:	f843 2b04 	str.w	r2, [r3], #4
 800960a:	9302      	str	r3, [sp, #8]
 800960c:	2300      	movs	r3, #0
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	469b      	mov	fp, r3
 8009612:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009616:	f7ff fec5 	bl	80093a4 <__hexdig_fun>
 800961a:	9b00      	ldr	r3, [sp, #0]
 800961c:	f000 000f 	and.w	r0, r0, #15
 8009620:	fa00 f00b 	lsl.w	r0, r0, fp
 8009624:	4303      	orrs	r3, r0
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	f10b 0b04 	add.w	fp, fp, #4
 800962c:	9b03      	ldr	r3, [sp, #12]
 800962e:	e00d      	b.n	800964c <__gethex+0x27c>
 8009630:	9b03      	ldr	r3, [sp, #12]
 8009632:	9a06      	ldr	r2, [sp, #24]
 8009634:	4413      	add	r3, r2
 8009636:	42bb      	cmp	r3, r7
 8009638:	d3e0      	bcc.n	80095fc <__gethex+0x22c>
 800963a:	4618      	mov	r0, r3
 800963c:	9901      	ldr	r1, [sp, #4]
 800963e:	9307      	str	r3, [sp, #28]
 8009640:	4652      	mov	r2, sl
 8009642:	f7fe ff37 	bl	80084b4 <strncmp>
 8009646:	9b07      	ldr	r3, [sp, #28]
 8009648:	2800      	cmp	r0, #0
 800964a:	d1d7      	bne.n	80095fc <__gethex+0x22c>
 800964c:	461e      	mov	r6, r3
 800964e:	e78b      	b.n	8009568 <__gethex+0x198>
 8009650:	f04f 0a03 	mov.w	sl, #3
 8009654:	e7b8      	b.n	80095c8 <__gethex+0x1f8>
 8009656:	da0a      	bge.n	800966e <__gethex+0x29e>
 8009658:	1a37      	subs	r7, r6, r0
 800965a:	4621      	mov	r1, r4
 800965c:	ee18 0a10 	vmov	r0, s16
 8009660:	463a      	mov	r2, r7
 8009662:	f000 fcaf 	bl	8009fc4 <__lshift>
 8009666:	1bed      	subs	r5, r5, r7
 8009668:	4604      	mov	r4, r0
 800966a:	f100 0914 	add.w	r9, r0, #20
 800966e:	f04f 0a00 	mov.w	sl, #0
 8009672:	e7ae      	b.n	80095d2 <__gethex+0x202>
 8009674:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009678:	42a8      	cmp	r0, r5
 800967a:	dd72      	ble.n	8009762 <__gethex+0x392>
 800967c:	1b45      	subs	r5, r0, r5
 800967e:	42ae      	cmp	r6, r5
 8009680:	dc36      	bgt.n	80096f0 <__gethex+0x320>
 8009682:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009686:	2b02      	cmp	r3, #2
 8009688:	d02a      	beq.n	80096e0 <__gethex+0x310>
 800968a:	2b03      	cmp	r3, #3
 800968c:	d02c      	beq.n	80096e8 <__gethex+0x318>
 800968e:	2b01      	cmp	r3, #1
 8009690:	d11c      	bne.n	80096cc <__gethex+0x2fc>
 8009692:	42ae      	cmp	r6, r5
 8009694:	d11a      	bne.n	80096cc <__gethex+0x2fc>
 8009696:	2e01      	cmp	r6, #1
 8009698:	d112      	bne.n	80096c0 <__gethex+0x2f0>
 800969a:	9a04      	ldr	r2, [sp, #16]
 800969c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	2301      	movs	r3, #1
 80096a4:	6123      	str	r3, [r4, #16]
 80096a6:	f8c9 3000 	str.w	r3, [r9]
 80096aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096ac:	2762      	movs	r7, #98	; 0x62
 80096ae:	601c      	str	r4, [r3, #0]
 80096b0:	e723      	b.n	80094fa <__gethex+0x12a>
 80096b2:	bf00      	nop
 80096b4:	0800b458 	.word	0x0800b458
 80096b8:	0800b3e0 	.word	0x0800b3e0
 80096bc:	0800b3f1 	.word	0x0800b3f1
 80096c0:	1e71      	subs	r1, r6, #1
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 fec2 	bl	800a44c <__any_on>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1e6      	bne.n	800969a <__gethex+0x2ca>
 80096cc:	ee18 0a10 	vmov	r0, s16
 80096d0:	4621      	mov	r1, r4
 80096d2:	f000 fa5b 	bl	8009b8c <_Bfree>
 80096d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096d8:	2300      	movs	r3, #0
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	2750      	movs	r7, #80	; 0x50
 80096de:	e70c      	b.n	80094fa <__gethex+0x12a>
 80096e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1f2      	bne.n	80096cc <__gethex+0x2fc>
 80096e6:	e7d8      	b.n	800969a <__gethex+0x2ca>
 80096e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1d5      	bne.n	800969a <__gethex+0x2ca>
 80096ee:	e7ed      	b.n	80096cc <__gethex+0x2fc>
 80096f0:	1e6f      	subs	r7, r5, #1
 80096f2:	f1ba 0f00 	cmp.w	sl, #0
 80096f6:	d131      	bne.n	800975c <__gethex+0x38c>
 80096f8:	b127      	cbz	r7, 8009704 <__gethex+0x334>
 80096fa:	4639      	mov	r1, r7
 80096fc:	4620      	mov	r0, r4
 80096fe:	f000 fea5 	bl	800a44c <__any_on>
 8009702:	4682      	mov	sl, r0
 8009704:	117b      	asrs	r3, r7, #5
 8009706:	2101      	movs	r1, #1
 8009708:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800970c:	f007 071f 	and.w	r7, r7, #31
 8009710:	fa01 f707 	lsl.w	r7, r1, r7
 8009714:	421f      	tst	r7, r3
 8009716:	4629      	mov	r1, r5
 8009718:	4620      	mov	r0, r4
 800971a:	bf18      	it	ne
 800971c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009720:	1b76      	subs	r6, r6, r5
 8009722:	f7ff fded 	bl	8009300 <rshift>
 8009726:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800972a:	2702      	movs	r7, #2
 800972c:	f1ba 0f00 	cmp.w	sl, #0
 8009730:	d048      	beq.n	80097c4 <__gethex+0x3f4>
 8009732:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009736:	2b02      	cmp	r3, #2
 8009738:	d015      	beq.n	8009766 <__gethex+0x396>
 800973a:	2b03      	cmp	r3, #3
 800973c:	d017      	beq.n	800976e <__gethex+0x39e>
 800973e:	2b01      	cmp	r3, #1
 8009740:	d109      	bne.n	8009756 <__gethex+0x386>
 8009742:	f01a 0f02 	tst.w	sl, #2
 8009746:	d006      	beq.n	8009756 <__gethex+0x386>
 8009748:	f8d9 0000 	ldr.w	r0, [r9]
 800974c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009750:	f01a 0f01 	tst.w	sl, #1
 8009754:	d10e      	bne.n	8009774 <__gethex+0x3a4>
 8009756:	f047 0710 	orr.w	r7, r7, #16
 800975a:	e033      	b.n	80097c4 <__gethex+0x3f4>
 800975c:	f04f 0a01 	mov.w	sl, #1
 8009760:	e7d0      	b.n	8009704 <__gethex+0x334>
 8009762:	2701      	movs	r7, #1
 8009764:	e7e2      	b.n	800972c <__gethex+0x35c>
 8009766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009768:	f1c3 0301 	rsb	r3, r3, #1
 800976c:	9315      	str	r3, [sp, #84]	; 0x54
 800976e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0f0      	beq.n	8009756 <__gethex+0x386>
 8009774:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009778:	f104 0314 	add.w	r3, r4, #20
 800977c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009780:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009784:	f04f 0c00 	mov.w	ip, #0
 8009788:	4618      	mov	r0, r3
 800978a:	f853 2b04 	ldr.w	r2, [r3], #4
 800978e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009792:	d01c      	beq.n	80097ce <__gethex+0x3fe>
 8009794:	3201      	adds	r2, #1
 8009796:	6002      	str	r2, [r0, #0]
 8009798:	2f02      	cmp	r7, #2
 800979a:	f104 0314 	add.w	r3, r4, #20
 800979e:	d13f      	bne.n	8009820 <__gethex+0x450>
 80097a0:	f8d8 2000 	ldr.w	r2, [r8]
 80097a4:	3a01      	subs	r2, #1
 80097a6:	42b2      	cmp	r2, r6
 80097a8:	d10a      	bne.n	80097c0 <__gethex+0x3f0>
 80097aa:	1171      	asrs	r1, r6, #5
 80097ac:	2201      	movs	r2, #1
 80097ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097b2:	f006 061f 	and.w	r6, r6, #31
 80097b6:	fa02 f606 	lsl.w	r6, r2, r6
 80097ba:	421e      	tst	r6, r3
 80097bc:	bf18      	it	ne
 80097be:	4617      	movne	r7, r2
 80097c0:	f047 0720 	orr.w	r7, r7, #32
 80097c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097c6:	601c      	str	r4, [r3, #0]
 80097c8:	9b04      	ldr	r3, [sp, #16]
 80097ca:	601d      	str	r5, [r3, #0]
 80097cc:	e695      	b.n	80094fa <__gethex+0x12a>
 80097ce:	4299      	cmp	r1, r3
 80097d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80097d4:	d8d8      	bhi.n	8009788 <__gethex+0x3b8>
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	459b      	cmp	fp, r3
 80097da:	db19      	blt.n	8009810 <__gethex+0x440>
 80097dc:	6861      	ldr	r1, [r4, #4]
 80097de:	ee18 0a10 	vmov	r0, s16
 80097e2:	3101      	adds	r1, #1
 80097e4:	f000 f992 	bl	8009b0c <_Balloc>
 80097e8:	4681      	mov	r9, r0
 80097ea:	b918      	cbnz	r0, 80097f4 <__gethex+0x424>
 80097ec:	4b1a      	ldr	r3, [pc, #104]	; (8009858 <__gethex+0x488>)
 80097ee:	4602      	mov	r2, r0
 80097f0:	2184      	movs	r1, #132	; 0x84
 80097f2:	e6a8      	b.n	8009546 <__gethex+0x176>
 80097f4:	6922      	ldr	r2, [r4, #16]
 80097f6:	3202      	adds	r2, #2
 80097f8:	f104 010c 	add.w	r1, r4, #12
 80097fc:	0092      	lsls	r2, r2, #2
 80097fe:	300c      	adds	r0, #12
 8009800:	f7fe fc4c 	bl	800809c <memcpy>
 8009804:	4621      	mov	r1, r4
 8009806:	ee18 0a10 	vmov	r0, s16
 800980a:	f000 f9bf 	bl	8009b8c <_Bfree>
 800980e:	464c      	mov	r4, r9
 8009810:	6923      	ldr	r3, [r4, #16]
 8009812:	1c5a      	adds	r2, r3, #1
 8009814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009818:	6122      	str	r2, [r4, #16]
 800981a:	2201      	movs	r2, #1
 800981c:	615a      	str	r2, [r3, #20]
 800981e:	e7bb      	b.n	8009798 <__gethex+0x3c8>
 8009820:	6922      	ldr	r2, [r4, #16]
 8009822:	455a      	cmp	r2, fp
 8009824:	dd0b      	ble.n	800983e <__gethex+0x46e>
 8009826:	2101      	movs	r1, #1
 8009828:	4620      	mov	r0, r4
 800982a:	f7ff fd69 	bl	8009300 <rshift>
 800982e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009832:	3501      	adds	r5, #1
 8009834:	42ab      	cmp	r3, r5
 8009836:	f6ff aed0 	blt.w	80095da <__gethex+0x20a>
 800983a:	2701      	movs	r7, #1
 800983c:	e7c0      	b.n	80097c0 <__gethex+0x3f0>
 800983e:	f016 061f 	ands.w	r6, r6, #31
 8009842:	d0fa      	beq.n	800983a <__gethex+0x46a>
 8009844:	4453      	add	r3, sl
 8009846:	f1c6 0620 	rsb	r6, r6, #32
 800984a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800984e:	f000 fa4f 	bl	8009cf0 <__hi0bits>
 8009852:	42b0      	cmp	r0, r6
 8009854:	dbe7      	blt.n	8009826 <__gethex+0x456>
 8009856:	e7f0      	b.n	800983a <__gethex+0x46a>
 8009858:	0800b3e0 	.word	0x0800b3e0

0800985c <L_shift>:
 800985c:	f1c2 0208 	rsb	r2, r2, #8
 8009860:	0092      	lsls	r2, r2, #2
 8009862:	b570      	push	{r4, r5, r6, lr}
 8009864:	f1c2 0620 	rsb	r6, r2, #32
 8009868:	6843      	ldr	r3, [r0, #4]
 800986a:	6804      	ldr	r4, [r0, #0]
 800986c:	fa03 f506 	lsl.w	r5, r3, r6
 8009870:	432c      	orrs	r4, r5
 8009872:	40d3      	lsrs	r3, r2
 8009874:	6004      	str	r4, [r0, #0]
 8009876:	f840 3f04 	str.w	r3, [r0, #4]!
 800987a:	4288      	cmp	r0, r1
 800987c:	d3f4      	bcc.n	8009868 <L_shift+0xc>
 800987e:	bd70      	pop	{r4, r5, r6, pc}

08009880 <__match>:
 8009880:	b530      	push	{r4, r5, lr}
 8009882:	6803      	ldr	r3, [r0, #0]
 8009884:	3301      	adds	r3, #1
 8009886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800988a:	b914      	cbnz	r4, 8009892 <__match+0x12>
 800988c:	6003      	str	r3, [r0, #0]
 800988e:	2001      	movs	r0, #1
 8009890:	bd30      	pop	{r4, r5, pc}
 8009892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009896:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800989a:	2d19      	cmp	r5, #25
 800989c:	bf98      	it	ls
 800989e:	3220      	addls	r2, #32
 80098a0:	42a2      	cmp	r2, r4
 80098a2:	d0f0      	beq.n	8009886 <__match+0x6>
 80098a4:	2000      	movs	r0, #0
 80098a6:	e7f3      	b.n	8009890 <__match+0x10>

080098a8 <__hexnan>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	680b      	ldr	r3, [r1, #0]
 80098ae:	115e      	asrs	r6, r3, #5
 80098b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098b4:	f013 031f 	ands.w	r3, r3, #31
 80098b8:	b087      	sub	sp, #28
 80098ba:	bf18      	it	ne
 80098bc:	3604      	addne	r6, #4
 80098be:	2500      	movs	r5, #0
 80098c0:	1f37      	subs	r7, r6, #4
 80098c2:	4690      	mov	r8, r2
 80098c4:	6802      	ldr	r2, [r0, #0]
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	4682      	mov	sl, r0
 80098ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80098ce:	46b9      	mov	r9, r7
 80098d0:	463c      	mov	r4, r7
 80098d2:	9502      	str	r5, [sp, #8]
 80098d4:	46ab      	mov	fp, r5
 80098d6:	7851      	ldrb	r1, [r2, #1]
 80098d8:	1c53      	adds	r3, r2, #1
 80098da:	9303      	str	r3, [sp, #12]
 80098dc:	b341      	cbz	r1, 8009930 <__hexnan+0x88>
 80098de:	4608      	mov	r0, r1
 80098e0:	9205      	str	r2, [sp, #20]
 80098e2:	9104      	str	r1, [sp, #16]
 80098e4:	f7ff fd5e 	bl	80093a4 <__hexdig_fun>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d14f      	bne.n	800998c <__hexnan+0xe4>
 80098ec:	9904      	ldr	r1, [sp, #16]
 80098ee:	9a05      	ldr	r2, [sp, #20]
 80098f0:	2920      	cmp	r1, #32
 80098f2:	d818      	bhi.n	8009926 <__hexnan+0x7e>
 80098f4:	9b02      	ldr	r3, [sp, #8]
 80098f6:	459b      	cmp	fp, r3
 80098f8:	dd13      	ble.n	8009922 <__hexnan+0x7a>
 80098fa:	454c      	cmp	r4, r9
 80098fc:	d206      	bcs.n	800990c <__hexnan+0x64>
 80098fe:	2d07      	cmp	r5, #7
 8009900:	dc04      	bgt.n	800990c <__hexnan+0x64>
 8009902:	462a      	mov	r2, r5
 8009904:	4649      	mov	r1, r9
 8009906:	4620      	mov	r0, r4
 8009908:	f7ff ffa8 	bl	800985c <L_shift>
 800990c:	4544      	cmp	r4, r8
 800990e:	d950      	bls.n	80099b2 <__hexnan+0x10a>
 8009910:	2300      	movs	r3, #0
 8009912:	f1a4 0904 	sub.w	r9, r4, #4
 8009916:	f844 3c04 	str.w	r3, [r4, #-4]
 800991a:	f8cd b008 	str.w	fp, [sp, #8]
 800991e:	464c      	mov	r4, r9
 8009920:	461d      	mov	r5, r3
 8009922:	9a03      	ldr	r2, [sp, #12]
 8009924:	e7d7      	b.n	80098d6 <__hexnan+0x2e>
 8009926:	2929      	cmp	r1, #41	; 0x29
 8009928:	d156      	bne.n	80099d8 <__hexnan+0x130>
 800992a:	3202      	adds	r2, #2
 800992c:	f8ca 2000 	str.w	r2, [sl]
 8009930:	f1bb 0f00 	cmp.w	fp, #0
 8009934:	d050      	beq.n	80099d8 <__hexnan+0x130>
 8009936:	454c      	cmp	r4, r9
 8009938:	d206      	bcs.n	8009948 <__hexnan+0xa0>
 800993a:	2d07      	cmp	r5, #7
 800993c:	dc04      	bgt.n	8009948 <__hexnan+0xa0>
 800993e:	462a      	mov	r2, r5
 8009940:	4649      	mov	r1, r9
 8009942:	4620      	mov	r0, r4
 8009944:	f7ff ff8a 	bl	800985c <L_shift>
 8009948:	4544      	cmp	r4, r8
 800994a:	d934      	bls.n	80099b6 <__hexnan+0x10e>
 800994c:	f1a8 0204 	sub.w	r2, r8, #4
 8009950:	4623      	mov	r3, r4
 8009952:	f853 1b04 	ldr.w	r1, [r3], #4
 8009956:	f842 1f04 	str.w	r1, [r2, #4]!
 800995a:	429f      	cmp	r7, r3
 800995c:	d2f9      	bcs.n	8009952 <__hexnan+0xaa>
 800995e:	1b3b      	subs	r3, r7, r4
 8009960:	f023 0303 	bic.w	r3, r3, #3
 8009964:	3304      	adds	r3, #4
 8009966:	3401      	adds	r4, #1
 8009968:	3e03      	subs	r6, #3
 800996a:	42b4      	cmp	r4, r6
 800996c:	bf88      	it	hi
 800996e:	2304      	movhi	r3, #4
 8009970:	4443      	add	r3, r8
 8009972:	2200      	movs	r2, #0
 8009974:	f843 2b04 	str.w	r2, [r3], #4
 8009978:	429f      	cmp	r7, r3
 800997a:	d2fb      	bcs.n	8009974 <__hexnan+0xcc>
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	b91b      	cbnz	r3, 8009988 <__hexnan+0xe0>
 8009980:	4547      	cmp	r7, r8
 8009982:	d127      	bne.n	80099d4 <__hexnan+0x12c>
 8009984:	2301      	movs	r3, #1
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	2005      	movs	r0, #5
 800998a:	e026      	b.n	80099da <__hexnan+0x132>
 800998c:	3501      	adds	r5, #1
 800998e:	2d08      	cmp	r5, #8
 8009990:	f10b 0b01 	add.w	fp, fp, #1
 8009994:	dd06      	ble.n	80099a4 <__hexnan+0xfc>
 8009996:	4544      	cmp	r4, r8
 8009998:	d9c3      	bls.n	8009922 <__hexnan+0x7a>
 800999a:	2300      	movs	r3, #0
 800999c:	f844 3c04 	str.w	r3, [r4, #-4]
 80099a0:	2501      	movs	r5, #1
 80099a2:	3c04      	subs	r4, #4
 80099a4:	6822      	ldr	r2, [r4, #0]
 80099a6:	f000 000f 	and.w	r0, r0, #15
 80099aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80099ae:	6022      	str	r2, [r4, #0]
 80099b0:	e7b7      	b.n	8009922 <__hexnan+0x7a>
 80099b2:	2508      	movs	r5, #8
 80099b4:	e7b5      	b.n	8009922 <__hexnan+0x7a>
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d0df      	beq.n	800997c <__hexnan+0xd4>
 80099bc:	f04f 32ff 	mov.w	r2, #4294967295
 80099c0:	f1c3 0320 	rsb	r3, r3, #32
 80099c4:	fa22 f303 	lsr.w	r3, r2, r3
 80099c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80099cc:	401a      	ands	r2, r3
 80099ce:	f846 2c04 	str.w	r2, [r6, #-4]
 80099d2:	e7d3      	b.n	800997c <__hexnan+0xd4>
 80099d4:	3f04      	subs	r7, #4
 80099d6:	e7d1      	b.n	800997c <__hexnan+0xd4>
 80099d8:	2004      	movs	r0, #4
 80099da:	b007      	add	sp, #28
 80099dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099e0 <_lseek_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d07      	ldr	r5, [pc, #28]	; (8009a00 <_lseek_r+0x20>)
 80099e4:	4604      	mov	r4, r0
 80099e6:	4608      	mov	r0, r1
 80099e8:	4611      	mov	r1, r2
 80099ea:	2200      	movs	r2, #0
 80099ec:	602a      	str	r2, [r5, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	f7f8 fedc 	bl	80027ac <_lseek>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_lseek_r+0x1e>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_lseek_r+0x1e>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	20005d78 	.word	0x20005d78

08009a04 <__swhatbuf_r>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	460e      	mov	r6, r1
 8009a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	b096      	sub	sp, #88	; 0x58
 8009a10:	4614      	mov	r4, r2
 8009a12:	461d      	mov	r5, r3
 8009a14:	da08      	bge.n	8009a28 <__swhatbuf_r+0x24>
 8009a16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	602a      	str	r2, [r5, #0]
 8009a1e:	061a      	lsls	r2, r3, #24
 8009a20:	d410      	bmi.n	8009a44 <__swhatbuf_r+0x40>
 8009a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a26:	e00e      	b.n	8009a46 <__swhatbuf_r+0x42>
 8009a28:	466a      	mov	r2, sp
 8009a2a:	f001 fa17 	bl	800ae5c <_fstat_r>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	dbf1      	blt.n	8009a16 <__swhatbuf_r+0x12>
 8009a32:	9a01      	ldr	r2, [sp, #4]
 8009a34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a3c:	425a      	negs	r2, r3
 8009a3e:	415a      	adcs	r2, r3
 8009a40:	602a      	str	r2, [r5, #0]
 8009a42:	e7ee      	b.n	8009a22 <__swhatbuf_r+0x1e>
 8009a44:	2340      	movs	r3, #64	; 0x40
 8009a46:	2000      	movs	r0, #0
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	b016      	add	sp, #88	; 0x58
 8009a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a50 <__smakebuf_r>:
 8009a50:	898b      	ldrh	r3, [r1, #12]
 8009a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a54:	079d      	lsls	r5, r3, #30
 8009a56:	4606      	mov	r6, r0
 8009a58:	460c      	mov	r4, r1
 8009a5a:	d507      	bpl.n	8009a6c <__smakebuf_r+0x1c>
 8009a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	6123      	str	r3, [r4, #16]
 8009a64:	2301      	movs	r3, #1
 8009a66:	6163      	str	r3, [r4, #20]
 8009a68:	b002      	add	sp, #8
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
 8009a6c:	ab01      	add	r3, sp, #4
 8009a6e:	466a      	mov	r2, sp
 8009a70:	f7ff ffc8 	bl	8009a04 <__swhatbuf_r>
 8009a74:	9900      	ldr	r1, [sp, #0]
 8009a76:	4605      	mov	r5, r0
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f7fe fb91 	bl	80081a0 <_malloc_r>
 8009a7e:	b948      	cbnz	r0, 8009a94 <__smakebuf_r+0x44>
 8009a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a84:	059a      	lsls	r2, r3, #22
 8009a86:	d4ef      	bmi.n	8009a68 <__smakebuf_r+0x18>
 8009a88:	f023 0303 	bic.w	r3, r3, #3
 8009a8c:	f043 0302 	orr.w	r3, r3, #2
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	e7e3      	b.n	8009a5c <__smakebuf_r+0xc>
 8009a94:	4b0d      	ldr	r3, [pc, #52]	; (8009acc <__smakebuf_r+0x7c>)
 8009a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	6020      	str	r0, [r4, #0]
 8009a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	9b00      	ldr	r3, [sp, #0]
 8009aa4:	6163      	str	r3, [r4, #20]
 8009aa6:	9b01      	ldr	r3, [sp, #4]
 8009aa8:	6120      	str	r0, [r4, #16]
 8009aaa:	b15b      	cbz	r3, 8009ac4 <__smakebuf_r+0x74>
 8009aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f001 f9e5 	bl	800ae80 <_isatty_r>
 8009ab6:	b128      	cbz	r0, 8009ac4 <__smakebuf_r+0x74>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	f023 0303 	bic.w	r3, r3, #3
 8009abe:	f043 0301 	orr.w	r3, r3, #1
 8009ac2:	81a3      	strh	r3, [r4, #12]
 8009ac4:	89a0      	ldrh	r0, [r4, #12]
 8009ac6:	4305      	orrs	r5, r0
 8009ac8:	81a5      	strh	r5, [r4, #12]
 8009aca:	e7cd      	b.n	8009a68 <__smakebuf_r+0x18>
 8009acc:	08007e89 	.word	0x08007e89

08009ad0 <__ascii_mbtowc>:
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	b901      	cbnz	r1, 8009ad6 <__ascii_mbtowc+0x6>
 8009ad4:	a901      	add	r1, sp, #4
 8009ad6:	b142      	cbz	r2, 8009aea <__ascii_mbtowc+0x1a>
 8009ad8:	b14b      	cbz	r3, 8009aee <__ascii_mbtowc+0x1e>
 8009ada:	7813      	ldrb	r3, [r2, #0]
 8009adc:	600b      	str	r3, [r1, #0]
 8009ade:	7812      	ldrb	r2, [r2, #0]
 8009ae0:	1e10      	subs	r0, r2, #0
 8009ae2:	bf18      	it	ne
 8009ae4:	2001      	movne	r0, #1
 8009ae6:	b002      	add	sp, #8
 8009ae8:	4770      	bx	lr
 8009aea:	4610      	mov	r0, r2
 8009aec:	e7fb      	b.n	8009ae6 <__ascii_mbtowc+0x16>
 8009aee:	f06f 0001 	mvn.w	r0, #1
 8009af2:	e7f8      	b.n	8009ae6 <__ascii_mbtowc+0x16>

08009af4 <__malloc_lock>:
 8009af4:	4801      	ldr	r0, [pc, #4]	; (8009afc <__malloc_lock+0x8>)
 8009af6:	f7fe babe 	b.w	8008076 <__retarget_lock_acquire_recursive>
 8009afa:	bf00      	nop
 8009afc:	20005d6c 	.word	0x20005d6c

08009b00 <__malloc_unlock>:
 8009b00:	4801      	ldr	r0, [pc, #4]	; (8009b08 <__malloc_unlock+0x8>)
 8009b02:	f7fe bab9 	b.w	8008078 <__retarget_lock_release_recursive>
 8009b06:	bf00      	nop
 8009b08:	20005d6c 	.word	0x20005d6c

08009b0c <_Balloc>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b10:	4604      	mov	r4, r0
 8009b12:	460d      	mov	r5, r1
 8009b14:	b976      	cbnz	r6, 8009b34 <_Balloc+0x28>
 8009b16:	2010      	movs	r0, #16
 8009b18:	f7fe fab0 	bl	800807c <malloc>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	6260      	str	r0, [r4, #36]	; 0x24
 8009b20:	b920      	cbnz	r0, 8009b2c <_Balloc+0x20>
 8009b22:	4b18      	ldr	r3, [pc, #96]	; (8009b84 <_Balloc+0x78>)
 8009b24:	4818      	ldr	r0, [pc, #96]	; (8009b88 <_Balloc+0x7c>)
 8009b26:	2166      	movs	r1, #102	; 0x66
 8009b28:	f001 f968 	bl	800adfc <__assert_func>
 8009b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b30:	6006      	str	r6, [r0, #0]
 8009b32:	60c6      	str	r6, [r0, #12]
 8009b34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b36:	68f3      	ldr	r3, [r6, #12]
 8009b38:	b183      	cbz	r3, 8009b5c <_Balloc+0x50>
 8009b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b42:	b9b8      	cbnz	r0, 8009b74 <_Balloc+0x68>
 8009b44:	2101      	movs	r1, #1
 8009b46:	fa01 f605 	lsl.w	r6, r1, r5
 8009b4a:	1d72      	adds	r2, r6, #5
 8009b4c:	0092      	lsls	r2, r2, #2
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f000 fc9d 	bl	800a48e <_calloc_r>
 8009b54:	b160      	cbz	r0, 8009b70 <_Balloc+0x64>
 8009b56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b5a:	e00e      	b.n	8009b7a <_Balloc+0x6e>
 8009b5c:	2221      	movs	r2, #33	; 0x21
 8009b5e:	2104      	movs	r1, #4
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 fc94 	bl	800a48e <_calloc_r>
 8009b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b68:	60f0      	str	r0, [r6, #12]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e4      	bne.n	8009b3a <_Balloc+0x2e>
 8009b70:	2000      	movs	r0, #0
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	6802      	ldr	r2, [r0, #0]
 8009b76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b80:	e7f7      	b.n	8009b72 <_Balloc+0x66>
 8009b82:	bf00      	nop
 8009b84:	0800b46c 	.word	0x0800b46c
 8009b88:	0800b483 	.word	0x0800b483

08009b8c <_Bfree>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b90:	4605      	mov	r5, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	b976      	cbnz	r6, 8009bb4 <_Bfree+0x28>
 8009b96:	2010      	movs	r0, #16
 8009b98:	f7fe fa70 	bl	800807c <malloc>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	6268      	str	r0, [r5, #36]	; 0x24
 8009ba0:	b920      	cbnz	r0, 8009bac <_Bfree+0x20>
 8009ba2:	4b09      	ldr	r3, [pc, #36]	; (8009bc8 <_Bfree+0x3c>)
 8009ba4:	4809      	ldr	r0, [pc, #36]	; (8009bcc <_Bfree+0x40>)
 8009ba6:	218a      	movs	r1, #138	; 0x8a
 8009ba8:	f001 f928 	bl	800adfc <__assert_func>
 8009bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bb0:	6006      	str	r6, [r0, #0]
 8009bb2:	60c6      	str	r6, [r0, #12]
 8009bb4:	b13c      	cbz	r4, 8009bc6 <_Bfree+0x3a>
 8009bb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bb8:	6862      	ldr	r2, [r4, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bc0:	6021      	str	r1, [r4, #0]
 8009bc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bc6:	bd70      	pop	{r4, r5, r6, pc}
 8009bc8:	0800b46c 	.word	0x0800b46c
 8009bcc:	0800b483 	.word	0x0800b483

08009bd0 <__multadd>:
 8009bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd4:	690d      	ldr	r5, [r1, #16]
 8009bd6:	4607      	mov	r7, r0
 8009bd8:	460c      	mov	r4, r1
 8009bda:	461e      	mov	r6, r3
 8009bdc:	f101 0c14 	add.w	ip, r1, #20
 8009be0:	2000      	movs	r0, #0
 8009be2:	f8dc 3000 	ldr.w	r3, [ip]
 8009be6:	b299      	uxth	r1, r3
 8009be8:	fb02 6101 	mla	r1, r2, r1, r6
 8009bec:	0c1e      	lsrs	r6, r3, #16
 8009bee:	0c0b      	lsrs	r3, r1, #16
 8009bf0:	fb02 3306 	mla	r3, r2, r6, r3
 8009bf4:	b289      	uxth	r1, r1
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bfc:	4285      	cmp	r5, r0
 8009bfe:	f84c 1b04 	str.w	r1, [ip], #4
 8009c02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c06:	dcec      	bgt.n	8009be2 <__multadd+0x12>
 8009c08:	b30e      	cbz	r6, 8009c4e <__multadd+0x7e>
 8009c0a:	68a3      	ldr	r3, [r4, #8]
 8009c0c:	42ab      	cmp	r3, r5
 8009c0e:	dc19      	bgt.n	8009c44 <__multadd+0x74>
 8009c10:	6861      	ldr	r1, [r4, #4]
 8009c12:	4638      	mov	r0, r7
 8009c14:	3101      	adds	r1, #1
 8009c16:	f7ff ff79 	bl	8009b0c <_Balloc>
 8009c1a:	4680      	mov	r8, r0
 8009c1c:	b928      	cbnz	r0, 8009c2a <__multadd+0x5a>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	4b0c      	ldr	r3, [pc, #48]	; (8009c54 <__multadd+0x84>)
 8009c22:	480d      	ldr	r0, [pc, #52]	; (8009c58 <__multadd+0x88>)
 8009c24:	21b5      	movs	r1, #181	; 0xb5
 8009c26:	f001 f8e9 	bl	800adfc <__assert_func>
 8009c2a:	6922      	ldr	r2, [r4, #16]
 8009c2c:	3202      	adds	r2, #2
 8009c2e:	f104 010c 	add.w	r1, r4, #12
 8009c32:	0092      	lsls	r2, r2, #2
 8009c34:	300c      	adds	r0, #12
 8009c36:	f7fe fa31 	bl	800809c <memcpy>
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	f7ff ffa5 	bl	8009b8c <_Bfree>
 8009c42:	4644      	mov	r4, r8
 8009c44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c48:	3501      	adds	r5, #1
 8009c4a:	615e      	str	r6, [r3, #20]
 8009c4c:	6125      	str	r5, [r4, #16]
 8009c4e:	4620      	mov	r0, r4
 8009c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c54:	0800b3e0 	.word	0x0800b3e0
 8009c58:	0800b483 	.word	0x0800b483

08009c5c <__s2b>:
 8009c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c60:	460c      	mov	r4, r1
 8009c62:	4615      	mov	r5, r2
 8009c64:	461f      	mov	r7, r3
 8009c66:	2209      	movs	r2, #9
 8009c68:	3308      	adds	r3, #8
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c70:	2100      	movs	r1, #0
 8009c72:	2201      	movs	r2, #1
 8009c74:	429a      	cmp	r2, r3
 8009c76:	db09      	blt.n	8009c8c <__s2b+0x30>
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f7ff ff47 	bl	8009b0c <_Balloc>
 8009c7e:	b940      	cbnz	r0, 8009c92 <__s2b+0x36>
 8009c80:	4602      	mov	r2, r0
 8009c82:	4b19      	ldr	r3, [pc, #100]	; (8009ce8 <__s2b+0x8c>)
 8009c84:	4819      	ldr	r0, [pc, #100]	; (8009cec <__s2b+0x90>)
 8009c86:	21ce      	movs	r1, #206	; 0xce
 8009c88:	f001 f8b8 	bl	800adfc <__assert_func>
 8009c8c:	0052      	lsls	r2, r2, #1
 8009c8e:	3101      	adds	r1, #1
 8009c90:	e7f0      	b.n	8009c74 <__s2b+0x18>
 8009c92:	9b08      	ldr	r3, [sp, #32]
 8009c94:	6143      	str	r3, [r0, #20]
 8009c96:	2d09      	cmp	r5, #9
 8009c98:	f04f 0301 	mov.w	r3, #1
 8009c9c:	6103      	str	r3, [r0, #16]
 8009c9e:	dd16      	ble.n	8009cce <__s2b+0x72>
 8009ca0:	f104 0909 	add.w	r9, r4, #9
 8009ca4:	46c8      	mov	r8, r9
 8009ca6:	442c      	add	r4, r5
 8009ca8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009cac:	4601      	mov	r1, r0
 8009cae:	3b30      	subs	r3, #48	; 0x30
 8009cb0:	220a      	movs	r2, #10
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7ff ff8c 	bl	8009bd0 <__multadd>
 8009cb8:	45a0      	cmp	r8, r4
 8009cba:	d1f5      	bne.n	8009ca8 <__s2b+0x4c>
 8009cbc:	f1a5 0408 	sub.w	r4, r5, #8
 8009cc0:	444c      	add	r4, r9
 8009cc2:	1b2d      	subs	r5, r5, r4
 8009cc4:	1963      	adds	r3, r4, r5
 8009cc6:	42bb      	cmp	r3, r7
 8009cc8:	db04      	blt.n	8009cd4 <__s2b+0x78>
 8009cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cce:	340a      	adds	r4, #10
 8009cd0:	2509      	movs	r5, #9
 8009cd2:	e7f6      	b.n	8009cc2 <__s2b+0x66>
 8009cd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cd8:	4601      	mov	r1, r0
 8009cda:	3b30      	subs	r3, #48	; 0x30
 8009cdc:	220a      	movs	r2, #10
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f7ff ff76 	bl	8009bd0 <__multadd>
 8009ce4:	e7ee      	b.n	8009cc4 <__s2b+0x68>
 8009ce6:	bf00      	nop
 8009ce8:	0800b3e0 	.word	0x0800b3e0
 8009cec:	0800b483 	.word	0x0800b483

08009cf0 <__hi0bits>:
 8009cf0:	0c03      	lsrs	r3, r0, #16
 8009cf2:	041b      	lsls	r3, r3, #16
 8009cf4:	b9d3      	cbnz	r3, 8009d2c <__hi0bits+0x3c>
 8009cf6:	0400      	lsls	r0, r0, #16
 8009cf8:	2310      	movs	r3, #16
 8009cfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009cfe:	bf04      	itt	eq
 8009d00:	0200      	lsleq	r0, r0, #8
 8009d02:	3308      	addeq	r3, #8
 8009d04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d08:	bf04      	itt	eq
 8009d0a:	0100      	lsleq	r0, r0, #4
 8009d0c:	3304      	addeq	r3, #4
 8009d0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d12:	bf04      	itt	eq
 8009d14:	0080      	lsleq	r0, r0, #2
 8009d16:	3302      	addeq	r3, #2
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	db05      	blt.n	8009d28 <__hi0bits+0x38>
 8009d1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d20:	f103 0301 	add.w	r3, r3, #1
 8009d24:	bf08      	it	eq
 8009d26:	2320      	moveq	r3, #32
 8009d28:	4618      	mov	r0, r3
 8009d2a:	4770      	bx	lr
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e7e4      	b.n	8009cfa <__hi0bits+0xa>

08009d30 <__lo0bits>:
 8009d30:	6803      	ldr	r3, [r0, #0]
 8009d32:	f013 0207 	ands.w	r2, r3, #7
 8009d36:	4601      	mov	r1, r0
 8009d38:	d00b      	beq.n	8009d52 <__lo0bits+0x22>
 8009d3a:	07da      	lsls	r2, r3, #31
 8009d3c:	d423      	bmi.n	8009d86 <__lo0bits+0x56>
 8009d3e:	0798      	lsls	r0, r3, #30
 8009d40:	bf49      	itett	mi
 8009d42:	085b      	lsrmi	r3, r3, #1
 8009d44:	089b      	lsrpl	r3, r3, #2
 8009d46:	2001      	movmi	r0, #1
 8009d48:	600b      	strmi	r3, [r1, #0]
 8009d4a:	bf5c      	itt	pl
 8009d4c:	600b      	strpl	r3, [r1, #0]
 8009d4e:	2002      	movpl	r0, #2
 8009d50:	4770      	bx	lr
 8009d52:	b298      	uxth	r0, r3
 8009d54:	b9a8      	cbnz	r0, 8009d82 <__lo0bits+0x52>
 8009d56:	0c1b      	lsrs	r3, r3, #16
 8009d58:	2010      	movs	r0, #16
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	b90a      	cbnz	r2, 8009d62 <__lo0bits+0x32>
 8009d5e:	3008      	adds	r0, #8
 8009d60:	0a1b      	lsrs	r3, r3, #8
 8009d62:	071a      	lsls	r2, r3, #28
 8009d64:	bf04      	itt	eq
 8009d66:	091b      	lsreq	r3, r3, #4
 8009d68:	3004      	addeq	r0, #4
 8009d6a:	079a      	lsls	r2, r3, #30
 8009d6c:	bf04      	itt	eq
 8009d6e:	089b      	lsreq	r3, r3, #2
 8009d70:	3002      	addeq	r0, #2
 8009d72:	07da      	lsls	r2, r3, #31
 8009d74:	d403      	bmi.n	8009d7e <__lo0bits+0x4e>
 8009d76:	085b      	lsrs	r3, r3, #1
 8009d78:	f100 0001 	add.w	r0, r0, #1
 8009d7c:	d005      	beq.n	8009d8a <__lo0bits+0x5a>
 8009d7e:	600b      	str	r3, [r1, #0]
 8009d80:	4770      	bx	lr
 8009d82:	4610      	mov	r0, r2
 8009d84:	e7e9      	b.n	8009d5a <__lo0bits+0x2a>
 8009d86:	2000      	movs	r0, #0
 8009d88:	4770      	bx	lr
 8009d8a:	2020      	movs	r0, #32
 8009d8c:	4770      	bx	lr
	...

08009d90 <__i2b>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	460c      	mov	r4, r1
 8009d94:	2101      	movs	r1, #1
 8009d96:	f7ff feb9 	bl	8009b0c <_Balloc>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	b928      	cbnz	r0, 8009daa <__i2b+0x1a>
 8009d9e:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <__i2b+0x24>)
 8009da0:	4805      	ldr	r0, [pc, #20]	; (8009db8 <__i2b+0x28>)
 8009da2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009da6:	f001 f829 	bl	800adfc <__assert_func>
 8009daa:	2301      	movs	r3, #1
 8009dac:	6144      	str	r4, [r0, #20]
 8009dae:	6103      	str	r3, [r0, #16]
 8009db0:	bd10      	pop	{r4, pc}
 8009db2:	bf00      	nop
 8009db4:	0800b3e0 	.word	0x0800b3e0
 8009db8:	0800b483 	.word	0x0800b483

08009dbc <__multiply>:
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	4691      	mov	r9, r2
 8009dc2:	690a      	ldr	r2, [r1, #16]
 8009dc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	bfb8      	it	lt
 8009dcc:	460b      	movlt	r3, r1
 8009dce:	460c      	mov	r4, r1
 8009dd0:	bfbc      	itt	lt
 8009dd2:	464c      	movlt	r4, r9
 8009dd4:	4699      	movlt	r9, r3
 8009dd6:	6927      	ldr	r7, [r4, #16]
 8009dd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ddc:	68a3      	ldr	r3, [r4, #8]
 8009dde:	6861      	ldr	r1, [r4, #4]
 8009de0:	eb07 060a 	add.w	r6, r7, sl
 8009de4:	42b3      	cmp	r3, r6
 8009de6:	b085      	sub	sp, #20
 8009de8:	bfb8      	it	lt
 8009dea:	3101      	addlt	r1, #1
 8009dec:	f7ff fe8e 	bl	8009b0c <_Balloc>
 8009df0:	b930      	cbnz	r0, 8009e00 <__multiply+0x44>
 8009df2:	4602      	mov	r2, r0
 8009df4:	4b44      	ldr	r3, [pc, #272]	; (8009f08 <__multiply+0x14c>)
 8009df6:	4845      	ldr	r0, [pc, #276]	; (8009f0c <__multiply+0x150>)
 8009df8:	f240 115d 	movw	r1, #349	; 0x15d
 8009dfc:	f000 fffe 	bl	800adfc <__assert_func>
 8009e00:	f100 0514 	add.w	r5, r0, #20
 8009e04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e08:	462b      	mov	r3, r5
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	4543      	cmp	r3, r8
 8009e0e:	d321      	bcc.n	8009e54 <__multiply+0x98>
 8009e10:	f104 0314 	add.w	r3, r4, #20
 8009e14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e18:	f109 0314 	add.w	r3, r9, #20
 8009e1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e20:	9202      	str	r2, [sp, #8]
 8009e22:	1b3a      	subs	r2, r7, r4
 8009e24:	3a15      	subs	r2, #21
 8009e26:	f022 0203 	bic.w	r2, r2, #3
 8009e2a:	3204      	adds	r2, #4
 8009e2c:	f104 0115 	add.w	r1, r4, #21
 8009e30:	428f      	cmp	r7, r1
 8009e32:	bf38      	it	cc
 8009e34:	2204      	movcc	r2, #4
 8009e36:	9201      	str	r2, [sp, #4]
 8009e38:	9a02      	ldr	r2, [sp, #8]
 8009e3a:	9303      	str	r3, [sp, #12]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d80c      	bhi.n	8009e5a <__multiply+0x9e>
 8009e40:	2e00      	cmp	r6, #0
 8009e42:	dd03      	ble.n	8009e4c <__multiply+0x90>
 8009e44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d05a      	beq.n	8009f02 <__multiply+0x146>
 8009e4c:	6106      	str	r6, [r0, #16]
 8009e4e:	b005      	add	sp, #20
 8009e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e54:	f843 2b04 	str.w	r2, [r3], #4
 8009e58:	e7d8      	b.n	8009e0c <__multiply+0x50>
 8009e5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e5e:	f1ba 0f00 	cmp.w	sl, #0
 8009e62:	d024      	beq.n	8009eae <__multiply+0xf2>
 8009e64:	f104 0e14 	add.w	lr, r4, #20
 8009e68:	46a9      	mov	r9, r5
 8009e6a:	f04f 0c00 	mov.w	ip, #0
 8009e6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e72:	f8d9 1000 	ldr.w	r1, [r9]
 8009e76:	fa1f fb82 	uxth.w	fp, r2
 8009e7a:	b289      	uxth	r1, r1
 8009e7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e84:	f8d9 2000 	ldr.w	r2, [r9]
 8009e88:	4461      	add	r1, ip
 8009e8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e96:	b289      	uxth	r1, r1
 8009e98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e9c:	4577      	cmp	r7, lr
 8009e9e:	f849 1b04 	str.w	r1, [r9], #4
 8009ea2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ea6:	d8e2      	bhi.n	8009e6e <__multiply+0xb2>
 8009ea8:	9a01      	ldr	r2, [sp, #4]
 8009eaa:	f845 c002 	str.w	ip, [r5, r2]
 8009eae:	9a03      	ldr	r2, [sp, #12]
 8009eb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	f1b9 0f00 	cmp.w	r9, #0
 8009eba:	d020      	beq.n	8009efe <__multiply+0x142>
 8009ebc:	6829      	ldr	r1, [r5, #0]
 8009ebe:	f104 0c14 	add.w	ip, r4, #20
 8009ec2:	46ae      	mov	lr, r5
 8009ec4:	f04f 0a00 	mov.w	sl, #0
 8009ec8:	f8bc b000 	ldrh.w	fp, [ip]
 8009ecc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ed0:	fb09 220b 	mla	r2, r9, fp, r2
 8009ed4:	4492      	add	sl, r2
 8009ed6:	b289      	uxth	r1, r1
 8009ed8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009edc:	f84e 1b04 	str.w	r1, [lr], #4
 8009ee0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ee4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ee8:	0c12      	lsrs	r2, r2, #16
 8009eea:	fb09 1102 	mla	r1, r9, r2, r1
 8009eee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ef2:	4567      	cmp	r7, ip
 8009ef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ef8:	d8e6      	bhi.n	8009ec8 <__multiply+0x10c>
 8009efa:	9a01      	ldr	r2, [sp, #4]
 8009efc:	50a9      	str	r1, [r5, r2]
 8009efe:	3504      	adds	r5, #4
 8009f00:	e79a      	b.n	8009e38 <__multiply+0x7c>
 8009f02:	3e01      	subs	r6, #1
 8009f04:	e79c      	b.n	8009e40 <__multiply+0x84>
 8009f06:	bf00      	nop
 8009f08:	0800b3e0 	.word	0x0800b3e0
 8009f0c:	0800b483 	.word	0x0800b483

08009f10 <__pow5mult>:
 8009f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	4615      	mov	r5, r2
 8009f16:	f012 0203 	ands.w	r2, r2, #3
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	460f      	mov	r7, r1
 8009f1e:	d007      	beq.n	8009f30 <__pow5mult+0x20>
 8009f20:	4c25      	ldr	r4, [pc, #148]	; (8009fb8 <__pow5mult+0xa8>)
 8009f22:	3a01      	subs	r2, #1
 8009f24:	2300      	movs	r3, #0
 8009f26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f2a:	f7ff fe51 	bl	8009bd0 <__multadd>
 8009f2e:	4607      	mov	r7, r0
 8009f30:	10ad      	asrs	r5, r5, #2
 8009f32:	d03d      	beq.n	8009fb0 <__pow5mult+0xa0>
 8009f34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f36:	b97c      	cbnz	r4, 8009f58 <__pow5mult+0x48>
 8009f38:	2010      	movs	r0, #16
 8009f3a:	f7fe f89f 	bl	800807c <malloc>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	6270      	str	r0, [r6, #36]	; 0x24
 8009f42:	b928      	cbnz	r0, 8009f50 <__pow5mult+0x40>
 8009f44:	4b1d      	ldr	r3, [pc, #116]	; (8009fbc <__pow5mult+0xac>)
 8009f46:	481e      	ldr	r0, [pc, #120]	; (8009fc0 <__pow5mult+0xb0>)
 8009f48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f4c:	f000 ff56 	bl	800adfc <__assert_func>
 8009f50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f54:	6004      	str	r4, [r0, #0]
 8009f56:	60c4      	str	r4, [r0, #12]
 8009f58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f60:	b94c      	cbnz	r4, 8009f76 <__pow5mult+0x66>
 8009f62:	f240 2171 	movw	r1, #625	; 0x271
 8009f66:	4630      	mov	r0, r6
 8009f68:	f7ff ff12 	bl	8009d90 <__i2b>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f72:	4604      	mov	r4, r0
 8009f74:	6003      	str	r3, [r0, #0]
 8009f76:	f04f 0900 	mov.w	r9, #0
 8009f7a:	07eb      	lsls	r3, r5, #31
 8009f7c:	d50a      	bpl.n	8009f94 <__pow5mult+0x84>
 8009f7e:	4639      	mov	r1, r7
 8009f80:	4622      	mov	r2, r4
 8009f82:	4630      	mov	r0, r6
 8009f84:	f7ff ff1a 	bl	8009dbc <__multiply>
 8009f88:	4639      	mov	r1, r7
 8009f8a:	4680      	mov	r8, r0
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f7ff fdfd 	bl	8009b8c <_Bfree>
 8009f92:	4647      	mov	r7, r8
 8009f94:	106d      	asrs	r5, r5, #1
 8009f96:	d00b      	beq.n	8009fb0 <__pow5mult+0xa0>
 8009f98:	6820      	ldr	r0, [r4, #0]
 8009f9a:	b938      	cbnz	r0, 8009fac <__pow5mult+0x9c>
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f7ff ff0b 	bl	8009dbc <__multiply>
 8009fa6:	6020      	str	r0, [r4, #0]
 8009fa8:	f8c0 9000 	str.w	r9, [r0]
 8009fac:	4604      	mov	r4, r0
 8009fae:	e7e4      	b.n	8009f7a <__pow5mult+0x6a>
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fb6:	bf00      	nop
 8009fb8:	0800b5d0 	.word	0x0800b5d0
 8009fbc:	0800b46c 	.word	0x0800b46c
 8009fc0:	0800b483 	.word	0x0800b483

08009fc4 <__lshift>:
 8009fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc8:	460c      	mov	r4, r1
 8009fca:	6849      	ldr	r1, [r1, #4]
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fd2:	68a3      	ldr	r3, [r4, #8]
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	4691      	mov	r9, r2
 8009fd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fdc:	f108 0601 	add.w	r6, r8, #1
 8009fe0:	42b3      	cmp	r3, r6
 8009fe2:	db0b      	blt.n	8009ffc <__lshift+0x38>
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f7ff fd91 	bl	8009b0c <_Balloc>
 8009fea:	4605      	mov	r5, r0
 8009fec:	b948      	cbnz	r0, 800a002 <__lshift+0x3e>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	4b2a      	ldr	r3, [pc, #168]	; (800a09c <__lshift+0xd8>)
 8009ff2:	482b      	ldr	r0, [pc, #172]	; (800a0a0 <__lshift+0xdc>)
 8009ff4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ff8:	f000 ff00 	bl	800adfc <__assert_func>
 8009ffc:	3101      	adds	r1, #1
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	e7ee      	b.n	8009fe0 <__lshift+0x1c>
 800a002:	2300      	movs	r3, #0
 800a004:	f100 0114 	add.w	r1, r0, #20
 800a008:	f100 0210 	add.w	r2, r0, #16
 800a00c:	4618      	mov	r0, r3
 800a00e:	4553      	cmp	r3, sl
 800a010:	db37      	blt.n	800a082 <__lshift+0xbe>
 800a012:	6920      	ldr	r0, [r4, #16]
 800a014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a018:	f104 0314 	add.w	r3, r4, #20
 800a01c:	f019 091f 	ands.w	r9, r9, #31
 800a020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a024:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a028:	d02f      	beq.n	800a08a <__lshift+0xc6>
 800a02a:	f1c9 0e20 	rsb	lr, r9, #32
 800a02e:	468a      	mov	sl, r1
 800a030:	f04f 0c00 	mov.w	ip, #0
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	fa02 f209 	lsl.w	r2, r2, r9
 800a03a:	ea42 020c 	orr.w	r2, r2, ip
 800a03e:	f84a 2b04 	str.w	r2, [sl], #4
 800a042:	f853 2b04 	ldr.w	r2, [r3], #4
 800a046:	4298      	cmp	r0, r3
 800a048:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a04c:	d8f2      	bhi.n	800a034 <__lshift+0x70>
 800a04e:	1b03      	subs	r3, r0, r4
 800a050:	3b15      	subs	r3, #21
 800a052:	f023 0303 	bic.w	r3, r3, #3
 800a056:	3304      	adds	r3, #4
 800a058:	f104 0215 	add.w	r2, r4, #21
 800a05c:	4290      	cmp	r0, r2
 800a05e:	bf38      	it	cc
 800a060:	2304      	movcc	r3, #4
 800a062:	f841 c003 	str.w	ip, [r1, r3]
 800a066:	f1bc 0f00 	cmp.w	ip, #0
 800a06a:	d001      	beq.n	800a070 <__lshift+0xac>
 800a06c:	f108 0602 	add.w	r6, r8, #2
 800a070:	3e01      	subs	r6, #1
 800a072:	4638      	mov	r0, r7
 800a074:	612e      	str	r6, [r5, #16]
 800a076:	4621      	mov	r1, r4
 800a078:	f7ff fd88 	bl	8009b8c <_Bfree>
 800a07c:	4628      	mov	r0, r5
 800a07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a082:	f842 0f04 	str.w	r0, [r2, #4]!
 800a086:	3301      	adds	r3, #1
 800a088:	e7c1      	b.n	800a00e <__lshift+0x4a>
 800a08a:	3904      	subs	r1, #4
 800a08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a090:	f841 2f04 	str.w	r2, [r1, #4]!
 800a094:	4298      	cmp	r0, r3
 800a096:	d8f9      	bhi.n	800a08c <__lshift+0xc8>
 800a098:	e7ea      	b.n	800a070 <__lshift+0xac>
 800a09a:	bf00      	nop
 800a09c:	0800b3e0 	.word	0x0800b3e0
 800a0a0:	0800b483 	.word	0x0800b483

0800a0a4 <__mcmp>:
 800a0a4:	b530      	push	{r4, r5, lr}
 800a0a6:	6902      	ldr	r2, [r0, #16]
 800a0a8:	690c      	ldr	r4, [r1, #16]
 800a0aa:	1b12      	subs	r2, r2, r4
 800a0ac:	d10e      	bne.n	800a0cc <__mcmp+0x28>
 800a0ae:	f100 0314 	add.w	r3, r0, #20
 800a0b2:	3114      	adds	r1, #20
 800a0b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0c4:	42a5      	cmp	r5, r4
 800a0c6:	d003      	beq.n	800a0d0 <__mcmp+0x2c>
 800a0c8:	d305      	bcc.n	800a0d6 <__mcmp+0x32>
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	bd30      	pop	{r4, r5, pc}
 800a0d0:	4283      	cmp	r3, r0
 800a0d2:	d3f3      	bcc.n	800a0bc <__mcmp+0x18>
 800a0d4:	e7fa      	b.n	800a0cc <__mcmp+0x28>
 800a0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0da:	e7f7      	b.n	800a0cc <__mcmp+0x28>

0800a0dc <__mdiff>:
 800a0dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4690      	mov	r8, r2
 800a0ea:	f7ff ffdb 	bl	800a0a4 <__mcmp>
 800a0ee:	1e05      	subs	r5, r0, #0
 800a0f0:	d110      	bne.n	800a114 <__mdiff+0x38>
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f7ff fd09 	bl	8009b0c <_Balloc>
 800a0fa:	b930      	cbnz	r0, 800a10a <__mdiff+0x2e>
 800a0fc:	4b3a      	ldr	r3, [pc, #232]	; (800a1e8 <__mdiff+0x10c>)
 800a0fe:	4602      	mov	r2, r0
 800a100:	f240 2132 	movw	r1, #562	; 0x232
 800a104:	4839      	ldr	r0, [pc, #228]	; (800a1ec <__mdiff+0x110>)
 800a106:	f000 fe79 	bl	800adfc <__assert_func>
 800a10a:	2301      	movs	r3, #1
 800a10c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a114:	bfa4      	itt	ge
 800a116:	4643      	movge	r3, r8
 800a118:	46a0      	movge	r8, r4
 800a11a:	4630      	mov	r0, r6
 800a11c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a120:	bfa6      	itte	ge
 800a122:	461c      	movge	r4, r3
 800a124:	2500      	movge	r5, #0
 800a126:	2501      	movlt	r5, #1
 800a128:	f7ff fcf0 	bl	8009b0c <_Balloc>
 800a12c:	b920      	cbnz	r0, 800a138 <__mdiff+0x5c>
 800a12e:	4b2e      	ldr	r3, [pc, #184]	; (800a1e8 <__mdiff+0x10c>)
 800a130:	4602      	mov	r2, r0
 800a132:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a136:	e7e5      	b.n	800a104 <__mdiff+0x28>
 800a138:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a13c:	6926      	ldr	r6, [r4, #16]
 800a13e:	60c5      	str	r5, [r0, #12]
 800a140:	f104 0914 	add.w	r9, r4, #20
 800a144:	f108 0514 	add.w	r5, r8, #20
 800a148:	f100 0e14 	add.w	lr, r0, #20
 800a14c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a150:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a154:	f108 0210 	add.w	r2, r8, #16
 800a158:	46f2      	mov	sl, lr
 800a15a:	2100      	movs	r1, #0
 800a15c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a164:	fa1f f883 	uxth.w	r8, r3
 800a168:	fa11 f18b 	uxtah	r1, r1, fp
 800a16c:	0c1b      	lsrs	r3, r3, #16
 800a16e:	eba1 0808 	sub.w	r8, r1, r8
 800a172:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a176:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a17a:	fa1f f888 	uxth.w	r8, r8
 800a17e:	1419      	asrs	r1, r3, #16
 800a180:	454e      	cmp	r6, r9
 800a182:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a186:	f84a 3b04 	str.w	r3, [sl], #4
 800a18a:	d8e7      	bhi.n	800a15c <__mdiff+0x80>
 800a18c:	1b33      	subs	r3, r6, r4
 800a18e:	3b15      	subs	r3, #21
 800a190:	f023 0303 	bic.w	r3, r3, #3
 800a194:	3304      	adds	r3, #4
 800a196:	3415      	adds	r4, #21
 800a198:	42a6      	cmp	r6, r4
 800a19a:	bf38      	it	cc
 800a19c:	2304      	movcc	r3, #4
 800a19e:	441d      	add	r5, r3
 800a1a0:	4473      	add	r3, lr
 800a1a2:	469e      	mov	lr, r3
 800a1a4:	462e      	mov	r6, r5
 800a1a6:	4566      	cmp	r6, ip
 800a1a8:	d30e      	bcc.n	800a1c8 <__mdiff+0xec>
 800a1aa:	f10c 0203 	add.w	r2, ip, #3
 800a1ae:	1b52      	subs	r2, r2, r5
 800a1b0:	f022 0203 	bic.w	r2, r2, #3
 800a1b4:	3d03      	subs	r5, #3
 800a1b6:	45ac      	cmp	ip, r5
 800a1b8:	bf38      	it	cc
 800a1ba:	2200      	movcc	r2, #0
 800a1bc:	441a      	add	r2, r3
 800a1be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a1c2:	b17b      	cbz	r3, 800a1e4 <__mdiff+0x108>
 800a1c4:	6107      	str	r7, [r0, #16]
 800a1c6:	e7a3      	b.n	800a110 <__mdiff+0x34>
 800a1c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a1cc:	fa11 f288 	uxtah	r2, r1, r8
 800a1d0:	1414      	asrs	r4, r2, #16
 800a1d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1d6:	b292      	uxth	r2, r2
 800a1d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a1dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a1e0:	1421      	asrs	r1, r4, #16
 800a1e2:	e7e0      	b.n	800a1a6 <__mdiff+0xca>
 800a1e4:	3f01      	subs	r7, #1
 800a1e6:	e7ea      	b.n	800a1be <__mdiff+0xe2>
 800a1e8:	0800b3e0 	.word	0x0800b3e0
 800a1ec:	0800b483 	.word	0x0800b483

0800a1f0 <__ulp>:
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	ed8d 0b00 	vstr	d0, [sp]
 800a1f6:	9b01      	ldr	r3, [sp, #4]
 800a1f8:	4912      	ldr	r1, [pc, #72]	; (800a244 <__ulp+0x54>)
 800a1fa:	4019      	ands	r1, r3
 800a1fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a200:	2900      	cmp	r1, #0
 800a202:	dd05      	ble.n	800a210 <__ulp+0x20>
 800a204:	2200      	movs	r2, #0
 800a206:	460b      	mov	r3, r1
 800a208:	ec43 2b10 	vmov	d0, r2, r3
 800a20c:	b002      	add	sp, #8
 800a20e:	4770      	bx	lr
 800a210:	4249      	negs	r1, r1
 800a212:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a216:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a21a:	f04f 0200 	mov.w	r2, #0
 800a21e:	f04f 0300 	mov.w	r3, #0
 800a222:	da04      	bge.n	800a22e <__ulp+0x3e>
 800a224:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a228:	fa41 f300 	asr.w	r3, r1, r0
 800a22c:	e7ec      	b.n	800a208 <__ulp+0x18>
 800a22e:	f1a0 0114 	sub.w	r1, r0, #20
 800a232:	291e      	cmp	r1, #30
 800a234:	bfda      	itte	le
 800a236:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a23a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a23e:	2101      	movgt	r1, #1
 800a240:	460a      	mov	r2, r1
 800a242:	e7e1      	b.n	800a208 <__ulp+0x18>
 800a244:	7ff00000 	.word	0x7ff00000

0800a248 <__b2d>:
 800a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24a:	6905      	ldr	r5, [r0, #16]
 800a24c:	f100 0714 	add.w	r7, r0, #20
 800a250:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a254:	1f2e      	subs	r6, r5, #4
 800a256:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a25a:	4620      	mov	r0, r4
 800a25c:	f7ff fd48 	bl	8009cf0 <__hi0bits>
 800a260:	f1c0 0320 	rsb	r3, r0, #32
 800a264:	280a      	cmp	r0, #10
 800a266:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a2e4 <__b2d+0x9c>
 800a26a:	600b      	str	r3, [r1, #0]
 800a26c:	dc14      	bgt.n	800a298 <__b2d+0x50>
 800a26e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a272:	fa24 f10e 	lsr.w	r1, r4, lr
 800a276:	42b7      	cmp	r7, r6
 800a278:	ea41 030c 	orr.w	r3, r1, ip
 800a27c:	bf34      	ite	cc
 800a27e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a282:	2100      	movcs	r1, #0
 800a284:	3015      	adds	r0, #21
 800a286:	fa04 f000 	lsl.w	r0, r4, r0
 800a28a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a28e:	ea40 0201 	orr.w	r2, r0, r1
 800a292:	ec43 2b10 	vmov	d0, r2, r3
 800a296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a298:	42b7      	cmp	r7, r6
 800a29a:	bf3a      	itte	cc
 800a29c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a2a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a2a4:	2100      	movcs	r1, #0
 800a2a6:	380b      	subs	r0, #11
 800a2a8:	d017      	beq.n	800a2da <__b2d+0x92>
 800a2aa:	f1c0 0c20 	rsb	ip, r0, #32
 800a2ae:	fa04 f500 	lsl.w	r5, r4, r0
 800a2b2:	42be      	cmp	r6, r7
 800a2b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a2b8:	ea45 0504 	orr.w	r5, r5, r4
 800a2bc:	bf8c      	ite	hi
 800a2be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a2c2:	2400      	movls	r4, #0
 800a2c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a2c8:	fa01 f000 	lsl.w	r0, r1, r0
 800a2cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a2d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2d4:	ea40 0204 	orr.w	r2, r0, r4
 800a2d8:	e7db      	b.n	800a292 <__b2d+0x4a>
 800a2da:	ea44 030c 	orr.w	r3, r4, ip
 800a2de:	460a      	mov	r2, r1
 800a2e0:	e7d7      	b.n	800a292 <__b2d+0x4a>
 800a2e2:	bf00      	nop
 800a2e4:	3ff00000 	.word	0x3ff00000

0800a2e8 <__d2b>:
 800a2e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2ec:	4689      	mov	r9, r1
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	ec57 6b10 	vmov	r6, r7, d0
 800a2f4:	4690      	mov	r8, r2
 800a2f6:	f7ff fc09 	bl	8009b0c <_Balloc>
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	b930      	cbnz	r0, 800a30c <__d2b+0x24>
 800a2fe:	4602      	mov	r2, r0
 800a300:	4b25      	ldr	r3, [pc, #148]	; (800a398 <__d2b+0xb0>)
 800a302:	4826      	ldr	r0, [pc, #152]	; (800a39c <__d2b+0xb4>)
 800a304:	f240 310a 	movw	r1, #778	; 0x30a
 800a308:	f000 fd78 	bl	800adfc <__assert_func>
 800a30c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a314:	bb35      	cbnz	r5, 800a364 <__d2b+0x7c>
 800a316:	2e00      	cmp	r6, #0
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	d028      	beq.n	800a36e <__d2b+0x86>
 800a31c:	4668      	mov	r0, sp
 800a31e:	9600      	str	r6, [sp, #0]
 800a320:	f7ff fd06 	bl	8009d30 <__lo0bits>
 800a324:	9900      	ldr	r1, [sp, #0]
 800a326:	b300      	cbz	r0, 800a36a <__d2b+0x82>
 800a328:	9a01      	ldr	r2, [sp, #4]
 800a32a:	f1c0 0320 	rsb	r3, r0, #32
 800a32e:	fa02 f303 	lsl.w	r3, r2, r3
 800a332:	430b      	orrs	r3, r1
 800a334:	40c2      	lsrs	r2, r0
 800a336:	6163      	str	r3, [r4, #20]
 800a338:	9201      	str	r2, [sp, #4]
 800a33a:	9b01      	ldr	r3, [sp, #4]
 800a33c:	61a3      	str	r3, [r4, #24]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bf14      	ite	ne
 800a342:	2202      	movne	r2, #2
 800a344:	2201      	moveq	r2, #1
 800a346:	6122      	str	r2, [r4, #16]
 800a348:	b1d5      	cbz	r5, 800a380 <__d2b+0x98>
 800a34a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a34e:	4405      	add	r5, r0
 800a350:	f8c9 5000 	str.w	r5, [r9]
 800a354:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a358:	f8c8 0000 	str.w	r0, [r8]
 800a35c:	4620      	mov	r0, r4
 800a35e:	b003      	add	sp, #12
 800a360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a368:	e7d5      	b.n	800a316 <__d2b+0x2e>
 800a36a:	6161      	str	r1, [r4, #20]
 800a36c:	e7e5      	b.n	800a33a <__d2b+0x52>
 800a36e:	a801      	add	r0, sp, #4
 800a370:	f7ff fcde 	bl	8009d30 <__lo0bits>
 800a374:	9b01      	ldr	r3, [sp, #4]
 800a376:	6163      	str	r3, [r4, #20]
 800a378:	2201      	movs	r2, #1
 800a37a:	6122      	str	r2, [r4, #16]
 800a37c:	3020      	adds	r0, #32
 800a37e:	e7e3      	b.n	800a348 <__d2b+0x60>
 800a380:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a384:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a388:	f8c9 0000 	str.w	r0, [r9]
 800a38c:	6918      	ldr	r0, [r3, #16]
 800a38e:	f7ff fcaf 	bl	8009cf0 <__hi0bits>
 800a392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a396:	e7df      	b.n	800a358 <__d2b+0x70>
 800a398:	0800b3e0 	.word	0x0800b3e0
 800a39c:	0800b483 	.word	0x0800b483

0800a3a0 <__ratio>:
 800a3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	4688      	mov	r8, r1
 800a3a6:	4669      	mov	r1, sp
 800a3a8:	4681      	mov	r9, r0
 800a3aa:	f7ff ff4d 	bl	800a248 <__b2d>
 800a3ae:	a901      	add	r1, sp, #4
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	ec55 4b10 	vmov	r4, r5, d0
 800a3b6:	f7ff ff47 	bl	800a248 <__b2d>
 800a3ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a3c2:	eba3 0c02 	sub.w	ip, r3, r2
 800a3c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a3ca:	1a9b      	subs	r3, r3, r2
 800a3cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a3d0:	ec51 0b10 	vmov	r0, r1, d0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bfd6      	itet	le
 800a3d8:	460a      	movle	r2, r1
 800a3da:	462a      	movgt	r2, r5
 800a3dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a3e0:	468b      	mov	fp, r1
 800a3e2:	462f      	mov	r7, r5
 800a3e4:	bfd4      	ite	le
 800a3e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a3ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	ee10 2a10 	vmov	r2, s0
 800a3f4:	465b      	mov	r3, fp
 800a3f6:	4639      	mov	r1, r7
 800a3f8:	f7f6 fa40 	bl	800087c <__aeabi_ddiv>
 800a3fc:	ec41 0b10 	vmov	d0, r0, r1
 800a400:	b003      	add	sp, #12
 800a402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a406 <__copybits>:
 800a406:	3901      	subs	r1, #1
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	1149      	asrs	r1, r1, #5
 800a40c:	6914      	ldr	r4, [r2, #16]
 800a40e:	3101      	adds	r1, #1
 800a410:	f102 0314 	add.w	r3, r2, #20
 800a414:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a418:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a41c:	1f05      	subs	r5, r0, #4
 800a41e:	42a3      	cmp	r3, r4
 800a420:	d30c      	bcc.n	800a43c <__copybits+0x36>
 800a422:	1aa3      	subs	r3, r4, r2
 800a424:	3b11      	subs	r3, #17
 800a426:	f023 0303 	bic.w	r3, r3, #3
 800a42a:	3211      	adds	r2, #17
 800a42c:	42a2      	cmp	r2, r4
 800a42e:	bf88      	it	hi
 800a430:	2300      	movhi	r3, #0
 800a432:	4418      	add	r0, r3
 800a434:	2300      	movs	r3, #0
 800a436:	4288      	cmp	r0, r1
 800a438:	d305      	bcc.n	800a446 <__copybits+0x40>
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
 800a43c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a440:	f845 6f04 	str.w	r6, [r5, #4]!
 800a444:	e7eb      	b.n	800a41e <__copybits+0x18>
 800a446:	f840 3b04 	str.w	r3, [r0], #4
 800a44a:	e7f4      	b.n	800a436 <__copybits+0x30>

0800a44c <__any_on>:
 800a44c:	f100 0214 	add.w	r2, r0, #20
 800a450:	6900      	ldr	r0, [r0, #16]
 800a452:	114b      	asrs	r3, r1, #5
 800a454:	4298      	cmp	r0, r3
 800a456:	b510      	push	{r4, lr}
 800a458:	db11      	blt.n	800a47e <__any_on+0x32>
 800a45a:	dd0a      	ble.n	800a472 <__any_on+0x26>
 800a45c:	f011 011f 	ands.w	r1, r1, #31
 800a460:	d007      	beq.n	800a472 <__any_on+0x26>
 800a462:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a466:	fa24 f001 	lsr.w	r0, r4, r1
 800a46a:	fa00 f101 	lsl.w	r1, r0, r1
 800a46e:	428c      	cmp	r4, r1
 800a470:	d10b      	bne.n	800a48a <__any_on+0x3e>
 800a472:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a476:	4293      	cmp	r3, r2
 800a478:	d803      	bhi.n	800a482 <__any_on+0x36>
 800a47a:	2000      	movs	r0, #0
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	4603      	mov	r3, r0
 800a480:	e7f7      	b.n	800a472 <__any_on+0x26>
 800a482:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a486:	2900      	cmp	r1, #0
 800a488:	d0f5      	beq.n	800a476 <__any_on+0x2a>
 800a48a:	2001      	movs	r0, #1
 800a48c:	e7f6      	b.n	800a47c <__any_on+0x30>

0800a48e <_calloc_r>:
 800a48e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a490:	fba1 2402 	umull	r2, r4, r1, r2
 800a494:	b94c      	cbnz	r4, 800a4aa <_calloc_r+0x1c>
 800a496:	4611      	mov	r1, r2
 800a498:	9201      	str	r2, [sp, #4]
 800a49a:	f7fd fe81 	bl	80081a0 <_malloc_r>
 800a49e:	9a01      	ldr	r2, [sp, #4]
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	b930      	cbnz	r0, 800a4b2 <_calloc_r+0x24>
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	b003      	add	sp, #12
 800a4a8:	bd30      	pop	{r4, r5, pc}
 800a4aa:	220c      	movs	r2, #12
 800a4ac:	6002      	str	r2, [r0, #0]
 800a4ae:	2500      	movs	r5, #0
 800a4b0:	e7f8      	b.n	800a4a4 <_calloc_r+0x16>
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	f7fd fe00 	bl	80080b8 <memset>
 800a4b8:	e7f4      	b.n	800a4a4 <_calloc_r+0x16>

0800a4ba <_realloc_r>:
 800a4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4be:	4680      	mov	r8, r0
 800a4c0:	4614      	mov	r4, r2
 800a4c2:	460e      	mov	r6, r1
 800a4c4:	b921      	cbnz	r1, 800a4d0 <_realloc_r+0x16>
 800a4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	f7fd be68 	b.w	80081a0 <_malloc_r>
 800a4d0:	b92a      	cbnz	r2, 800a4de <_realloc_r+0x24>
 800a4d2:	f7fd fdf9 	bl	80080c8 <_free_r>
 800a4d6:	4625      	mov	r5, r4
 800a4d8:	4628      	mov	r0, r5
 800a4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4de:	f000 fcf9 	bl	800aed4 <_malloc_usable_size_r>
 800a4e2:	4284      	cmp	r4, r0
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	d802      	bhi.n	800a4ee <_realloc_r+0x34>
 800a4e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4ec:	d812      	bhi.n	800a514 <_realloc_r+0x5a>
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	f7fd fe55 	bl	80081a0 <_malloc_r>
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d0ed      	beq.n	800a4d8 <_realloc_r+0x1e>
 800a4fc:	42bc      	cmp	r4, r7
 800a4fe:	4622      	mov	r2, r4
 800a500:	4631      	mov	r1, r6
 800a502:	bf28      	it	cs
 800a504:	463a      	movcs	r2, r7
 800a506:	f7fd fdc9 	bl	800809c <memcpy>
 800a50a:	4631      	mov	r1, r6
 800a50c:	4640      	mov	r0, r8
 800a50e:	f7fd fddb 	bl	80080c8 <_free_r>
 800a512:	e7e1      	b.n	800a4d8 <_realloc_r+0x1e>
 800a514:	4635      	mov	r5, r6
 800a516:	e7df      	b.n	800a4d8 <_realloc_r+0x1e>

0800a518 <__ssputs_r>:
 800a518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a51c:	688e      	ldr	r6, [r1, #8]
 800a51e:	429e      	cmp	r6, r3
 800a520:	4682      	mov	sl, r0
 800a522:	460c      	mov	r4, r1
 800a524:	4690      	mov	r8, r2
 800a526:	461f      	mov	r7, r3
 800a528:	d838      	bhi.n	800a59c <__ssputs_r+0x84>
 800a52a:	898a      	ldrh	r2, [r1, #12]
 800a52c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a530:	d032      	beq.n	800a598 <__ssputs_r+0x80>
 800a532:	6825      	ldr	r5, [r4, #0]
 800a534:	6909      	ldr	r1, [r1, #16]
 800a536:	eba5 0901 	sub.w	r9, r5, r1
 800a53a:	6965      	ldr	r5, [r4, #20]
 800a53c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a544:	3301      	adds	r3, #1
 800a546:	444b      	add	r3, r9
 800a548:	106d      	asrs	r5, r5, #1
 800a54a:	429d      	cmp	r5, r3
 800a54c:	bf38      	it	cc
 800a54e:	461d      	movcc	r5, r3
 800a550:	0553      	lsls	r3, r2, #21
 800a552:	d531      	bpl.n	800a5b8 <__ssputs_r+0xa0>
 800a554:	4629      	mov	r1, r5
 800a556:	f7fd fe23 	bl	80081a0 <_malloc_r>
 800a55a:	4606      	mov	r6, r0
 800a55c:	b950      	cbnz	r0, 800a574 <__ssputs_r+0x5c>
 800a55e:	230c      	movs	r3, #12
 800a560:	f8ca 3000 	str.w	r3, [sl]
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295
 800a570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a574:	6921      	ldr	r1, [r4, #16]
 800a576:	464a      	mov	r2, r9
 800a578:	f7fd fd90 	bl	800809c <memcpy>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	6126      	str	r6, [r4, #16]
 800a58a:	6165      	str	r5, [r4, #20]
 800a58c:	444e      	add	r6, r9
 800a58e:	eba5 0509 	sub.w	r5, r5, r9
 800a592:	6026      	str	r6, [r4, #0]
 800a594:	60a5      	str	r5, [r4, #8]
 800a596:	463e      	mov	r6, r7
 800a598:	42be      	cmp	r6, r7
 800a59a:	d900      	bls.n	800a59e <__ssputs_r+0x86>
 800a59c:	463e      	mov	r6, r7
 800a59e:	6820      	ldr	r0, [r4, #0]
 800a5a0:	4632      	mov	r2, r6
 800a5a2:	4641      	mov	r1, r8
 800a5a4:	f000 fc7c 	bl	800aea0 <memmove>
 800a5a8:	68a3      	ldr	r3, [r4, #8]
 800a5aa:	1b9b      	subs	r3, r3, r6
 800a5ac:	60a3      	str	r3, [r4, #8]
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	4433      	add	r3, r6
 800a5b2:	6023      	str	r3, [r4, #0]
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	e7db      	b.n	800a570 <__ssputs_r+0x58>
 800a5b8:	462a      	mov	r2, r5
 800a5ba:	f7ff ff7e 	bl	800a4ba <_realloc_r>
 800a5be:	4606      	mov	r6, r0
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d1e1      	bne.n	800a588 <__ssputs_r+0x70>
 800a5c4:	6921      	ldr	r1, [r4, #16]
 800a5c6:	4650      	mov	r0, sl
 800a5c8:	f7fd fd7e 	bl	80080c8 <_free_r>
 800a5cc:	e7c7      	b.n	800a55e <__ssputs_r+0x46>
	...

0800a5d0 <_svfiprintf_r>:
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	4698      	mov	r8, r3
 800a5d6:	898b      	ldrh	r3, [r1, #12]
 800a5d8:	061b      	lsls	r3, r3, #24
 800a5da:	b09d      	sub	sp, #116	; 0x74
 800a5dc:	4607      	mov	r7, r0
 800a5de:	460d      	mov	r5, r1
 800a5e0:	4614      	mov	r4, r2
 800a5e2:	d50e      	bpl.n	800a602 <_svfiprintf_r+0x32>
 800a5e4:	690b      	ldr	r3, [r1, #16]
 800a5e6:	b963      	cbnz	r3, 800a602 <_svfiprintf_r+0x32>
 800a5e8:	2140      	movs	r1, #64	; 0x40
 800a5ea:	f7fd fdd9 	bl	80081a0 <_malloc_r>
 800a5ee:	6028      	str	r0, [r5, #0]
 800a5f0:	6128      	str	r0, [r5, #16]
 800a5f2:	b920      	cbnz	r0, 800a5fe <_svfiprintf_r+0x2e>
 800a5f4:	230c      	movs	r3, #12
 800a5f6:	603b      	str	r3, [r7, #0]
 800a5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5fc:	e0d1      	b.n	800a7a2 <_svfiprintf_r+0x1d2>
 800a5fe:	2340      	movs	r3, #64	; 0x40
 800a600:	616b      	str	r3, [r5, #20]
 800a602:	2300      	movs	r3, #0
 800a604:	9309      	str	r3, [sp, #36]	; 0x24
 800a606:	2320      	movs	r3, #32
 800a608:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a60c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a610:	2330      	movs	r3, #48	; 0x30
 800a612:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7bc <_svfiprintf_r+0x1ec>
 800a616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a61a:	f04f 0901 	mov.w	r9, #1
 800a61e:	4623      	mov	r3, r4
 800a620:	469a      	mov	sl, r3
 800a622:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a626:	b10a      	cbz	r2, 800a62c <_svfiprintf_r+0x5c>
 800a628:	2a25      	cmp	r2, #37	; 0x25
 800a62a:	d1f9      	bne.n	800a620 <_svfiprintf_r+0x50>
 800a62c:	ebba 0b04 	subs.w	fp, sl, r4
 800a630:	d00b      	beq.n	800a64a <_svfiprintf_r+0x7a>
 800a632:	465b      	mov	r3, fp
 800a634:	4622      	mov	r2, r4
 800a636:	4629      	mov	r1, r5
 800a638:	4638      	mov	r0, r7
 800a63a:	f7ff ff6d 	bl	800a518 <__ssputs_r>
 800a63e:	3001      	adds	r0, #1
 800a640:	f000 80aa 	beq.w	800a798 <_svfiprintf_r+0x1c8>
 800a644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a646:	445a      	add	r2, fp
 800a648:	9209      	str	r2, [sp, #36]	; 0x24
 800a64a:	f89a 3000 	ldrb.w	r3, [sl]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f000 80a2 	beq.w	800a798 <_svfiprintf_r+0x1c8>
 800a654:	2300      	movs	r3, #0
 800a656:	f04f 32ff 	mov.w	r2, #4294967295
 800a65a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a65e:	f10a 0a01 	add.w	sl, sl, #1
 800a662:	9304      	str	r3, [sp, #16]
 800a664:	9307      	str	r3, [sp, #28]
 800a666:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a66a:	931a      	str	r3, [sp, #104]	; 0x68
 800a66c:	4654      	mov	r4, sl
 800a66e:	2205      	movs	r2, #5
 800a670:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a674:	4851      	ldr	r0, [pc, #324]	; (800a7bc <_svfiprintf_r+0x1ec>)
 800a676:	f7f5 fdcb 	bl	8000210 <memchr>
 800a67a:	9a04      	ldr	r2, [sp, #16]
 800a67c:	b9d8      	cbnz	r0, 800a6b6 <_svfiprintf_r+0xe6>
 800a67e:	06d0      	lsls	r0, r2, #27
 800a680:	bf44      	itt	mi
 800a682:	2320      	movmi	r3, #32
 800a684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a688:	0711      	lsls	r1, r2, #28
 800a68a:	bf44      	itt	mi
 800a68c:	232b      	movmi	r3, #43	; 0x2b
 800a68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a692:	f89a 3000 	ldrb.w	r3, [sl]
 800a696:	2b2a      	cmp	r3, #42	; 0x2a
 800a698:	d015      	beq.n	800a6c6 <_svfiprintf_r+0xf6>
 800a69a:	9a07      	ldr	r2, [sp, #28]
 800a69c:	4654      	mov	r4, sl
 800a69e:	2000      	movs	r0, #0
 800a6a0:	f04f 0c0a 	mov.w	ip, #10
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6aa:	3b30      	subs	r3, #48	; 0x30
 800a6ac:	2b09      	cmp	r3, #9
 800a6ae:	d94e      	bls.n	800a74e <_svfiprintf_r+0x17e>
 800a6b0:	b1b0      	cbz	r0, 800a6e0 <_svfiprintf_r+0x110>
 800a6b2:	9207      	str	r2, [sp, #28]
 800a6b4:	e014      	b.n	800a6e0 <_svfiprintf_r+0x110>
 800a6b6:	eba0 0308 	sub.w	r3, r0, r8
 800a6ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	9304      	str	r3, [sp, #16]
 800a6c2:	46a2      	mov	sl, r4
 800a6c4:	e7d2      	b.n	800a66c <_svfiprintf_r+0x9c>
 800a6c6:	9b03      	ldr	r3, [sp, #12]
 800a6c8:	1d19      	adds	r1, r3, #4
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	9103      	str	r1, [sp, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	bfbb      	ittet	lt
 800a6d2:	425b      	neglt	r3, r3
 800a6d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6d8:	9307      	strge	r3, [sp, #28]
 800a6da:	9307      	strlt	r3, [sp, #28]
 800a6dc:	bfb8      	it	lt
 800a6de:	9204      	strlt	r2, [sp, #16]
 800a6e0:	7823      	ldrb	r3, [r4, #0]
 800a6e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a6e4:	d10c      	bne.n	800a700 <_svfiprintf_r+0x130>
 800a6e6:	7863      	ldrb	r3, [r4, #1]
 800a6e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ea:	d135      	bne.n	800a758 <_svfiprintf_r+0x188>
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	1d1a      	adds	r2, r3, #4
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	9203      	str	r2, [sp, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	bfb8      	it	lt
 800a6f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6fc:	3402      	adds	r4, #2
 800a6fe:	9305      	str	r3, [sp, #20]
 800a700:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7cc <_svfiprintf_r+0x1fc>
 800a704:	7821      	ldrb	r1, [r4, #0]
 800a706:	2203      	movs	r2, #3
 800a708:	4650      	mov	r0, sl
 800a70a:	f7f5 fd81 	bl	8000210 <memchr>
 800a70e:	b140      	cbz	r0, 800a722 <_svfiprintf_r+0x152>
 800a710:	2340      	movs	r3, #64	; 0x40
 800a712:	eba0 000a 	sub.w	r0, r0, sl
 800a716:	fa03 f000 	lsl.w	r0, r3, r0
 800a71a:	9b04      	ldr	r3, [sp, #16]
 800a71c:	4303      	orrs	r3, r0
 800a71e:	3401      	adds	r4, #1
 800a720:	9304      	str	r3, [sp, #16]
 800a722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a726:	4826      	ldr	r0, [pc, #152]	; (800a7c0 <_svfiprintf_r+0x1f0>)
 800a728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a72c:	2206      	movs	r2, #6
 800a72e:	f7f5 fd6f 	bl	8000210 <memchr>
 800a732:	2800      	cmp	r0, #0
 800a734:	d038      	beq.n	800a7a8 <_svfiprintf_r+0x1d8>
 800a736:	4b23      	ldr	r3, [pc, #140]	; (800a7c4 <_svfiprintf_r+0x1f4>)
 800a738:	bb1b      	cbnz	r3, 800a782 <_svfiprintf_r+0x1b2>
 800a73a:	9b03      	ldr	r3, [sp, #12]
 800a73c:	3307      	adds	r3, #7
 800a73e:	f023 0307 	bic.w	r3, r3, #7
 800a742:	3308      	adds	r3, #8
 800a744:	9303      	str	r3, [sp, #12]
 800a746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a748:	4433      	add	r3, r6
 800a74a:	9309      	str	r3, [sp, #36]	; 0x24
 800a74c:	e767      	b.n	800a61e <_svfiprintf_r+0x4e>
 800a74e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a752:	460c      	mov	r4, r1
 800a754:	2001      	movs	r0, #1
 800a756:	e7a5      	b.n	800a6a4 <_svfiprintf_r+0xd4>
 800a758:	2300      	movs	r3, #0
 800a75a:	3401      	adds	r4, #1
 800a75c:	9305      	str	r3, [sp, #20]
 800a75e:	4619      	mov	r1, r3
 800a760:	f04f 0c0a 	mov.w	ip, #10
 800a764:	4620      	mov	r0, r4
 800a766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a76a:	3a30      	subs	r2, #48	; 0x30
 800a76c:	2a09      	cmp	r2, #9
 800a76e:	d903      	bls.n	800a778 <_svfiprintf_r+0x1a8>
 800a770:	2b00      	cmp	r3, #0
 800a772:	d0c5      	beq.n	800a700 <_svfiprintf_r+0x130>
 800a774:	9105      	str	r1, [sp, #20]
 800a776:	e7c3      	b.n	800a700 <_svfiprintf_r+0x130>
 800a778:	fb0c 2101 	mla	r1, ip, r1, r2
 800a77c:	4604      	mov	r4, r0
 800a77e:	2301      	movs	r3, #1
 800a780:	e7f0      	b.n	800a764 <_svfiprintf_r+0x194>
 800a782:	ab03      	add	r3, sp, #12
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	462a      	mov	r2, r5
 800a788:	4b0f      	ldr	r3, [pc, #60]	; (800a7c8 <_svfiprintf_r+0x1f8>)
 800a78a:	a904      	add	r1, sp, #16
 800a78c:	4638      	mov	r0, r7
 800a78e:	f3af 8000 	nop.w
 800a792:	1c42      	adds	r2, r0, #1
 800a794:	4606      	mov	r6, r0
 800a796:	d1d6      	bne.n	800a746 <_svfiprintf_r+0x176>
 800a798:	89ab      	ldrh	r3, [r5, #12]
 800a79a:	065b      	lsls	r3, r3, #25
 800a79c:	f53f af2c 	bmi.w	800a5f8 <_svfiprintf_r+0x28>
 800a7a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7a2:	b01d      	add	sp, #116	; 0x74
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a8:	ab03      	add	r3, sp, #12
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	462a      	mov	r2, r5
 800a7ae:	4b06      	ldr	r3, [pc, #24]	; (800a7c8 <_svfiprintf_r+0x1f8>)
 800a7b0:	a904      	add	r1, sp, #16
 800a7b2:	4638      	mov	r0, r7
 800a7b4:	f000 f9d4 	bl	800ab60 <_printf_i>
 800a7b8:	e7eb      	b.n	800a792 <_svfiprintf_r+0x1c2>
 800a7ba:	bf00      	nop
 800a7bc:	0800b5dc 	.word	0x0800b5dc
 800a7c0:	0800b5e6 	.word	0x0800b5e6
 800a7c4:	00000000 	.word	0x00000000
 800a7c8:	0800a519 	.word	0x0800a519
 800a7cc:	0800b5e2 	.word	0x0800b5e2

0800a7d0 <__sfputc_r>:
 800a7d0:	6893      	ldr	r3, [r2, #8]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	b410      	push	{r4}
 800a7d8:	6093      	str	r3, [r2, #8]
 800a7da:	da08      	bge.n	800a7ee <__sfputc_r+0x1e>
 800a7dc:	6994      	ldr	r4, [r2, #24]
 800a7de:	42a3      	cmp	r3, r4
 800a7e0:	db01      	blt.n	800a7e6 <__sfputc_r+0x16>
 800a7e2:	290a      	cmp	r1, #10
 800a7e4:	d103      	bne.n	800a7ee <__sfputc_r+0x1e>
 800a7e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ea:	f7fe bca7 	b.w	800913c <__swbuf_r>
 800a7ee:	6813      	ldr	r3, [r2, #0]
 800a7f0:	1c58      	adds	r0, r3, #1
 800a7f2:	6010      	str	r0, [r2, #0]
 800a7f4:	7019      	strb	r1, [r3, #0]
 800a7f6:	4608      	mov	r0, r1
 800a7f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <__sfputs_r>:
 800a7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a800:	4606      	mov	r6, r0
 800a802:	460f      	mov	r7, r1
 800a804:	4614      	mov	r4, r2
 800a806:	18d5      	adds	r5, r2, r3
 800a808:	42ac      	cmp	r4, r5
 800a80a:	d101      	bne.n	800a810 <__sfputs_r+0x12>
 800a80c:	2000      	movs	r0, #0
 800a80e:	e007      	b.n	800a820 <__sfputs_r+0x22>
 800a810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a814:	463a      	mov	r2, r7
 800a816:	4630      	mov	r0, r6
 800a818:	f7ff ffda 	bl	800a7d0 <__sfputc_r>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d1f3      	bne.n	800a808 <__sfputs_r+0xa>
 800a820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a824 <_vfiprintf_r>:
 800a824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a828:	460d      	mov	r5, r1
 800a82a:	b09d      	sub	sp, #116	; 0x74
 800a82c:	4614      	mov	r4, r2
 800a82e:	4698      	mov	r8, r3
 800a830:	4606      	mov	r6, r0
 800a832:	b118      	cbz	r0, 800a83c <_vfiprintf_r+0x18>
 800a834:	6983      	ldr	r3, [r0, #24]
 800a836:	b90b      	cbnz	r3, 800a83c <_vfiprintf_r+0x18>
 800a838:	f7fd fb5a 	bl	8007ef0 <__sinit>
 800a83c:	4b89      	ldr	r3, [pc, #548]	; (800aa64 <_vfiprintf_r+0x240>)
 800a83e:	429d      	cmp	r5, r3
 800a840:	d11b      	bne.n	800a87a <_vfiprintf_r+0x56>
 800a842:	6875      	ldr	r5, [r6, #4]
 800a844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a846:	07d9      	lsls	r1, r3, #31
 800a848:	d405      	bmi.n	800a856 <_vfiprintf_r+0x32>
 800a84a:	89ab      	ldrh	r3, [r5, #12]
 800a84c:	059a      	lsls	r2, r3, #22
 800a84e:	d402      	bmi.n	800a856 <_vfiprintf_r+0x32>
 800a850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a852:	f7fd fc10 	bl	8008076 <__retarget_lock_acquire_recursive>
 800a856:	89ab      	ldrh	r3, [r5, #12]
 800a858:	071b      	lsls	r3, r3, #28
 800a85a:	d501      	bpl.n	800a860 <_vfiprintf_r+0x3c>
 800a85c:	692b      	ldr	r3, [r5, #16]
 800a85e:	b9eb      	cbnz	r3, 800a89c <_vfiprintf_r+0x78>
 800a860:	4629      	mov	r1, r5
 800a862:	4630      	mov	r0, r6
 800a864:	f7fe fcce 	bl	8009204 <__swsetup_r>
 800a868:	b1c0      	cbz	r0, 800a89c <_vfiprintf_r+0x78>
 800a86a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a86c:	07dc      	lsls	r4, r3, #31
 800a86e:	d50e      	bpl.n	800a88e <_vfiprintf_r+0x6a>
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	b01d      	add	sp, #116	; 0x74
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	4b7b      	ldr	r3, [pc, #492]	; (800aa68 <_vfiprintf_r+0x244>)
 800a87c:	429d      	cmp	r5, r3
 800a87e:	d101      	bne.n	800a884 <_vfiprintf_r+0x60>
 800a880:	68b5      	ldr	r5, [r6, #8]
 800a882:	e7df      	b.n	800a844 <_vfiprintf_r+0x20>
 800a884:	4b79      	ldr	r3, [pc, #484]	; (800aa6c <_vfiprintf_r+0x248>)
 800a886:	429d      	cmp	r5, r3
 800a888:	bf08      	it	eq
 800a88a:	68f5      	ldreq	r5, [r6, #12]
 800a88c:	e7da      	b.n	800a844 <_vfiprintf_r+0x20>
 800a88e:	89ab      	ldrh	r3, [r5, #12]
 800a890:	0598      	lsls	r0, r3, #22
 800a892:	d4ed      	bmi.n	800a870 <_vfiprintf_r+0x4c>
 800a894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a896:	f7fd fbef 	bl	8008078 <__retarget_lock_release_recursive>
 800a89a:	e7e9      	b.n	800a870 <_vfiprintf_r+0x4c>
 800a89c:	2300      	movs	r3, #0
 800a89e:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a0:	2320      	movs	r3, #32
 800a8a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8aa:	2330      	movs	r3, #48	; 0x30
 800a8ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa70 <_vfiprintf_r+0x24c>
 800a8b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8b4:	f04f 0901 	mov.w	r9, #1
 800a8b8:	4623      	mov	r3, r4
 800a8ba:	469a      	mov	sl, r3
 800a8bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8c0:	b10a      	cbz	r2, 800a8c6 <_vfiprintf_r+0xa2>
 800a8c2:	2a25      	cmp	r2, #37	; 0x25
 800a8c4:	d1f9      	bne.n	800a8ba <_vfiprintf_r+0x96>
 800a8c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a8ca:	d00b      	beq.n	800a8e4 <_vfiprintf_r+0xc0>
 800a8cc:	465b      	mov	r3, fp
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f7ff ff93 	bl	800a7fe <__sfputs_r>
 800a8d8:	3001      	adds	r0, #1
 800a8da:	f000 80aa 	beq.w	800aa32 <_vfiprintf_r+0x20e>
 800a8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8e0:	445a      	add	r2, fp
 800a8e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 80a2 	beq.w	800aa32 <_vfiprintf_r+0x20e>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8f8:	f10a 0a01 	add.w	sl, sl, #1
 800a8fc:	9304      	str	r3, [sp, #16]
 800a8fe:	9307      	str	r3, [sp, #28]
 800a900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a904:	931a      	str	r3, [sp, #104]	; 0x68
 800a906:	4654      	mov	r4, sl
 800a908:	2205      	movs	r2, #5
 800a90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a90e:	4858      	ldr	r0, [pc, #352]	; (800aa70 <_vfiprintf_r+0x24c>)
 800a910:	f7f5 fc7e 	bl	8000210 <memchr>
 800a914:	9a04      	ldr	r2, [sp, #16]
 800a916:	b9d8      	cbnz	r0, 800a950 <_vfiprintf_r+0x12c>
 800a918:	06d1      	lsls	r1, r2, #27
 800a91a:	bf44      	itt	mi
 800a91c:	2320      	movmi	r3, #32
 800a91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a922:	0713      	lsls	r3, r2, #28
 800a924:	bf44      	itt	mi
 800a926:	232b      	movmi	r3, #43	; 0x2b
 800a928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a92c:	f89a 3000 	ldrb.w	r3, [sl]
 800a930:	2b2a      	cmp	r3, #42	; 0x2a
 800a932:	d015      	beq.n	800a960 <_vfiprintf_r+0x13c>
 800a934:	9a07      	ldr	r2, [sp, #28]
 800a936:	4654      	mov	r4, sl
 800a938:	2000      	movs	r0, #0
 800a93a:	f04f 0c0a 	mov.w	ip, #10
 800a93e:	4621      	mov	r1, r4
 800a940:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a944:	3b30      	subs	r3, #48	; 0x30
 800a946:	2b09      	cmp	r3, #9
 800a948:	d94e      	bls.n	800a9e8 <_vfiprintf_r+0x1c4>
 800a94a:	b1b0      	cbz	r0, 800a97a <_vfiprintf_r+0x156>
 800a94c:	9207      	str	r2, [sp, #28]
 800a94e:	e014      	b.n	800a97a <_vfiprintf_r+0x156>
 800a950:	eba0 0308 	sub.w	r3, r0, r8
 800a954:	fa09 f303 	lsl.w	r3, r9, r3
 800a958:	4313      	orrs	r3, r2
 800a95a:	9304      	str	r3, [sp, #16]
 800a95c:	46a2      	mov	sl, r4
 800a95e:	e7d2      	b.n	800a906 <_vfiprintf_r+0xe2>
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	1d19      	adds	r1, r3, #4
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	9103      	str	r1, [sp, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	bfbb      	ittet	lt
 800a96c:	425b      	neglt	r3, r3
 800a96e:	f042 0202 	orrlt.w	r2, r2, #2
 800a972:	9307      	strge	r3, [sp, #28]
 800a974:	9307      	strlt	r3, [sp, #28]
 800a976:	bfb8      	it	lt
 800a978:	9204      	strlt	r2, [sp, #16]
 800a97a:	7823      	ldrb	r3, [r4, #0]
 800a97c:	2b2e      	cmp	r3, #46	; 0x2e
 800a97e:	d10c      	bne.n	800a99a <_vfiprintf_r+0x176>
 800a980:	7863      	ldrb	r3, [r4, #1]
 800a982:	2b2a      	cmp	r3, #42	; 0x2a
 800a984:	d135      	bne.n	800a9f2 <_vfiprintf_r+0x1ce>
 800a986:	9b03      	ldr	r3, [sp, #12]
 800a988:	1d1a      	adds	r2, r3, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	9203      	str	r2, [sp, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bfb8      	it	lt
 800a992:	f04f 33ff 	movlt.w	r3, #4294967295
 800a996:	3402      	adds	r4, #2
 800a998:	9305      	str	r3, [sp, #20]
 800a99a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa80 <_vfiprintf_r+0x25c>
 800a99e:	7821      	ldrb	r1, [r4, #0]
 800a9a0:	2203      	movs	r2, #3
 800a9a2:	4650      	mov	r0, sl
 800a9a4:	f7f5 fc34 	bl	8000210 <memchr>
 800a9a8:	b140      	cbz	r0, 800a9bc <_vfiprintf_r+0x198>
 800a9aa:	2340      	movs	r3, #64	; 0x40
 800a9ac:	eba0 000a 	sub.w	r0, r0, sl
 800a9b0:	fa03 f000 	lsl.w	r0, r3, r0
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	4303      	orrs	r3, r0
 800a9b8:	3401      	adds	r4, #1
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c0:	482c      	ldr	r0, [pc, #176]	; (800aa74 <_vfiprintf_r+0x250>)
 800a9c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9c6:	2206      	movs	r2, #6
 800a9c8:	f7f5 fc22 	bl	8000210 <memchr>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d03f      	beq.n	800aa50 <_vfiprintf_r+0x22c>
 800a9d0:	4b29      	ldr	r3, [pc, #164]	; (800aa78 <_vfiprintf_r+0x254>)
 800a9d2:	bb1b      	cbnz	r3, 800aa1c <_vfiprintf_r+0x1f8>
 800a9d4:	9b03      	ldr	r3, [sp, #12]
 800a9d6:	3307      	adds	r3, #7
 800a9d8:	f023 0307 	bic.w	r3, r3, #7
 800a9dc:	3308      	adds	r3, #8
 800a9de:	9303      	str	r3, [sp, #12]
 800a9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e2:	443b      	add	r3, r7
 800a9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e6:	e767      	b.n	800a8b8 <_vfiprintf_r+0x94>
 800a9e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	e7a5      	b.n	800a93e <_vfiprintf_r+0x11a>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	3401      	adds	r4, #1
 800a9f6:	9305      	str	r3, [sp, #20]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	f04f 0c0a 	mov.w	ip, #10
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa04:	3a30      	subs	r2, #48	; 0x30
 800aa06:	2a09      	cmp	r2, #9
 800aa08:	d903      	bls.n	800aa12 <_vfiprintf_r+0x1ee>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0c5      	beq.n	800a99a <_vfiprintf_r+0x176>
 800aa0e:	9105      	str	r1, [sp, #20]
 800aa10:	e7c3      	b.n	800a99a <_vfiprintf_r+0x176>
 800aa12:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa16:	4604      	mov	r4, r0
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e7f0      	b.n	800a9fe <_vfiprintf_r+0x1da>
 800aa1c:	ab03      	add	r3, sp, #12
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	462a      	mov	r2, r5
 800aa22:	4b16      	ldr	r3, [pc, #88]	; (800aa7c <_vfiprintf_r+0x258>)
 800aa24:	a904      	add	r1, sp, #16
 800aa26:	4630      	mov	r0, r6
 800aa28:	f3af 8000 	nop.w
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	1c78      	adds	r0, r7, #1
 800aa30:	d1d6      	bne.n	800a9e0 <_vfiprintf_r+0x1bc>
 800aa32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa34:	07d9      	lsls	r1, r3, #31
 800aa36:	d405      	bmi.n	800aa44 <_vfiprintf_r+0x220>
 800aa38:	89ab      	ldrh	r3, [r5, #12]
 800aa3a:	059a      	lsls	r2, r3, #22
 800aa3c:	d402      	bmi.n	800aa44 <_vfiprintf_r+0x220>
 800aa3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa40:	f7fd fb1a 	bl	8008078 <__retarget_lock_release_recursive>
 800aa44:	89ab      	ldrh	r3, [r5, #12]
 800aa46:	065b      	lsls	r3, r3, #25
 800aa48:	f53f af12 	bmi.w	800a870 <_vfiprintf_r+0x4c>
 800aa4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa4e:	e711      	b.n	800a874 <_vfiprintf_r+0x50>
 800aa50:	ab03      	add	r3, sp, #12
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	462a      	mov	r2, r5
 800aa56:	4b09      	ldr	r3, [pc, #36]	; (800aa7c <_vfiprintf_r+0x258>)
 800aa58:	a904      	add	r1, sp, #16
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f000 f880 	bl	800ab60 <_printf_i>
 800aa60:	e7e4      	b.n	800aa2c <_vfiprintf_r+0x208>
 800aa62:	bf00      	nop
 800aa64:	0800b33c 	.word	0x0800b33c
 800aa68:	0800b35c 	.word	0x0800b35c
 800aa6c:	0800b31c 	.word	0x0800b31c
 800aa70:	0800b5dc 	.word	0x0800b5dc
 800aa74:	0800b5e6 	.word	0x0800b5e6
 800aa78:	00000000 	.word	0x00000000
 800aa7c:	0800a7ff 	.word	0x0800a7ff
 800aa80:	0800b5e2 	.word	0x0800b5e2

0800aa84 <_printf_common>:
 800aa84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa88:	4616      	mov	r6, r2
 800aa8a:	4699      	mov	r9, r3
 800aa8c:	688a      	ldr	r2, [r1, #8]
 800aa8e:	690b      	ldr	r3, [r1, #16]
 800aa90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa94:	4293      	cmp	r3, r2
 800aa96:	bfb8      	it	lt
 800aa98:	4613      	movlt	r3, r2
 800aa9a:	6033      	str	r3, [r6, #0]
 800aa9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	b10a      	cbz	r2, 800aaaa <_printf_common+0x26>
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	6033      	str	r3, [r6, #0]
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	0699      	lsls	r1, r3, #26
 800aaae:	bf42      	ittt	mi
 800aab0:	6833      	ldrmi	r3, [r6, #0]
 800aab2:	3302      	addmi	r3, #2
 800aab4:	6033      	strmi	r3, [r6, #0]
 800aab6:	6825      	ldr	r5, [r4, #0]
 800aab8:	f015 0506 	ands.w	r5, r5, #6
 800aabc:	d106      	bne.n	800aacc <_printf_common+0x48>
 800aabe:	f104 0a19 	add.w	sl, r4, #25
 800aac2:	68e3      	ldr	r3, [r4, #12]
 800aac4:	6832      	ldr	r2, [r6, #0]
 800aac6:	1a9b      	subs	r3, r3, r2
 800aac8:	42ab      	cmp	r3, r5
 800aaca:	dc26      	bgt.n	800ab1a <_printf_common+0x96>
 800aacc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aad0:	1e13      	subs	r3, r2, #0
 800aad2:	6822      	ldr	r2, [r4, #0]
 800aad4:	bf18      	it	ne
 800aad6:	2301      	movne	r3, #1
 800aad8:	0692      	lsls	r2, r2, #26
 800aada:	d42b      	bmi.n	800ab34 <_printf_common+0xb0>
 800aadc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aae0:	4649      	mov	r1, r9
 800aae2:	4638      	mov	r0, r7
 800aae4:	47c0      	blx	r8
 800aae6:	3001      	adds	r0, #1
 800aae8:	d01e      	beq.n	800ab28 <_printf_common+0xa4>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	68e5      	ldr	r5, [r4, #12]
 800aaee:	6832      	ldr	r2, [r6, #0]
 800aaf0:	f003 0306 	and.w	r3, r3, #6
 800aaf4:	2b04      	cmp	r3, #4
 800aaf6:	bf08      	it	eq
 800aaf8:	1aad      	subeq	r5, r5, r2
 800aafa:	68a3      	ldr	r3, [r4, #8]
 800aafc:	6922      	ldr	r2, [r4, #16]
 800aafe:	bf0c      	ite	eq
 800ab00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab04:	2500      	movne	r5, #0
 800ab06:	4293      	cmp	r3, r2
 800ab08:	bfc4      	itt	gt
 800ab0a:	1a9b      	subgt	r3, r3, r2
 800ab0c:	18ed      	addgt	r5, r5, r3
 800ab0e:	2600      	movs	r6, #0
 800ab10:	341a      	adds	r4, #26
 800ab12:	42b5      	cmp	r5, r6
 800ab14:	d11a      	bne.n	800ab4c <_printf_common+0xc8>
 800ab16:	2000      	movs	r0, #0
 800ab18:	e008      	b.n	800ab2c <_printf_common+0xa8>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	4652      	mov	r2, sl
 800ab1e:	4649      	mov	r1, r9
 800ab20:	4638      	mov	r0, r7
 800ab22:	47c0      	blx	r8
 800ab24:	3001      	adds	r0, #1
 800ab26:	d103      	bne.n	800ab30 <_printf_common+0xac>
 800ab28:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab30:	3501      	adds	r5, #1
 800ab32:	e7c6      	b.n	800aac2 <_printf_common+0x3e>
 800ab34:	18e1      	adds	r1, r4, r3
 800ab36:	1c5a      	adds	r2, r3, #1
 800ab38:	2030      	movs	r0, #48	; 0x30
 800ab3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab3e:	4422      	add	r2, r4
 800ab40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab48:	3302      	adds	r3, #2
 800ab4a:	e7c7      	b.n	800aadc <_printf_common+0x58>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	4622      	mov	r2, r4
 800ab50:	4649      	mov	r1, r9
 800ab52:	4638      	mov	r0, r7
 800ab54:	47c0      	blx	r8
 800ab56:	3001      	adds	r0, #1
 800ab58:	d0e6      	beq.n	800ab28 <_printf_common+0xa4>
 800ab5a:	3601      	adds	r6, #1
 800ab5c:	e7d9      	b.n	800ab12 <_printf_common+0x8e>
	...

0800ab60 <_printf_i>:
 800ab60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab64:	7e0f      	ldrb	r7, [r1, #24]
 800ab66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab68:	2f78      	cmp	r7, #120	; 0x78
 800ab6a:	4691      	mov	r9, r2
 800ab6c:	4680      	mov	r8, r0
 800ab6e:	460c      	mov	r4, r1
 800ab70:	469a      	mov	sl, r3
 800ab72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab76:	d807      	bhi.n	800ab88 <_printf_i+0x28>
 800ab78:	2f62      	cmp	r7, #98	; 0x62
 800ab7a:	d80a      	bhi.n	800ab92 <_printf_i+0x32>
 800ab7c:	2f00      	cmp	r7, #0
 800ab7e:	f000 80d8 	beq.w	800ad32 <_printf_i+0x1d2>
 800ab82:	2f58      	cmp	r7, #88	; 0x58
 800ab84:	f000 80a3 	beq.w	800acce <_printf_i+0x16e>
 800ab88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab90:	e03a      	b.n	800ac08 <_printf_i+0xa8>
 800ab92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab96:	2b15      	cmp	r3, #21
 800ab98:	d8f6      	bhi.n	800ab88 <_printf_i+0x28>
 800ab9a:	a101      	add	r1, pc, #4	; (adr r1, 800aba0 <_printf_i+0x40>)
 800ab9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aba0:	0800abf9 	.word	0x0800abf9
 800aba4:	0800ac0d 	.word	0x0800ac0d
 800aba8:	0800ab89 	.word	0x0800ab89
 800abac:	0800ab89 	.word	0x0800ab89
 800abb0:	0800ab89 	.word	0x0800ab89
 800abb4:	0800ab89 	.word	0x0800ab89
 800abb8:	0800ac0d 	.word	0x0800ac0d
 800abbc:	0800ab89 	.word	0x0800ab89
 800abc0:	0800ab89 	.word	0x0800ab89
 800abc4:	0800ab89 	.word	0x0800ab89
 800abc8:	0800ab89 	.word	0x0800ab89
 800abcc:	0800ad19 	.word	0x0800ad19
 800abd0:	0800ac3d 	.word	0x0800ac3d
 800abd4:	0800acfb 	.word	0x0800acfb
 800abd8:	0800ab89 	.word	0x0800ab89
 800abdc:	0800ab89 	.word	0x0800ab89
 800abe0:	0800ad3b 	.word	0x0800ad3b
 800abe4:	0800ab89 	.word	0x0800ab89
 800abe8:	0800ac3d 	.word	0x0800ac3d
 800abec:	0800ab89 	.word	0x0800ab89
 800abf0:	0800ab89 	.word	0x0800ab89
 800abf4:	0800ad03 	.word	0x0800ad03
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	1d1a      	adds	r2, r3, #4
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	602a      	str	r2, [r5, #0]
 800ac00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e0a3      	b.n	800ad54 <_printf_i+0x1f4>
 800ac0c:	6820      	ldr	r0, [r4, #0]
 800ac0e:	6829      	ldr	r1, [r5, #0]
 800ac10:	0606      	lsls	r6, r0, #24
 800ac12:	f101 0304 	add.w	r3, r1, #4
 800ac16:	d50a      	bpl.n	800ac2e <_printf_i+0xce>
 800ac18:	680e      	ldr	r6, [r1, #0]
 800ac1a:	602b      	str	r3, [r5, #0]
 800ac1c:	2e00      	cmp	r6, #0
 800ac1e:	da03      	bge.n	800ac28 <_printf_i+0xc8>
 800ac20:	232d      	movs	r3, #45	; 0x2d
 800ac22:	4276      	negs	r6, r6
 800ac24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac28:	485e      	ldr	r0, [pc, #376]	; (800ada4 <_printf_i+0x244>)
 800ac2a:	230a      	movs	r3, #10
 800ac2c:	e019      	b.n	800ac62 <_printf_i+0x102>
 800ac2e:	680e      	ldr	r6, [r1, #0]
 800ac30:	602b      	str	r3, [r5, #0]
 800ac32:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac36:	bf18      	it	ne
 800ac38:	b236      	sxthne	r6, r6
 800ac3a:	e7ef      	b.n	800ac1c <_printf_i+0xbc>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	6820      	ldr	r0, [r4, #0]
 800ac40:	1d19      	adds	r1, r3, #4
 800ac42:	6029      	str	r1, [r5, #0]
 800ac44:	0601      	lsls	r1, r0, #24
 800ac46:	d501      	bpl.n	800ac4c <_printf_i+0xec>
 800ac48:	681e      	ldr	r6, [r3, #0]
 800ac4a:	e002      	b.n	800ac52 <_printf_i+0xf2>
 800ac4c:	0646      	lsls	r6, r0, #25
 800ac4e:	d5fb      	bpl.n	800ac48 <_printf_i+0xe8>
 800ac50:	881e      	ldrh	r6, [r3, #0]
 800ac52:	4854      	ldr	r0, [pc, #336]	; (800ada4 <_printf_i+0x244>)
 800ac54:	2f6f      	cmp	r7, #111	; 0x6f
 800ac56:	bf0c      	ite	eq
 800ac58:	2308      	moveq	r3, #8
 800ac5a:	230a      	movne	r3, #10
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac62:	6865      	ldr	r5, [r4, #4]
 800ac64:	60a5      	str	r5, [r4, #8]
 800ac66:	2d00      	cmp	r5, #0
 800ac68:	bfa2      	ittt	ge
 800ac6a:	6821      	ldrge	r1, [r4, #0]
 800ac6c:	f021 0104 	bicge.w	r1, r1, #4
 800ac70:	6021      	strge	r1, [r4, #0]
 800ac72:	b90e      	cbnz	r6, 800ac78 <_printf_i+0x118>
 800ac74:	2d00      	cmp	r5, #0
 800ac76:	d04d      	beq.n	800ad14 <_printf_i+0x1b4>
 800ac78:	4615      	mov	r5, r2
 800ac7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac7e:	fb03 6711 	mls	r7, r3, r1, r6
 800ac82:	5dc7      	ldrb	r7, [r0, r7]
 800ac84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac88:	4637      	mov	r7, r6
 800ac8a:	42bb      	cmp	r3, r7
 800ac8c:	460e      	mov	r6, r1
 800ac8e:	d9f4      	bls.n	800ac7a <_printf_i+0x11a>
 800ac90:	2b08      	cmp	r3, #8
 800ac92:	d10b      	bne.n	800acac <_printf_i+0x14c>
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	07de      	lsls	r6, r3, #31
 800ac98:	d508      	bpl.n	800acac <_printf_i+0x14c>
 800ac9a:	6923      	ldr	r3, [r4, #16]
 800ac9c:	6861      	ldr	r1, [r4, #4]
 800ac9e:	4299      	cmp	r1, r3
 800aca0:	bfde      	ittt	le
 800aca2:	2330      	movle	r3, #48	; 0x30
 800aca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800acac:	1b52      	subs	r2, r2, r5
 800acae:	6122      	str	r2, [r4, #16]
 800acb0:	f8cd a000 	str.w	sl, [sp]
 800acb4:	464b      	mov	r3, r9
 800acb6:	aa03      	add	r2, sp, #12
 800acb8:	4621      	mov	r1, r4
 800acba:	4640      	mov	r0, r8
 800acbc:	f7ff fee2 	bl	800aa84 <_printf_common>
 800acc0:	3001      	adds	r0, #1
 800acc2:	d14c      	bne.n	800ad5e <_printf_i+0x1fe>
 800acc4:	f04f 30ff 	mov.w	r0, #4294967295
 800acc8:	b004      	add	sp, #16
 800acca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acce:	4835      	ldr	r0, [pc, #212]	; (800ada4 <_printf_i+0x244>)
 800acd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800acd4:	6829      	ldr	r1, [r5, #0]
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	f851 6b04 	ldr.w	r6, [r1], #4
 800acdc:	6029      	str	r1, [r5, #0]
 800acde:	061d      	lsls	r5, r3, #24
 800ace0:	d514      	bpl.n	800ad0c <_printf_i+0x1ac>
 800ace2:	07df      	lsls	r7, r3, #31
 800ace4:	bf44      	itt	mi
 800ace6:	f043 0320 	orrmi.w	r3, r3, #32
 800acea:	6023      	strmi	r3, [r4, #0]
 800acec:	b91e      	cbnz	r6, 800acf6 <_printf_i+0x196>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	f023 0320 	bic.w	r3, r3, #32
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	2310      	movs	r3, #16
 800acf8:	e7b0      	b.n	800ac5c <_printf_i+0xfc>
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	f043 0320 	orr.w	r3, r3, #32
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	2378      	movs	r3, #120	; 0x78
 800ad04:	4828      	ldr	r0, [pc, #160]	; (800ada8 <_printf_i+0x248>)
 800ad06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad0a:	e7e3      	b.n	800acd4 <_printf_i+0x174>
 800ad0c:	0659      	lsls	r1, r3, #25
 800ad0e:	bf48      	it	mi
 800ad10:	b2b6      	uxthmi	r6, r6
 800ad12:	e7e6      	b.n	800ace2 <_printf_i+0x182>
 800ad14:	4615      	mov	r5, r2
 800ad16:	e7bb      	b.n	800ac90 <_printf_i+0x130>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	6826      	ldr	r6, [r4, #0]
 800ad1c:	6961      	ldr	r1, [r4, #20]
 800ad1e:	1d18      	adds	r0, r3, #4
 800ad20:	6028      	str	r0, [r5, #0]
 800ad22:	0635      	lsls	r5, r6, #24
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	d501      	bpl.n	800ad2c <_printf_i+0x1cc>
 800ad28:	6019      	str	r1, [r3, #0]
 800ad2a:	e002      	b.n	800ad32 <_printf_i+0x1d2>
 800ad2c:	0670      	lsls	r0, r6, #25
 800ad2e:	d5fb      	bpl.n	800ad28 <_printf_i+0x1c8>
 800ad30:	8019      	strh	r1, [r3, #0]
 800ad32:	2300      	movs	r3, #0
 800ad34:	6123      	str	r3, [r4, #16]
 800ad36:	4615      	mov	r5, r2
 800ad38:	e7ba      	b.n	800acb0 <_printf_i+0x150>
 800ad3a:	682b      	ldr	r3, [r5, #0]
 800ad3c:	1d1a      	adds	r2, r3, #4
 800ad3e:	602a      	str	r2, [r5, #0]
 800ad40:	681d      	ldr	r5, [r3, #0]
 800ad42:	6862      	ldr	r2, [r4, #4]
 800ad44:	2100      	movs	r1, #0
 800ad46:	4628      	mov	r0, r5
 800ad48:	f7f5 fa62 	bl	8000210 <memchr>
 800ad4c:	b108      	cbz	r0, 800ad52 <_printf_i+0x1f2>
 800ad4e:	1b40      	subs	r0, r0, r5
 800ad50:	6060      	str	r0, [r4, #4]
 800ad52:	6863      	ldr	r3, [r4, #4]
 800ad54:	6123      	str	r3, [r4, #16]
 800ad56:	2300      	movs	r3, #0
 800ad58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad5c:	e7a8      	b.n	800acb0 <_printf_i+0x150>
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	462a      	mov	r2, r5
 800ad62:	4649      	mov	r1, r9
 800ad64:	4640      	mov	r0, r8
 800ad66:	47d0      	blx	sl
 800ad68:	3001      	adds	r0, #1
 800ad6a:	d0ab      	beq.n	800acc4 <_printf_i+0x164>
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	079b      	lsls	r3, r3, #30
 800ad70:	d413      	bmi.n	800ad9a <_printf_i+0x23a>
 800ad72:	68e0      	ldr	r0, [r4, #12]
 800ad74:	9b03      	ldr	r3, [sp, #12]
 800ad76:	4298      	cmp	r0, r3
 800ad78:	bfb8      	it	lt
 800ad7a:	4618      	movlt	r0, r3
 800ad7c:	e7a4      	b.n	800acc8 <_printf_i+0x168>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	4632      	mov	r2, r6
 800ad82:	4649      	mov	r1, r9
 800ad84:	4640      	mov	r0, r8
 800ad86:	47d0      	blx	sl
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d09b      	beq.n	800acc4 <_printf_i+0x164>
 800ad8c:	3501      	adds	r5, #1
 800ad8e:	68e3      	ldr	r3, [r4, #12]
 800ad90:	9903      	ldr	r1, [sp, #12]
 800ad92:	1a5b      	subs	r3, r3, r1
 800ad94:	42ab      	cmp	r3, r5
 800ad96:	dcf2      	bgt.n	800ad7e <_printf_i+0x21e>
 800ad98:	e7eb      	b.n	800ad72 <_printf_i+0x212>
 800ad9a:	2500      	movs	r5, #0
 800ad9c:	f104 0619 	add.w	r6, r4, #25
 800ada0:	e7f5      	b.n	800ad8e <_printf_i+0x22e>
 800ada2:	bf00      	nop
 800ada4:	0800b5ed 	.word	0x0800b5ed
 800ada8:	0800b5fe 	.word	0x0800b5fe

0800adac <_read_r>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	4d07      	ldr	r5, [pc, #28]	; (800adcc <_read_r+0x20>)
 800adb0:	4604      	mov	r4, r0
 800adb2:	4608      	mov	r0, r1
 800adb4:	4611      	mov	r1, r2
 800adb6:	2200      	movs	r2, #0
 800adb8:	602a      	str	r2, [r5, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	f7f7 fcb2 	bl	8002724 <_read>
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	d102      	bne.n	800adca <_read_r+0x1e>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	b103      	cbz	r3, 800adca <_read_r+0x1e>
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	20005d78 	.word	0x20005d78

0800add0 <nan>:
 800add0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800add8 <nan+0x8>
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	00000000 	.word	0x00000000
 800addc:	7ff80000 	.word	0x7ff80000

0800ade0 <__ascii_wctomb>:
 800ade0:	b149      	cbz	r1, 800adf6 <__ascii_wctomb+0x16>
 800ade2:	2aff      	cmp	r2, #255	; 0xff
 800ade4:	bf85      	ittet	hi
 800ade6:	238a      	movhi	r3, #138	; 0x8a
 800ade8:	6003      	strhi	r3, [r0, #0]
 800adea:	700a      	strbls	r2, [r1, #0]
 800adec:	f04f 30ff 	movhi.w	r0, #4294967295
 800adf0:	bf98      	it	ls
 800adf2:	2001      	movls	r0, #1
 800adf4:	4770      	bx	lr
 800adf6:	4608      	mov	r0, r1
 800adf8:	4770      	bx	lr
	...

0800adfc <__assert_func>:
 800adfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adfe:	4614      	mov	r4, r2
 800ae00:	461a      	mov	r2, r3
 800ae02:	4b09      	ldr	r3, [pc, #36]	; (800ae28 <__assert_func+0x2c>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4605      	mov	r5, r0
 800ae08:	68d8      	ldr	r0, [r3, #12]
 800ae0a:	b14c      	cbz	r4, 800ae20 <__assert_func+0x24>
 800ae0c:	4b07      	ldr	r3, [pc, #28]	; (800ae2c <__assert_func+0x30>)
 800ae0e:	9100      	str	r1, [sp, #0]
 800ae10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae14:	4906      	ldr	r1, [pc, #24]	; (800ae30 <__assert_func+0x34>)
 800ae16:	462b      	mov	r3, r5
 800ae18:	f000 f80e 	bl	800ae38 <fiprintf>
 800ae1c:	f000 f862 	bl	800aee4 <abort>
 800ae20:	4b04      	ldr	r3, [pc, #16]	; (800ae34 <__assert_func+0x38>)
 800ae22:	461c      	mov	r4, r3
 800ae24:	e7f3      	b.n	800ae0e <__assert_func+0x12>
 800ae26:	bf00      	nop
 800ae28:	20000258 	.word	0x20000258
 800ae2c:	0800b60f 	.word	0x0800b60f
 800ae30:	0800b61c 	.word	0x0800b61c
 800ae34:	0800b64a 	.word	0x0800b64a

0800ae38 <fiprintf>:
 800ae38:	b40e      	push	{r1, r2, r3}
 800ae3a:	b503      	push	{r0, r1, lr}
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	ab03      	add	r3, sp, #12
 800ae40:	4805      	ldr	r0, [pc, #20]	; (800ae58 <fiprintf+0x20>)
 800ae42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae46:	6800      	ldr	r0, [r0, #0]
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	f7ff fceb 	bl	800a824 <_vfiprintf_r>
 800ae4e:	b002      	add	sp, #8
 800ae50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae54:	b003      	add	sp, #12
 800ae56:	4770      	bx	lr
 800ae58:	20000258 	.word	0x20000258

0800ae5c <_fstat_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4d07      	ldr	r5, [pc, #28]	; (800ae7c <_fstat_r+0x20>)
 800ae60:	2300      	movs	r3, #0
 800ae62:	4604      	mov	r4, r0
 800ae64:	4608      	mov	r0, r1
 800ae66:	4611      	mov	r1, r2
 800ae68:	602b      	str	r3, [r5, #0]
 800ae6a:	f7f7 fc84 	bl	8002776 <_fstat>
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	d102      	bne.n	800ae78 <_fstat_r+0x1c>
 800ae72:	682b      	ldr	r3, [r5, #0]
 800ae74:	b103      	cbz	r3, 800ae78 <_fstat_r+0x1c>
 800ae76:	6023      	str	r3, [r4, #0]
 800ae78:	bd38      	pop	{r3, r4, r5, pc}
 800ae7a:	bf00      	nop
 800ae7c:	20005d78 	.word	0x20005d78

0800ae80 <_isatty_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4d06      	ldr	r5, [pc, #24]	; (800ae9c <_isatty_r+0x1c>)
 800ae84:	2300      	movs	r3, #0
 800ae86:	4604      	mov	r4, r0
 800ae88:	4608      	mov	r0, r1
 800ae8a:	602b      	str	r3, [r5, #0]
 800ae8c:	f7f7 fc83 	bl	8002796 <_isatty>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_isatty_r+0x1a>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_isatty_r+0x1a>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	20005d78 	.word	0x20005d78

0800aea0 <memmove>:
 800aea0:	4288      	cmp	r0, r1
 800aea2:	b510      	push	{r4, lr}
 800aea4:	eb01 0402 	add.w	r4, r1, r2
 800aea8:	d902      	bls.n	800aeb0 <memmove+0x10>
 800aeaa:	4284      	cmp	r4, r0
 800aeac:	4623      	mov	r3, r4
 800aeae:	d807      	bhi.n	800aec0 <memmove+0x20>
 800aeb0:	1e43      	subs	r3, r0, #1
 800aeb2:	42a1      	cmp	r1, r4
 800aeb4:	d008      	beq.n	800aec8 <memmove+0x28>
 800aeb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aebe:	e7f8      	b.n	800aeb2 <memmove+0x12>
 800aec0:	4402      	add	r2, r0
 800aec2:	4601      	mov	r1, r0
 800aec4:	428a      	cmp	r2, r1
 800aec6:	d100      	bne.n	800aeca <memmove+0x2a>
 800aec8:	bd10      	pop	{r4, pc}
 800aeca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aed2:	e7f7      	b.n	800aec4 <memmove+0x24>

0800aed4 <_malloc_usable_size_r>:
 800aed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed8:	1f18      	subs	r0, r3, #4
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	bfbc      	itt	lt
 800aede:	580b      	ldrlt	r3, [r1, r0]
 800aee0:	18c0      	addlt	r0, r0, r3
 800aee2:	4770      	bx	lr

0800aee4 <abort>:
 800aee4:	b508      	push	{r3, lr}
 800aee6:	2006      	movs	r0, #6
 800aee8:	f000 f82c 	bl	800af44 <raise>
 800aeec:	2001      	movs	r0, #1
 800aeee:	f7f7 fc0f 	bl	8002710 <_exit>

0800aef2 <_raise_r>:
 800aef2:	291f      	cmp	r1, #31
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4604      	mov	r4, r0
 800aef8:	460d      	mov	r5, r1
 800aefa:	d904      	bls.n	800af06 <_raise_r+0x14>
 800aefc:	2316      	movs	r3, #22
 800aefe:	6003      	str	r3, [r0, #0]
 800af00:	f04f 30ff 	mov.w	r0, #4294967295
 800af04:	bd38      	pop	{r3, r4, r5, pc}
 800af06:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af08:	b112      	cbz	r2, 800af10 <_raise_r+0x1e>
 800af0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af0e:	b94b      	cbnz	r3, 800af24 <_raise_r+0x32>
 800af10:	4620      	mov	r0, r4
 800af12:	f000 f831 	bl	800af78 <_getpid_r>
 800af16:	462a      	mov	r2, r5
 800af18:	4601      	mov	r1, r0
 800af1a:	4620      	mov	r0, r4
 800af1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af20:	f000 b818 	b.w	800af54 <_kill_r>
 800af24:	2b01      	cmp	r3, #1
 800af26:	d00a      	beq.n	800af3e <_raise_r+0x4c>
 800af28:	1c59      	adds	r1, r3, #1
 800af2a:	d103      	bne.n	800af34 <_raise_r+0x42>
 800af2c:	2316      	movs	r3, #22
 800af2e:	6003      	str	r3, [r0, #0]
 800af30:	2001      	movs	r0, #1
 800af32:	e7e7      	b.n	800af04 <_raise_r+0x12>
 800af34:	2400      	movs	r4, #0
 800af36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af3a:	4628      	mov	r0, r5
 800af3c:	4798      	blx	r3
 800af3e:	2000      	movs	r0, #0
 800af40:	e7e0      	b.n	800af04 <_raise_r+0x12>
	...

0800af44 <raise>:
 800af44:	4b02      	ldr	r3, [pc, #8]	; (800af50 <raise+0xc>)
 800af46:	4601      	mov	r1, r0
 800af48:	6818      	ldr	r0, [r3, #0]
 800af4a:	f7ff bfd2 	b.w	800aef2 <_raise_r>
 800af4e:	bf00      	nop
 800af50:	20000258 	.word	0x20000258

0800af54 <_kill_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d07      	ldr	r5, [pc, #28]	; (800af74 <_kill_r+0x20>)
 800af58:	2300      	movs	r3, #0
 800af5a:	4604      	mov	r4, r0
 800af5c:	4608      	mov	r0, r1
 800af5e:	4611      	mov	r1, r2
 800af60:	602b      	str	r3, [r5, #0]
 800af62:	f7f7 fbc5 	bl	80026f0 <_kill>
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	d102      	bne.n	800af70 <_kill_r+0x1c>
 800af6a:	682b      	ldr	r3, [r5, #0]
 800af6c:	b103      	cbz	r3, 800af70 <_kill_r+0x1c>
 800af6e:	6023      	str	r3, [r4, #0]
 800af70:	bd38      	pop	{r3, r4, r5, pc}
 800af72:	bf00      	nop
 800af74:	20005d78 	.word	0x20005d78

0800af78 <_getpid_r>:
 800af78:	f7f7 bbb2 	b.w	80026e0 <_getpid>

0800af7c <_init>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	bf00      	nop
 800af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af82:	bc08      	pop	{r3}
 800af84:	469e      	mov	lr, r3
 800af86:	4770      	bx	lr

0800af88 <_fini>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	bf00      	nop
 800af8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8e:	bc08      	pop	{r3}
 800af90:	469e      	mov	lr, r3
 800af92:	4770      	bx	lr
